<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Maven打包jar包</title>
      <link href="/2024/11/21/spring241121/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85jar%E5%8C%85/"/>
      <url>/2024/11/21/spring241121/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Maven打包jar包"><a href="#使用Maven打包jar包" class="headerlink" title="使用Maven打包jar包"></a>使用Maven打包jar包</h1><ul><li>使用 idea 创建 maven管理的项目的时候，需要打成可运行的jar包，按照如下步骤处理。</li></ul><h2 id="添加打包插件"><a href="#添加打包插件" class="headerlink" title="添加打包插件"></a>添加打包插件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--            配置 打包 只需替换 mainClass的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 运行程序的 main 入口类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.zyf.budgetsystem3.BudgetSystem3Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="maven插件的-打包功能"><a href="#maven插件的-打包功能" class="headerlink" title="maven插件的 打包功能"></a>maven插件的 打包功能</h2><p><img src="/2024/11/21/spring241121/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85jar%E5%8C%85/image-20241121194214439.png" alt="image-20241121194214439"></p><p><img src="/2024/11/21/spring241121/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85jar%E5%8C%85/image-20241121194234593.png" alt="image-20241121194234593"></p><h2 id="测试能否正常运行"><a href="#测试能否正常运行" class="headerlink" title="测试能否正常运行"></a>测试能否正常运行</h2><p><img src="/2024/11/21/spring241121/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85jar%E5%8C%85/image-20241121194323289.png" alt="image-20241121194323289"></p><p><strong>进入到  jar 包所在的目录下，cmd进入终端</strong></p><p><strong>输入命令</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure><h2 id="第二种测试方式"><a href="#第二种测试方式" class="headerlink" title="第二种测试方式"></a>第二种测试方式</h2><p><img src="/2024/11/21/spring241121/%E4%BD%BF%E7%94%A8Maven%E6%89%93%E5%8C%85jar%E5%8C%85/image-20241121194454560.png" alt="image-20241121194454560"></p><p>新建一个 .bat文件，输入命令  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javaw -jar TestJavaFX2-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>保存后，双击即可运行，避免了以后总是输入命令运行。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建最基础的JavaFX项目</title>
      <link href="/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="创建最基础的JavaFX项目"><a href="#创建最基础的JavaFX项目" class="headerlink" title="创建最基础的JavaFX项目"></a>创建最基础的JavaFX项目</h1><h2 id="第一步，使用IDEA创建一个-JAVAFX-项目"><a href="#第一步，使用IDEA创建一个-JAVAFX-项目" class="headerlink" title="第一步，使用IDEA创建一个 JAVAFX 项目"></a>第一步，使用IDEA创建一个 JAVAFX 项目</h2><p><img src="/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/image-20241121151237159.png" alt="image-20241121151237159"></p><p><img src="/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/image-20241121151304317.png" alt="image-20241121151304317"></p><ul><li>创建好是这个目录结构</li></ul><p><img src="/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/image-20241121152105938.png" alt="image-20241121152105938"></p><h2 id="第二步，在maven中引入-JAVAFX依赖"><a href="#第二步，在maven中引入-JAVAFX依赖" class="headerlink" title="第二步，在maven中引入 JAVAFX依赖"></a>第二步，在maven中引入 JAVAFX依赖</h2><ul><li>JDK8是内置了 javafx依赖的，但是之后javafx就被移除了，需要自己导入依赖包</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zht<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>TestJavaFX2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>TestJavaFX2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>5.9.1<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义可用于JavaFX UI工具包的UI控件、图表和外观。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-controls<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 为JavaFX UI工具包定义FXML API。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-fxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义JavaFXUI工具包的基本API，包括绑定、属性、集合和事件的API。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义JavaFX UI工具包的核心场景API（如布局容器、应用程序生命周期、形状、转换、画布、输入、绘画、图像处理和效果），以及动画、css、并发、几何、打印和窗口化的API。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-graphics<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义用于播放媒体和音频内容的API，作为JavaFX UI工具包的一部分，包括MediaView和MediaPlayer。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-media<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 为JavaFXUI工具包中包含的JavaFX/Swing互操作支持定义API，包括SwingNode（用于在JavaFX应用程序中嵌入Swing）和JFXPanel（用于在Swing应用程序中插入JavaFX）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-swing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 为JavaFX UI工具包中包含的WebView功能定义API。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjfx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javafx-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- Default configuration for running with: mvn clean javafx:run --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-cli<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            //这里填写你的 启动类</span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.zht.testjavafx2/com.zht.testjavafx2.HelloApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">launcher</span>&gt;</span>app<span class="tag">&lt;/<span class="name">launcher</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">jlinkZipName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">jlinkZipName</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">jlinkImageName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">jlinkImageName</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">noManPages</span>&gt;</span>true<span class="tag">&lt;/<span class="name">noManPages</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">stripDebug</span>&gt;</span>true<span class="tag">&lt;/<span class="name">stripDebug</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">noHeaderFiles</span>&gt;</span>true<span class="tag">&lt;/<span class="name">noHeaderFiles</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第三步，在-module-info-java中引入模块信息"><a href="#第三步，在-module-info-java中引入模块信息" class="headerlink" title="第三步，在 module-info.java中引入模块信息"></a>第三步，在 module-info.java中引入模块信息</h2><p><img src="/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/image-20241121154207347.png" alt="image-20241121154207347"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> com.zht.testjavafx2 &#123;</span><br><span class="line">    <span class="keyword">requires</span> javafx.controls;</span><br><span class="line">    <span class="keyword">requires</span> javafx.fxml;</span><br><span class="line">    <span class="keyword">requires</span> javafx.base;</span><br><span class="line">    <span class="keyword">requires</span> javafx.graphics;</span><br><span class="line">    <span class="keyword">requires</span> javafx.media;</span><br><span class="line">    <span class="keyword">requires</span> javafx.swing;</span><br><span class="line">    <span class="keyword">requires</span> javafx.web;</span><br><span class="line"></span><br><span class="line">    opens com.zht.testjavafx2 to javafx.fxml;</span><br><span class="line">    <span class="keyword">exports</span> com.zht.testjavafx2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><img src="/2024/11/21/javafx/%E5%88%9B%E5%BB%BA%E6%9C%80%E5%9F%BA%E7%A1%80%E7%9A%84JavaFX%E9%A1%B9%E7%9B%AE/image-20241121154311503.png" alt="image-20241121154311503"></p>]]></content>
      
      
      <categories>
          
          <category> javaFX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaFX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中升级spring框架的版本</title>
      <link href="/2024/11/21/spring241121/SpringBoot%E4%B8%AD%E5%8D%87%E7%BA%A7spring%E6%A1%86%E6%9E%B6%E7%9A%84%E7%89%88%E6%9C%AC/"/>
      <url>/2024/11/21/spring241121/SpringBoot%E4%B8%AD%E5%8D%87%E7%BA%A7spring%E6%A1%86%E6%9E%B6%E7%9A%84%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot中升级spring框架的版本"><a href="#SpringBoot中升级spring框架的版本" class="headerlink" title="SpringBoot中升级spring框架的版本"></a>SpringBoot中升级spring框架的版本</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>直接升级springboot的版本，然后查看依赖树，会发现spring版本也会跟着升级</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul><li>在 idea中，打开pom.xml</li></ul><p><img src="/2024/11/21/spring241121/SpringBoot%E4%B8%AD%E5%8D%87%E7%BA%A7spring%E6%A1%86%E6%9E%B6%E7%9A%84%E7%89%88%E6%9C%AC/image-20241121103600725.png" alt="image-20241121103600725"></p><p><img src="/2024/11/21/spring241121/SpringBoot%E4%B8%AD%E5%8D%87%E7%BA%A7spring%E6%A1%86%E6%9E%B6%E7%9A%84%E7%89%88%E6%9C%AC/image-20241121103635813.png" alt="image-20241121103635813"></p><p><img src="/2024/11/21/spring241121/SpringBoot%E4%B8%AD%E5%8D%87%E7%BA%A7spring%E6%A1%86%E6%9E%B6%E7%9A%84%E7%89%88%E6%9C%AC/image-20241121103818527.png" alt="image-20241121103818527"></p><ul><li>回到 pom.xml 在 properties标签中指定我们需要的 spring 版本</li></ul><p><img src="/2024/11/21/spring241121/SpringBoot%E4%B8%AD%E5%8D%87%E7%BA%A7spring%E6%A1%86%E6%9E%B6%E7%9A%84%E7%89%88%E6%9C%AC/image-20241121104020270.png" alt="image-20241121104020270"></p><p><strong>注意： 依赖版本要和你的jdk版本 对应，Spring 5.3.39 是 jdk 8 支持的最高版本，如果升级为 spring 6.0.x 以上，就会报错，因为 需要jdk17才可以！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将字符串中的16进制码转成中文</title>
      <link href="/2024/11/19/241116/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%8416%E8%BF%9B%E5%88%B6%E7%A0%81%E8%BD%AC%E6%88%90%E4%B8%AD%E6%96%87/"/>
      <url>/2024/11/19/241116/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%8416%E8%BF%9B%E5%88%B6%E7%A0%81%E8%BD%AC%E6%88%90%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="将字符串中的16进制码转成中文"><a href="#将字符串中的16进制码转成中文" class="headerlink" title="将字符串中的16进制码转成中文"></a>将字符串中的16进制码转成中文</h1><ul><li>如果出现这中字符串</li></ul><p><img src="/2024/11/19/241116/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%8416%E8%BF%9B%E5%88%B6%E7%A0%81%E8%BD%AC%E6%88%90%E4%B8%AD%E6%96%87/image-20241120095616721.png" alt="image-20241120095616721"></p><ul><li>使用这个方法加工一下即可。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nccloud.comms.lang.StringEscapeUtils;</span><br><span class="line"></span><br><span class="line">ret = StringEscapeUtils.unescapeJava(ret);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/11/19/241116/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%8416%E8%BF%9B%E5%88%B6%E7%A0%81%E8%BD%AC%E6%88%90%E4%B8%AD%E6%96%87/image-20241120095747072.png" alt="image-20241120095747072"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux批量替换目录里的jar包</title>
      <link href="/2024/11/19/241116/Linux%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84jar%E5%8C%85/"/>
      <url>/2024/11/19/241116/Linux%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-替换某个目录下的-多个文件"><a href="#Linux-替换某个目录下的-多个文件" class="headerlink" title="Linux 替换某个目录下的 多个文件"></a>Linux 替换某个目录下的 多个文件</h1><h2 id="第一步，先备份"><a href="#第一步，先备份" class="headerlink" title="第一步，先备份"></a>第一步，先备份</h2><ul><li>进入到目录下，使用压缩命令压缩所有文件</li><li>-u 是指 文件存在则替换，文件不存在则添加    jarbak_1119.zip是压缩包的名称   后面的都是目标文件的路径</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -u jarbak_1119.zip ./SessionServer/external/lib/spring-aop-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-beans-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-context-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-context-support-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-core-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-expression-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-jms-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-tx-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-web-5.1.6.RELEASE.jar ./SessionServer/external/lib/spring-webmvc-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-aop-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-beans-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-context-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-context-support-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-core-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-expression-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-jms-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-tx-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-web-5.1.6.RELEASE.jar ./PKLockServer/external/lib/spring-webmvc-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-aop-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-beans-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-context-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-context-support-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-core-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-expression-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-jms-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-tx-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-web-5.1.6.RELEASE.jar ./MessageServer/external/lib/spring-webmvc-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-aop-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-beans-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-context-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-context-support-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-core-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-expression-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-jms-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-tx-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-web-5.1.6.RELEASE.jar ./SearchServer/external/lib/spring-webmvc-5.1.6.RELEASE.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二步，上传我们自己的文件"><a href="#第二步，上传我们自己的文件" class="headerlink" title="第二步，上传我们自己的文件"></a>第二步，上传我们自己的文件</h2><ul><li>如果说，要将源文件替换成目标文件，则讲我们自己的目标文件压缩，并上传至linux的某目录下</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rz ---&gt; 选择文件</span><br></pre></td></tr></table></figure><h2 id="第三步，删除掉原来的文件"><a href="#第三步，删除掉原来的文件" class="headerlink" title="第三步，删除掉原来的文件"></a>第三步，删除掉原来的文件</h2><ul><li>先进入到目标目录下 ，使用 rm -f  删除文件。 注意使用  * 这种通配符必须检查，会不会匹配到其他的不需要删除的文件！很危险的方式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f ./SessionServer/external/lib/spring-*.jar</span><br><span class="line"><span class="built_in">rm</span> -f ./PKLockServer/external/lib/spring-*.jar</span><br><span class="line"><span class="built_in">rm</span> -f ./MessageServer/external/lib/spring-*.jar</span><br><span class="line"><span class="built_in">rm</span> -f ./SearchServer/external/lib/spring-*.jar</span><br></pre></td></tr></table></figure><ul><li>最好还是拼一条  rm命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f \</span><br><span class="line"><span class="string">&#x27;./spring-aop-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-beans-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-context-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-context-support-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-core-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-expression-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-jms-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-tx-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-web-5.1.6.RELEASE.jar&#x27;</span> \</span><br><span class="line"><span class="string">&#x27;./spring-webmvc-5.1.6.RELEASE.jar&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="第四步，解压我们自己的文件"><a href="#第四步，解压我们自己的文件" class="headerlink" title="第四步，解压我们自己的文件"></a>第四步，解压我们自己的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip ourjars.zip -d home </span><br></pre></td></tr></table></figure><h2 id="查看压缩包里的文件"><a href="#查看压缩包里的文件" class="headerlink" title="查看压缩包里的文件"></a>查看压缩包里的文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zipinfo filename.zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring使用JDBC查询数据库</title>
      <link href="/2024/11/18/spring241121/Spring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/11/18/spring241121/Spring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-使用JDBC操作数据库"><a href="#SpringBoot-使用JDBC操作数据库" class="headerlink" title="SpringBoot 使用JDBC操作数据库"></a>SpringBoot 使用JDBC操作数据库</h1><h1 id="首先搭建一个基本的SpringBoot项目"><a href="#首先搭建一个基本的SpringBoot项目" class="headerlink" title="首先搭建一个基本的SpringBoot项目"></a>首先搭建一个基本的SpringBoot项目</h1><p><img src="/2024/11/18/spring241121/Spring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93/.%5CSpring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%5Cimage-20241118231553126.png" alt="image-20241118231553126"></p><ul><li>建立类的目录结构，controller –&gt; service –&gt; dao</li><li>config 包含配置类  ， entity包含实体类</li></ul><h2 id="依赖-pom-xml"><a href="#依赖-pom-xml" class="headerlink" title="依赖 pom.xml"></a>依赖 pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        操作数据库 的 jdbc 依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        操作orcal的依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.database.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">##数据库地址</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:oracle:thin:@//124.239.150.64:9092/ORCL</span></span><br><span class="line"><span class="comment">##数据库用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">TLTEST240719</span></span><br><span class="line"><span class="comment">##数据库密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">TLTEST240719</span></span><br><span class="line"><span class="comment">##数据库驱动</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">oracle.jdbc.driver.OracleDriver   //这是orcal的驱动类</span></span><br></pre></td></tr></table></figure><p><img src="/2024/11/18/spring241121/Spring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93/.%5CSpring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%5Cimage-20241118231844835.png" alt="image-20241118231844835"></p><h2 id="初始化数据源"><a href="#初始化数据源" class="headerlink" title="初始化数据源"></a>初始化数据源</h2><ul><li>com.zht.mytestdemop2.config.OrcalDataSourcesConfig</li><li>这个类用于初始化数据源</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zht.mytestdemop2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DriverManagerDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrcalDataSourcesConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DriverManagerDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>com.zht.mytestdemop2.config.AccquireBeanConfig </li><li>这个类用于初始化 jdbcTemplate</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zht.mytestdemop2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccquireBeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JdbcTemplate <span class="title function_">getJdbcTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(<span class="built_in">this</span>.dataSource);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryOrcalTestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryJdbcService queryJdbcService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryOrcalTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> queryJdbcService.query();</span><br><span class="line">        <span class="keyword">return</span> query;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryJdbcServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">QueryJdbcService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryDAO queryDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queryDAO.queryData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryData</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; select pk_org from org_orgs where code = &#x27;10070000&#x27; &quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; query = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">ColumnMapRowMapper</span>());</span><br><span class="line">        <span class="keyword">if</span>(query != <span class="literal">null</span> &amp;&amp; query.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> query.get(<span class="number">0</span>).toString();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><img src="/2024/11/18/spring241121/Spring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93/.%5CSpring%E4%BD%BF%E7%94%A8JDBC%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%5Cimage-20241118232539716.png" alt="image-20241118232539716"></p><p><strong>这个Service 一开始不是自动注入的，而是new出来的，结果Service里面的 成员变量dao 怎么也注入不进去！</strong></p><p><strong>答案是，new出来的对象是不经过 Spring容器管理的，该对象里面的成员变量是不会被Spring自动注入的。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot调用Controller</title>
      <link href="/2024/11/18/spring241121/SpringBoot%E8%B0%83%E7%94%A8Controller/"/>
      <url>/2024/11/18/spring241121/SpringBoot%E8%B0%83%E7%94%A8Controller/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot调用Controller的几种方式"><a href="#SpringBoot调用Controller的几种方式" class="headerlink" title="SpringBoot调用Controller的几种方式"></a>SpringBoot调用Controller的几种方式</h1><h2 id="Get请求-使用RestFul风格的请求"><a href="#Get请求-使用RestFul风格的请求" class="headerlink" title="Get请求  使用RestFul风格的请求"></a>Get请求  使用RestFul风格的请求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//127.0.0.1/hello/&#123;id&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个最简单的  Get请求 </span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireData</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//路径中拼接动态参数 </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 路径中的动态参数的name 要和声明的方法参数的name 保持一致！ 否则要变成 示例 1.2</span></span><br><span class="line"><span class="comment">    2. 如果拼接了动态参数，不传这个参数的话，会报错！默认是必传的。 否则要变成 实例 1.3</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireDynamicData</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, id = &quot;</span>+ id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 示例 1.2</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireDynamicData</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot;)</span> String fid)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, fid = &quot;</span>+ fid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//示例 1.3</span></span><br><span class="line">    <span class="comment">// 1.首先，要把不带动态参数的路径加上 ， 第二要给 @PathVariable 添加 required = false </span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/api/hello/&#123;id&#125;&quot; , &quot;/api/hello&quot;&#125;)</span>    <span class="meta">@GetMapping(value = &#123;&quot;/api/more/&#123;id&#125;/&#123;name&#125;&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireDynamicData</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot; ,required = false)</span> String fid)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, fid = &quot;</span>+ fid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.还可以用 java.util.Optional 声明参数，jdk8+</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/api/hello/&#123;id&#125;&quot; ,&quot;/api/hello&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireDynamicData2</span><span class="params">(<span class="meta">@PathVariable</span> Optional&lt;String&gt; id)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id.isPresent())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, fid = &quot;</span>+ id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;missing&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//还可以用Map接收参数  //结果: &quot;null&quot;</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/api/hello/&#123;id&#125;&quot; ,&quot;/api/hello&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireDynamicData2</span><span class="params">(<span class="meta">@PathVariable</span> Map&lt;String,String&gt; id)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;missing&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> id.get(<span class="string">&quot;id&quot;</span>) == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : id.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> s ;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//单个请求中存在多个动态变量</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/api/more/&#123;id&#125;/&#123;name&#125;&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">accquireMoreData</span><span class="params">(<span class="meta">@PathVariable</span> String id ,<span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, fid = &quot;</span>+ id +<span class="string">&quot; name = &quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Get请求，使用？在路径中拼接参数的形式"><a href="#Get请求，使用？在路径中拼接参数的形式" class="headerlink" title="Get请求，使用？在路径中拼接参数的形式"></a>Get请求，使用？在路径中拼接参数的形式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:8080/api/hello?code=123&amp;name=zhangsan</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.使用 @RequestParam 注解</span></span><br><span class="line"><span class="meta">@GetMapping(value = &#123;&quot;/api/para&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData</span><span class="params">(<span class="meta">@RequestParam</span> String code)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, code&quot;</span> +code ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如果路径的 参数名 和 方法声明的参数名不一致，则可以用 name，或者value属性指定，都可以的！</span></span><br><span class="line"> <span class="meta">@GetMapping(value = &#123;&quot;/api/para2&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData2</span><span class="params">(<span class="meta">@RequestParam(name = &quot;zcode&quot;)</span> String code)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, zcode&quot;</span> +code ;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@GetMapping(value = &#123;&quot;/api/para3&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData3</span><span class="params">(<span class="meta">@RequestParam(value = &quot;xcode&quot;)</span> String code)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, xcode&quot;</span> +code ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.接收可变参数，参数可以为空  ，require属性 或者 设置一个 defaultValue</span></span><br><span class="line"> <span class="meta">@GetMapping(value = &#123;&quot;/api/para2&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData2</span><span class="params">(<span class="meta">@RequestParam(name = &quot;zcode&quot;,defaultValue = &quot;666&quot;)</span> String code)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, zcode&quot;</span> +code ;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@GetMapping(value = &#123;&quot;/api/para3&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData3</span><span class="params">(<span class="meta">@RequestParam(value = &quot;xcode&quot;,required = false)</span> String code)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, xcode&quot;</span> +code ;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//4. 接收多个参数  使用Map接收</span></span><br><span class="line"><span class="comment">// http://127.0.0.1:8080/api/para2?code=123213&amp;name=zhangsan</span></span><br><span class="line"> <span class="meta">@GetMapping(value = &#123;&quot;/api/para2&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData2</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String,String&gt; param)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, zcode&quot;</span> +param.get(<span class="string">&quot;code&quot;</span>) +<span class="string">&quot;:&quot;</span>+param.get(<span class="string">&quot;name&quot;</span>) ;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//5.接受一个参数，但是会有多个值  使用List接收</span></span><br><span class="line"><span class="comment">//http://127.0.0.1:8080/api/para3?codes=123213,weqwe,zzzcx</span></span><br><span class="line"> <span class="meta">@GetMapping(value = &#123;&quot;/api/para3&quot; &#125;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">accquireparamData3</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; codes)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Dynamic hello world, xcode&quot;</span> +codes.toString() ;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Post请求的使用"><a href="#Post请求的使用" class="headerlink" title="Post请求的使用"></a>Post请求的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">//基本使用  参数放在表单中提交</span></span><br><span class="line">   <span class="comment">//此时无任何注解，参数的名称必须和方法声明参数名称保持一致！否则收到的参数为 null</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">postRequest</span><span class="params">(String name ,String code)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span>+name +<span class="string">&quot;:: code&quot;</span>+code ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1.使用 @RequestParam注解  可以设置三个参数，name , required , defaultValue</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">postRequest2</span><span class="params">(<span class="meta">@RequestParam</span> String name ,<span class="meta">@RequestParam</span> String code)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;name2:&quot;</span>+name +<span class="string">&quot;:: code2&quot;</span>+code ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.使用Map接收多个表单参数，使用数组或者List接收 多个，key相同但是value不同的参数</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post4&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">postRequest4</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String,String&gt; para)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;name2:&quot;</span>+para.get(<span class="string">&quot;name&quot;</span>) +<span class="string">&quot;:: code2:&quot;</span>+para.get(<span class="string">&quot;code&quot;</span>) ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post5&quot;)</span>  <span class="comment">//注意，此时传参，表单的参数key必须是 para</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">postRequest5</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; para)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;参数数组：&quot;</span>+para.toString();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.接收 json报文  </span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post6&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">postRequest6</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; para)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> para.toString();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.使用实体类接收请求报文</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/post6&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">postRequest6</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> user.toString();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String code ;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.code = code;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">               <span class="string">&quot;code=&#x27;&quot;</span> + code + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">               <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取最后一个审批人</title>
      <link href="/2024/11/16/241109/%E8%8E%B7%E5%8F%96%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%AE%A1%E6%89%B9%E4%BA%BA/"/>
      <url>/2024/11/16/241109/%E8%8E%B7%E5%8F%96%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%AE%A1%E6%89%B9%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="获取当前的审批流，是否是最后一个人审批"><a href="#获取当前的审批流，是否是最后一个人审批" class="headerlink" title="获取当前的审批流，是否是最后一个人审批"></a>获取当前的审批流，是否是最后一个人审批</h1><ul><li>有的业务需求是，必须最后一个人审批之后，才能 XXXXXX 下面的方法就是确定是不是   处于最后一个人审批的环节，如果后面还有人审批，则返回false，如果当前这个人审批完流程就结束了，则返回true</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取是不是最后一个审批流程！</span></span><br><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">isLastApproveActivity</span><span class="params">(JKBXVO jkbx, String djlxbm)</span></span><br><span class="line"><span class="keyword">throws</span> BusinessException, XPDLParserException &#123;</span><br><span class="line"><span class="type">IWorkflowMachine</span> <span class="variable">bsWorkflow</span> <span class="operator">=</span> (IWorkflowMachine) NCLocator</span><br><span class="line">.getInstance().lookup(IWorkflowMachine.class.getName());</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hmPfExParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">WorkflownoteVO</span> <span class="variable">worknoteVO</span> <span class="operator">=</span> bsWorkflow.checkWorkFlow(</span><br><span class="line">IPFActionName.APPROVE</span><br><span class="line">+ WorkbenchEnvironment.getInstance().getLoginUser()</span><br><span class="line">.getCuserid(), djlxbm, jkbx, hmPfExParams);</span><br><span class="line"><span class="keyword">if</span> (worknoteVO == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">WFTask</span> <span class="variable">task</span> <span class="operator">=</span> worknoteVO.getTaskInfo().getTask();</span><br><span class="line"><span class="type">String</span> <span class="variable">activityID</span> <span class="operator">=</span> task.getActivityID();</span><br><span class="line"><span class="type">BasicWorkflowProcess</span> <span class="variable">wp</span> <span class="operator">=</span> PfDataCache.getWorkflowProcess(</span><br><span class="line">task.getWfProcessDefPK(), task.getWfProcessInstancePK());</span><br><span class="line">List&lt;Activity&gt; activities = wp.getActivities();</span><br><span class="line"><span class="keyword">for</span> (Activity activity : activities) &#123;</span><br><span class="line"><span class="keyword">if</span> (activity.getId().equals(activityID)) &#123;</span><br><span class="line"><span class="keyword">if</span> (activity.getName().equals(CWConstant.ACTIVIYNAME_ERM)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前审批人是不是最后一个人</span></span><br><span class="line"><span class="type">IPFWorkflowQry</span> <span class="variable">workflowQry</span> <span class="operator">=</span> NCLocator.getInstance()</span><br><span class="line">.lookup(IPFWorkflowQry.class);</span><br><span class="line">flow = workflowQry.isCheckman(aggvo.getParentVO()</span><br><span class="line">.getPk_bill(), <span class="string">&quot;JY18-Cxx-001&quot;</span>, AppContext</span><br><span class="line">.getInstance().getPkUser());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统标准查询物料税率方法</title>
      <link href="/2024/11/15/241109/%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86%E6%9F%A5%E8%AF%A2%E7%89%A9%E6%96%99%E7%A8%8E%E7%8E%87%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/15/241109/%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86%E6%9F%A5%E8%AF%A2%E7%89%A9%E6%96%99%E7%A8%8E%E7%8E%87%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="系统标准的查询物料税率的方法"><a href="#系统标准的查询物料税率的方法" class="headerlink" title="系统标准的查询物料税率的方法"></a>系统标准的查询物料税率的方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nc.vo.so.pub.keyvalue.VOKeyValue;</span><br><span class="line"><span class="keyword">import</span> nc.vo.so.pub.rule.BodyValueRowRule;</span><br><span class="line"><span class="keyword">import</span> nc.vo.so.pub.rule.SOTaxInfoRule;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算税率</span></span><br><span class="line"><span class="type">VOKeyValue</span> <span class="variable">vOKeyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VOKeyValue</span>(needProcessVo);  <span class="comment">//传入一个单据的Aggvo</span></span><br><span class="line"><span class="type">BodyValueRowRule</span> <span class="variable">countutil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BodyValueRowRule</span>(vOKeyValue);</span><br><span class="line"><span class="type">int</span>[] rows = countutil.getMarNotNullRows();</span><br><span class="line"><span class="type">SOTaxInfoRule</span> <span class="variable">taxInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SOTaxInfoRule</span>(vOKeyValue);</span><br><span class="line">taxInfo.setTaxInfoByBodyPos(rows); <span class="comment">//自动对每一行表体的物料查询出税率并赋值！</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导入导出_系统标准</title>
      <link href="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/"/>
      <url>/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="导出模板"><a href="#导出模板" class="headerlink" title="导出模板"></a>导出模板</h1><h2 id="第一步，引入-导入导出组件"><a href="#第一步，引入-导入导出组件" class="headerlink" title="第一步，引入 导入导出组件"></a>第一步，引入 导入导出组件</h2><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113153920912.png" alt="image-20241113153920912"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ExcelOutput</span> <span class="keyword">from</span> <span class="string">&#x27;src/uap/common/components/ExcelOutput&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写在 render --&gt; return()里面</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ExcelOutput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">moduleName</span>=<span class="string">&#x27;so&#x27;</span>//<span class="attr">模块名</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">billType</span>=<span class="string">&#x27;30R&#x27;</span>//<span class="attr">单据类型</span>  <span class="attr">命名自定义</span>，<span class="attr">但要与xml配置文件名一致</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">selectedPKS</span>=<span class="string">&#123;[]&#125;</span> //<span class="attr">若只做导入</span>，<span class="attr">此处为空数组即可</span>，<span class="attr">若是导出数据需放入主键数组</span> <span class="attr">this.state.pks</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">appcode</span>=<span class="string">&#x27;400600410&#x27;</span>  //<span class="attr">去应用注册里面找</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">pagecode</span>=<span class="string">&#x27;400600410_card&#x27;</span> //<span class="attr">去应用注册里面找</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113154243875.png" alt="image-20241113154243875"></p><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113154311786.png" alt="image-20241113154311786"></p><h2 id="第二步，添加按钮"><a href="#第二步，添加按钮" class="headerlink" title="第二步，添加按钮"></a>第二步，添加按钮</h2><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113154720943.png" alt="image-20241113154720943"></p><p><strong>前台效果:</strong></p><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113154742382.png" alt="image-20241113154742382"></p><h2 id="第三步，打开前端代码，新增按钮事件"><a href="#第三步，打开前端代码，新增按钮事件" class="headerlink" title="第三步，打开前端代码，新增按钮事件"></a>第三步，打开前端代码，新增按钮事件</h2><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113154859761.png" alt="image-20241113154859761"></p><p><strong>注意:这里需要添加导出的 事件就可以，导入的话，引入的组件能够实现完整功能。</strong></p><h2 id="第四步，修改xml配置文件"><a href="#第四步，修改xml配置文件" class="headerlink" title="第四步，修改xml配置文件"></a>第四步，修改xml配置文件</h2><ul><li><p><strong>找到你的单据类型的xml文件，没有就复制个别的，然后修改！</strong></p></li><li><p><strong>路径: home\resources\excel\billdefine\模块名\xxx.xml</strong></p></li></ul><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113160556490.png" alt="image-20241113160556490"></p><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113161329716.png" alt="image-20241113161329716"></p><ul><li><strong>注意：里面有个 areaname 属性的填法  找到页面模板，然后点一下页签，就会显示区域编码</strong></li><li><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113161519022.png" alt="image-20241113161519022"></li></ul><h2 id="导出模板功能到此完成"><a href="#导出模板功能到此完成" class="headerlink" title="导出模板功能到此完成"></a>导出模板功能到此完成</h2><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113164527190.png" alt="image-20241113164527190"></p><hr><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><h2 id="第一步-引入导入组件-和导出是重复的"><a href="#第一步-引入导入组件-和导出是重复的" class="headerlink" title="第一步 引入导入组件(和导出是重复的)"></a>第一步 引入导入组件(和导出是重复的)</h2><p>参考 导出模板   第一步</p><h2 id="第二步-添加按钮，参考导出模板"><a href="#第二步-添加按钮，参考导出模板" class="headerlink" title="第二步  添加按钮，参考导出模板"></a>第二步  添加按钮，参考导出模板</h2><h2 id="第三步修改-前端-initTemplate-js"><a href="#第三步修改-前端-initTemplate-js" class="headerlink" title="第三步修改 前端 initTemplate.js"></a>第三步修改 前端 initTemplate.js</h2><ul><li>找到初始化模板这里</li></ul><p><img src="/2024/11/13/241109/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA-%E7%B3%BB%E7%BB%9F%E6%A0%87%E5%87%86/image-20241113165511116.png" alt="image-20241113165511116"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*pmFWCFu5nhKkBzYmrkBakbSX2Qf6kzsUGzh12pSKVZMF83dmm5yL09Q7Cq11rz7U*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: wangceb </span></span><br><span class="line"><span class="comment"> * @PageInfo: 列表初始化模板</span></span><br><span class="line"><span class="comment"> * @Date: 2018-04-19 10:32:11 </span></span><br><span class="line"><span class="comment"> * @Last Modified by: wangpju</span></span><br><span class="line"><span class="comment"> * @Last Modified time: 2021-09-02 13:31:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; base, ajax &#125; <span class="keyword">from</span> <span class="string">&#x27;nc-lightapp-front&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SALEORDERREVISE_CONST</span>, <span class="title class_">SaleOrderReviseHeadItem</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../../const&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> initListRowButtons <span class="keyword">from</span> <span class="string">&#x27;./initListRowButtons&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; btn_Controller &#125; <span class="keyword">from</span> <span class="string">&#x27;../btnClicks&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; referEvent &#125; <span class="keyword">from</span> <span class="string">&#x27;../events&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> excelImportconfig <span class="keyword">from</span> <span class="string">&quot;src/uap/common/components/excelImportconfig&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; transtypeUtils &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../../../scmpub/scmpub/pub/tool&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initLang, getLangByResId &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../../../scmpub/scmpub/pub/tool/multiLangUtil&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> head = <span class="variable constant_">SALEORDERREVISE_CONST</span>.<span class="property">formId</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">props</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入功能新增部分  ----------------</span></span><br><span class="line"><span class="comment">// add by zht 单据类型命名自定义，但要与xml配置文件名一致    </span></span><br><span class="line">    <span class="comment">// 这里也是 前台向 后台传参数的地方，想要自定义参数，就在这里加就行！</span></span><br><span class="line">    <span class="keyword">let</span> excelimportconfig = <span class="title function_">excelImportconfig</span>(props,<span class="string">&#x27;so&#x27;</span>,<span class="string">&#x27;30R&#x27;</span>,<span class="literal">true</span>,<span class="string">&#x27;&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">// isbatch: &#x27;Y&#x27;,</span></span><br><span class="line">        <span class="attr">appcode</span>: <span class="string">&#x27;400600410&#x27;</span>,         <span class="comment">//应用注册去找这两个参数</span></span><br><span class="line">        <span class="attr">pagecode</span>: <span class="string">&#x27;400600410_card&#x27;</span>&#125;,</span><br><span class="line">        <span class="comment">// ()=&gt;&#123;</span></span><br><span class="line">        <span class="comment">// this.getData();//导入完成后回调列表查询方法</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    );</span><br><span class="line">   <span class="comment">//导入功能新增部分  ----------------</span></span><br><span class="line">props.<span class="title function_">createUIDom</span>(</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">pagecode</span>: <span class="variable constant_">SALEORDERREVISE_CONST</span>.<span class="property">listPageId</span> <span class="comment">//卡片页面编码</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data) &#123;</span><br><span class="line">transtypeUtils.<span class="property">init</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, data.<span class="property">context</span>);</span><br><span class="line"><span class="keyword">if</span> (data.<span class="property">button</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> button = data.<span class="property">button</span>;</span><br><span class="line">                     <span class="comment">//导入功能新增部分  ----------------</span></span><br><span class="line">                    <span class="comment">//  add by zht 导入功能</span></span><br><span class="line">props.<span class="property">button</span>.<span class="title function_">setUploadConfig</span>(<span class="string">&quot;Import&quot;</span>,excelimportconfig); <span class="comment">// &quot;Import&quot; 是按钮的名字</span></span><br><span class="line">props.<span class="property">button</span>.<span class="title function_">setButtons</span>(button);</span><br><span class="line">                     <span class="comment">//导入功能新增部分  ----------------</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data.<span class="property">template</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> meta = data.<span class="property">template</span>;</span><br><span class="line">modifierMeta.<span class="title function_">bind</span>(<span class="variable language_">this</span>)(props, meta);</span><br><span class="line">transtypeUtils.<span class="property">initQuery</span>.<span class="title function_">call</span>(</span><br><span class="line"><span class="variable language_">this</span>,</span><br><span class="line">props,</span><br><span class="line">meta,</span><br><span class="line"><span class="variable constant_">SALEORDERREVISE_CONST</span>.<span class="property">searchId</span>,</span><br><span class="line"><span class="title class_">SaleOrderReviseHeadItem</span>.<span class="property">CHISTRANTYPEID</span></span><br><span class="line">);</span><br><span class="line">props.<span class="property">meta</span>.<span class="title function_">setMeta</span>(meta, btn_Controller.<span class="title function_">bind</span>(<span class="variable language_">this</span>, <span class="variable language_">this</span>.<span class="property">props</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modifierMeta</span>(<span class="params">props, meta</span>) &#123;</span><br><span class="line">referEvent.<span class="title function_">call</span>(<span class="variable language_">this</span>, props, meta);</span><br><span class="line">meta[head].<span class="property">items</span> = meta[head].<span class="property">items</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item, key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.<span class="property">attrcode</span> == <span class="string">&#x27;vbillcode&#x27;</span>) &#123;</span><br><span class="line">item.<span class="property">render</span> = <span class="function">(<span class="params">text, record, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">cursor:</span> &#x27;<span class="attr">pointer</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">props.pushTo(SALEORDERREVISE_CONST.Card_URL, &#123;</span></span><br><span class="line"><span class="language-xml">pagecode: SALEORDERREVISE_CONST.cardPageId,</span></span><br><span class="line"><span class="language-xml">status: SALEORDERREVISE_CONST.browse,</span></span><br><span class="line"><span class="language-xml">id: ((record || &#123;&#125;).csaleorderid || &#123;&#125;).value</span></span><br><span class="line"><span class="language-xml">&#125;);</span></span><br><span class="line"><span class="language-xml">&#125;&#125;</span></span><br><span class="line"><span class="language-xml">&gt;</span></span><br><span class="line"><span class="language-xml">&#123;((record || &#123;&#125;).vbillcode || &#123;&#125;).value&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> porCol = &#123;</span><br><span class="line"><span class="attr">attrcode</span>: <span class="string">&#x27;opr&#x27;</span>,</span><br><span class="line"><span class="attr">label</span>: <span class="title function_">getLangByResId</span>(<span class="variable language_">this</span>, <span class="string">&#x27;4006SALEORDERREVISE-000020&#x27;</span>) <span class="comment">/* 国际化处理： 操作*/</span>,</span><br><span class="line"><span class="attr">visible</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">width</span>: <span class="number">150</span>,</span><br><span class="line"><span class="attr">fixed</span>: <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line"><span class="attr">itemtype</span>: <span class="string">&#x27;customer&#x27;</span>,</span><br><span class="line"></span><br><span class="line"><span class="attr">render</span>: <span class="function">(<span class="params">text, record, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> initListRowButtons.<span class="title function_">bind</span>(<span class="variable language_">this</span>, props, text, record, index)();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">meta[head].<span class="property">items</span>.<span class="title function_">push</span>(porCol);</span><br><span class="line"><span class="keyword">return</span> meta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*pmFWCFu5nhKkBzYmrkBakbSX2Qf6kzsUGzh12pSKVZMF83dmm5yL09Q7Cq11rz7U*/</span></span><br></pre></td></tr></table></figure><h2 id="第四步-编写后端代码"><a href="#第四步-编写后端代码" class="headerlink" title="第四步 编写后端代码"></a>第四步 编写后端代码</h2><h3 id="第一步-写一个处理类"><a href="#第一步-写一个处理类" class="headerlink" title="第一步 写一个处理类"></a>第一步 写一个处理类</h3><ul><li><p>写一个处理类  SaleOrderHistoryImportProcess  继承 AbstractImportProcess</p></li><li><pre><code class="java"> package nccloud.so.so.plugin;import nc.hk.bs.lmsaleorder.revisesave.SaleOrderSingleReviseSaveHandler;import nc.vo.pub.BusinessException;import nc.vo.so.m30.revise.entity.SaleOrderHistoryVO;import nccloud.bs.excel.plugin.AbstractImportProcess;public class SaleOrderHistoryImportProcess extends AbstractImportProcess &#123;    private SaleOrderSingleReviseSaveHandler handler;    @Override    protected void processBill(Object vo) throws BusinessException &#123;        try &#123;            SaleOrderHistoryVO myAggvo = (SaleOrderHistoryVO) vo;            getHandler().processBatchModify(myAggvo); //我们自己的业务逻辑  校验，保存        &#125; catch (Exception e) &#123;            throw new BusinessException(&amp;quot;生成销售订单出错，请检查数据:&amp;quot; + e.getMessage());        &#125;    &#125;    private SaleOrderSingleReviseSaveHandler getHandler() &#123;        if (handler == null) &#123;            handler = new SaleOrderSingleReviseSaveHandler();        &#125;        return handler;    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 第二步，去数据库注册为导入处理类</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">INSERT INTO EXCEL_BILLPROCESS (&quot;BASECLASSNAME&quot;, &quot;BILLTYPE&quot;, &quot;MODULE&quot;, &quot;PK_PROCESS&quot;, &quot;PRANAME&quot;, &quot;PROCLASSNAME&quot;, &quot;TS&quot;) VALUES (&#x27;nc.vo.so.m30.revise.entity.SaleOrderHistoryVO&#x27;, &#x27;30R&#x27;, &#x27;SO&#x27;, &#x27;000DR300000000SLOD31&#x27;, &#x27;销售订单修订导入&#x27;, &#x27;nccloud.so.so.plugin.SaleOrderHistoryImportProcess&#x27;, &#x27;2024-11-11 11:00:00&#x27;);</span><br></pre></td></tr></table></figure></code></pre></li><li><p>‘nc.vo.so.m30.revise.entity.SaleOrderHistoryVO’  Aggvo全类名 ，自己替换</p></li><li><p>‘30R’ 单据类型 ，不是交易类型</p></li><li><p>‘SO’ 模块名</p></li><li><p>‘000DR300000000SLOD31’ 主键，自己修改一下</p></li><li><p>‘销售订单修订导入’  名称 – 随意</p></li><li><p>‘nccloud.so.so.plugin.SaleOrderHistoryImportProcess’ ， 我们刚才自己新建的  处理类的 全类名 </p></li><li><p>‘2024-11-11 11:00:00’ TS 时间戳</p></li></ul><h3 id="结束-一般到这里-前台点击导入，选择一个模板，就能正常进入到我们的自己的处理类里面，如果不行，可能需要调整-对应的-XML配置文件"><a href="#结束-一般到这里-前台点击导入，选择一个模板，就能正常进入到我们的自己的处理类里面，如果不行，可能需要调整-对应的-XML配置文件" class="headerlink" title="结束  一般到这里 前台点击导入，选择一个模板，就能正常进入到我们的自己的处理类里面，如果不行，可能需要调整   对应的 XML配置文件"></a>结束  一般到这里 前台点击导入，选择一个模板，就能正常进入到我们的自己的处理类里面，如果不行，可能需要调整   对应的 XML配置文件</h3><h3 id="配置文件修改，无需重启服务，刷新页面即可。"><a href="#配置文件修改，无需重启服务，刷新页面即可。" class="headerlink" title="配置文件修改，无需重启服务，刷新页面即可。"></a>配置文件修改，无需重启服务，刷新页面即可。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统解压tar.gz压缩包命令</title>
      <link href="/2024/11/13/241109/tar-gz%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/11/13/241109/tar-gz%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="windows系统解压tar-gz压缩包命令"><a href="#windows系统解压tar-gz压缩包命令" class="headerlink" title="windows系统解压tar.gz压缩包命令"></a>windows系统解压tar.gz压缩包命令</h1><p>1.进入到 压缩包所在目录  </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf xxx.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存查询方法</title>
      <link href="/2024/11/09/241109/%E7%BC%93%E5%AD%98%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/09/241109/%E7%BC%93%E5%AD%98%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存查询方法"><a href="#缓存查询方法" class="headerlink" title="缓存查询方法"></a>缓存查询方法</h1><h2 id="第一个"><a href="#第一个" class="headerlink" title="第一个"></a>第一个</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IBDData</span> <span class="variable">resdata</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.CASHFLOW)  <span class="comment">//元数据id</span></span><br><span class="line">.getDocByCode(<span class="string">&quot;GLOBLE00000000000000&quot;</span>, code); <span class="comment">// 全局，集团，或组织   ，   编码</span></span><br></pre></td></tr></table></figure><h2 id="第二个"><a href="#第二个" class="headerlink" title="第二个"></a>第二个</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据人员编码 和 组织主键翻译 人员主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_dept</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getPsndocPkByCodeAndOrg</span><span class="params">(String code, String pk_org)</span> &#123;</span><br><span class="line"><span class="type">PsndocVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(PsndocVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_org&quot;</span>, <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;pk_psndoc&quot;</span> &#125;);  <span class="comment">//后面多一个 true 参数，代表强制查询，不走缓存</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String[]&gt;();</span><br><span class="line">List&lt;String&gt; paramsValue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(code)) &#123;</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;pk_org&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;dr&quot;</span>);</span><br><span class="line">paramsValue.add(code);</span><br><span class="line">paramsValue.add(pk_org);</span><br><span class="line">paramsValue.add(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">valueList.add(paramsValue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">PsndocVO[] qryVos = (PsndocVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> qryVos[<span class="number">0</span>].getPk_psndoc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三个"><a href="#第三个" class="headerlink" title="第三个"></a>第三个</h2><ul><li>利用 caffeine 缓存</li><li>批量查询 返回Map</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Cache&lt;String, Object&gt; orgCache; <span class="comment">// 查询 OrgVO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据 主键，名称 ，编码查询 OrgVO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filedName 字段名 根据哪个字段去查询？ pk_org , code, name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params    可以传单个参数，也可以传数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> DAOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, OrgVO&gt; <span class="title function_">queryOrgVOByParams</span><span class="params">(String filedName, String... params)</span> &#123;</span><br><span class="line">Map&lt;String, Object&gt; ret = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">Map&lt;String, OrgVO&gt; resMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, OrgVO&gt;();</span><br><span class="line"><span class="keyword">if</span> (orgCache == <span class="literal">null</span>) &#123;</span><br><span class="line">initOrgCache();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (params.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resMap;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ret = orgCache.getAll(Arrays.asList(params), p -&gt; &#123;</span><br><span class="line">List&lt;OrgVO&gt; resList = wf.getOrg(filedName, IteratorUtils.toList(p.iterator()).toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">return</span> resList.stream().collect(Collectors.toMap(m -&gt; (String) m.getAttributeValue(filedName), m -&gt; m));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; obj : ret.entrySet()) &#123;</span><br><span class="line"><span class="type">OrgVO</span> <span class="variable">mv</span> <span class="operator">=</span> (OrgVO) obj.getValue();</span><br><span class="line">resMap.put(obj.getKey(), mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据 名称 编码 主键 查询 OrgVO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filedName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;OrgVO&gt; <span class="title function_">getOrg</span><span class="params">(String filedName, String... params)</span> &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select code,name,pk_org,pk_vid,isbusinessunit,islastversion,dr,enablestate from org_orgs &quot;</span>);</span><br><span class="line">buf.append(<span class="string">&quot; where dr = 0 and isbusinessunit = &#x27;Y&#x27; and islastversion = &#x27;Y&#x27; and &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sqlwhere</span> <span class="operator">=</span> SQLUtil.buildSqlForIn(filedName, params);</span><br><span class="line">buf.append(sqlwhere);</span><br><span class="line">List&lt;OrgVO&gt; query = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">query = (List&lt;OrgVO&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">BeanListProcessor</span>(OrgVO.class));</span><br><span class="line">&#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line">ExceptionUtils.wrappBusinessException(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>单个查询 返回VO</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Cache&lt;String, Object&gt; billtypeCache; <span class="comment">// 单据类型 BilltpeVO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据某一字段查询单据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filedName pk_billtypeid pk_billtypecode billtypename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BilltypeVO <span class="title function_">queryBilltypeVOByParam</span><span class="params">(String filedName, String param)</span> &#123;</span><br><span class="line"><span class="type">BilltypeVO</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (param == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (billtypeCache == <span class="literal">null</span>) &#123;</span><br><span class="line">initBilltypeCache();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = (BilltypeVO) billtypeCache.get(param, p -&gt; &#123;</span><br><span class="line"><span class="type">BilltypeVO</span> <span class="variable">res</span> <span class="operator">=</span> wf.getBillType(filedName, param);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据某一字段查询 单据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filedName pk_billtypeid  pk_billtypecode  billtypename</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> BilltypeVO <span class="title function_">getBillType</span><span class="params">(String filedName, String param)</span> &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_billtypeid ,pk_billtypecode, billtypename, billstyle,dr &quot;</span>);</span><br><span class="line">buf.append(<span class="string">&quot; from bd_billtype where dr = 0 and &quot;</span>);</span><br><span class="line">buf.append(filedName);</span><br><span class="line">buf.append(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">buf.append(param);</span><br><span class="line">List&lt;BilltypeVO&gt; query = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">query = (List&lt;BilltypeVO&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">BeanListProcessor</span>(BilltypeVO.class));</span><br><span class="line">&#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line">ExceptionUtils.wrappBusinessException(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (query != <span class="literal">null</span> &amp;&amp; query.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> query.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="初始化-caffine-缓存的方法"><a href="#初始化-caffine-缓存的方法" class="headerlink" title="初始化 caffine 缓存的方法"></a>初始化 caffine 缓存的方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonCacheInitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始缓存容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INITIALCAPACITY</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 最大缓存容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAXIMUMSIZE</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 超时时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">EXPIRETIME</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Cache&lt;String, Object&gt; <span class="title function_">initCache</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Caffeine.newBuilder()</span><br><span class="line"><span class="comment">// 初始数量</span></span><br><span class="line">.initialCapacity(INITIALCAPACITY)</span><br><span class="line"><span class="comment">// 最大条数</span></span><br><span class="line">.maximumSize(MAXIMUMSIZE)</span><br><span class="line"><span class="comment">// expireAfterWrite和expireAfterAccess同时存在时，以expireAfterWrite为准</span></span><br><span class="line"><span class="comment">// 最后一次写操作后经过指定时间过期</span></span><br><span class="line">.expireAfterWrite(EXPIRETIME, TimeUnit.MINUTES)</span><br><span class="line"><span class="comment">// 最后一次读或写操作后经过指定时间过期</span></span><br><span class="line">.expireAfterAccess(EXPIRETIME, TimeUnit.MINUTES)</span><br><span class="line"><span class="comment">// 监听缓存被移除</span></span><br><span class="line">.removalListener((key, val, removalCause) -&gt; &#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 记录命中</span></span><br><span class="line">.recordStats().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IBDMetaDataIDConst-元数据id收集"><a href="#IBDMetaDataIDConst-元数据id收集" class="headerlink" title="IBDMetaDataIDConst 元数据id收集"></a>IBDMetaDataIDConst 元数据id收集</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 会计科目 bd_accasoa</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCASOA</span> <span class="operator">=</span> <span class="string">&quot;407748f1-1fe8-4f0d-880e-ae8b0960308f&quot;</span>;</span><br><span class="line"><span class="comment">// 科目关联信息历史 bd_accasoahistory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCASOAHISTORY</span> <span class="operator">=</span> <span class="string">&quot;b5bbaee0-42f9-48dd-abae-c710ab56974b&quot;</span>;</span><br><span class="line"><span class="comment">// 会计辅助核算项目 bd_accassitem</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCASSITEM</span> <span class="operator">=</span> <span class="string">&quot;d3f0e93b-9234-44b9-83c1-6e05bf1e9a28&quot;</span>;</span><br><span class="line"><span class="comment">// 科目表 bd_accchart</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCCHART</span> <span class="operator">=</span> <span class="string">&quot;31d9cc1a-c93a-4b7e-9753-99f238c23d88&quot;</span>;</span><br><span class="line"><span class="comment">// 政策性科目表集团关联 bd_accplychart</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCPLYCHART</span> <span class="operator">=</span> <span class="string">&quot;29aa1053-cf69-4924-8e88-2e89f3ea2177&quot;</span>;</span><br><span class="line"><span class="comment">// 科目控制规则 bd_accctrlrule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCCTRLRULE</span> <span class="operator">=</span> <span class="string">&quot;bd361f28-8280-4dcc-b309-2261d61fb212&quot;</span>;</span><br><span class="line"><span class="comment">// 会计科目基本信息 bd_account</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;23a89307-5992-460e-95dd-c628c85f7f95&quot;</span>;</span><br><span class="line"><span class="comment">// 科目对照 bd_accountmap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCOUNTMAP</span> <span class="operator">=</span> <span class="string">&quot;fa3d8035-7337-4222-ad58-241b85b55c4f&quot;</span>;</span><br><span class="line"><span class="comment">// 会计期间档案 bd_accperiod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCPERIOD</span> <span class="operator">=</span> <span class="string">&quot;c590fbe3-e739-4aed-89cd-f8214b69eb37&quot;</span>;</span><br><span class="line"><span class="comment">// 会计月份 bd_accperiodmonth</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCPERIODMONTH</span> <span class="operator">=</span> <span class="string">&quot;7b07b508-6f3b-4314-a1dc-cdbcf39afded&quot;</span>;</span><br><span class="line"><span class="comment">// 会计月份 bd_accperiodmonth 和上面一样的！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCPERIODADJMTH</span> <span class="operator">=</span> <span class="string">&quot;7b07b508-6f3b-4314-a1dc-cdbcf39afded&quot;</span>;</span><br><span class="line"><span class="comment">// 会计期间方案 bd_accperiodscheme</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCPERIODSCHEME</span> <span class="operator">=</span> <span class="string">&quot;44187a94-e78b-4770-8b2a-9fe8db022b12&quot;</span>;</span><br><span class="line"><span class="comment">// 科目体系 bd_accsystem</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCSYSTEM</span> <span class="operator">=</span> <span class="string">&quot;8eae17fe-5271-4a82-8443-602169b2a6a0&quot;</span>;</span><br><span class="line"><span class="comment">// 科目类型 bd_acctype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCTYPE</span> <span class="operator">=</span> <span class="string">&quot;8f9da686-3584-4dc5-ae17-643432a480c3&quot;</span>;</span><br><span class="line"><span class="comment">// 联系人 bd_linkman</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LINKMAN</span> <span class="operator">=</span> <span class="string">&quot;e3106871-3721-4f61-819b-10d2d69a051f&quot;</span>;</span><br><span class="line"><span class="comment">// 地点档案 bd_addressdoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADDRESSDOC</span> <span class="operator">=</span> <span class="string">&quot;8eeaabfe-7644-4bd0-a954-f8971a14f079&quot;</span>;</span><br><span class="line"><span class="comment">// 地区分类 bd_areacl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AREACLASS</span> <span class="operator">=</span> <span class="string">&quot;7f91af95-154e-43f9-995e-da76a192be15&quot;</span>;</span><br><span class="line"><span class="comment">// 分配规则 bd_assign_rule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSIGNRULE</span> <span class="operator">=</span> <span class="string">&quot;b89a2e58-41df-476d-b600-abb2d7006455&quot;</span>;</span><br><span class="line"><span class="comment">// 档案分配页签 bd_assign_tab</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSIGNTAB</span> <span class="operator">=</span> <span class="string">&quot;294d6c97-7a69-490e-a30a-c4a2fe87a4e0&quot;</span>;</span><br><span class="line"><span class="comment">// 分配默认值模板 bd_assign_temp</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSIGNTTEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;6d31b286-aa93-487d-b408-90f81ce5e1fe&quot;</span>;</span><br><span class="line"><span class="comment">// 平均汇率 bd_avgrate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AVGRATE</span> <span class="operator">=</span> <span class="string">&quot;37bc1474-d113-4234-ad09-df331437cb5d&quot;</span>;</span><br><span class="line"><span class="comment">// 结算方式 bd_balatype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BALATYPE</span> <span class="operator">=</span> <span class="string">&quot;7016ec17-4116-4b3c-abf1-37e3b5d815ef&quot;</span>;</span><br><span class="line"><span class="comment">// 银行账户 bd_bankaccbas</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKACCCTRL</span> <span class="operator">=</span> <span class="string">&quot;611652ad-177f-4d3e-9ae7-ef8f96930b78&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKACCFINANCE</span> <span class="operator">=</span> <span class="string">&quot;20c35f2f-3a74-40ee-9a4a-4320a7837526&quot;</span>;</span><br><span class="line"><span class="comment">// 银行账户 bd_bankaccbas</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;611652ad-177f-4d3e-9ae7-ef8f96930b78&quot;</span>;</span><br><span class="line"><span class="comment">// 人行联行信息 bd_asslinenum</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSLINENUM</span> <span class="operator">=</span> <span class="string">&quot;7b6c7dc0-db78-4bef-9cca-f5af4008f893&quot;</span>;</span><br><span class="line"><span class="comment">// 现金账户 bd_cashaccount</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CASHACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;d5d5b39d-2c93-4686-be49-e08a0a5f5afd&quot;</span>;</span><br><span class="line"><span class="comment">// 散户 bd_freecustom</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FREECUST</span> <span class="operator">=</span> <span class="string">&quot;20d2ca8b-c9da-4def-a9a1-4b11b85bba54&quot;</span>;</span><br><span class="line"><span class="comment">// 物料计价方式初始设置 bd_costmode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALCOSTMODE</span> <span class="operator">=</span> <span class="string">&quot;bc230e0a-68c1-4cf9-bd78-58e55953596b&quot;</span>;</span><br><span class="line"><span class="comment">// 物料核算要素初始设置 bd_accelement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALACCELEMENT</span> <span class="operator">=</span> <span class="string">&quot;fff08f63-44f2-40e1-8b7c-1195221396ab&quot;</span>;</span><br><span class="line"><span class="comment">// 银行账户子户 bd_bankaccsub</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKACCSUB</span> <span class="operator">=</span> <span class="string">&quot;cd1f9a1c-eb08-493f-88ff-bcd1c134dee1&quot;</span>;</span><br><span class="line"><span class="comment">// 子户使用权 bd_bankaccuse</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKACCUSE</span> <span class="operator">=</span> <span class="string">&quot;61bb0a19-56ae-4420-b763-83d9a91de85c&quot;</span>;</span><br><span class="line"><span class="comment">// 银行档案 bd_bankdoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKDOC</span> <span class="operator">=</span> <span class="string">&quot;bf5aeed4-6b35-4a2e-b750-b9aabce59e21&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKSUBACCFI</span> <span class="operator">=</span> <span class="string">&quot;78fcc5b9-f141-4f20-b552-cf855578c762&quot;</span>;</span><br><span class="line"><span class="comment">// 银行类别 bd_banktype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKTYPE</span> <span class="operator">=</span> <span class="string">&quot;1d3d003d-0e8c-4283-9580-0ef81c93ba58&quot;</span>;</span><br><span class="line"><span class="comment">// 品牌档案 bd_branddoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BRANDDOC</span> <span class="operator">=</span> <span class="string">&quot;3ee53558-6398-4096-a91f-c7aa00e93701&quot;</span>;</span><br><span class="line"><span class="comment">// 现金流量项目 bd_cashflow</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CASHFLOW</span> <span class="operator">=</span> <span class="string">&quot;08d4138b-a7b5-42fd-94bc-bb6eb7ac0fdc&quot;</span>;</span><br><span class="line"><span class="comment">// 现金流量项目调整项设置 bd_cfadjitemset</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CFADJITEMSET</span> <span class="operator">=</span> <span class="string">&quot;480be4fb-3345-44db-835d-ece41c40d70d&quot;</span>;</span><br><span class="line"><span class="comment">// 渠道类型 bd_channeltype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHANNELTYPE</span> <span class="operator">=</span> <span class="string">&quot;6d90c539-bdcd-4eb1-a4f0-855f328fecb1&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CORPTYPE</span> <span class="operator">=</span> <span class="string">&quot;0001ORGCORP000000001&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COUNTRYAREA</span> <span class="operator">=</span> <span class="string">&quot;HI000000000000000002&quot;</span>;</span><br><span class="line"><span class="comment">// 国家地区 bd_countryzone</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COUNTRYZONE</span> <span class="operator">=</span> <span class="string">&quot;e0f51d3e-b8c4-4abb-bd3b-cd6e6d09d0f8&quot;</span>;</span><br><span class="line"><span class="comment">// 外币汇率 bd_currinfo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CURRINFO</span> <span class="operator">=</span> <span class="string">&quot;82e62fb2-204c-4497-994e-b6b3daf55748&quot;</span>;</span><br><span class="line"><span class="comment">// 币种 bd_currtype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CURRTYPE</span> <span class="operator">=</span> <span class="string">&quot;b498bc9a-e5fd-4613-8da8-bdae2a05704a&quot;</span>;</span><br><span class="line"><span class="comment">// 客商银行帐号 bd_custbank</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTBANKACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;916e1bc9-8f73-4c22-a096-6550c9ba7a70&quot;</span>;</span><br><span class="line"><span class="comment">// 客户基本分类 bd_custclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTCLASS</span> <span class="operator">=</span> <span class="string">&quot;b941438d-ce1f-4fd7-b972-f4f342fbd04f&quot;</span>;</span><br><span class="line"><span class="comment">// 客户信用控制 bd_custcreditctl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTCREDITCTRL</span> <span class="operator">=</span> <span class="string">&quot;93669a0d-9abf-4510-bb35-385b24527664&quot;</span>;</span><br><span class="line"><span class="comment">// 客户财务信息 bd_custfinance</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTFINANCE</span> <span class="operator">=</span> <span class="string">&quot;111985be-242b-4d59-b316-f71bb0f5df3c&quot;</span>;</span><br><span class="line"><span class="comment">// 客户税务信息 bd_custtax</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTTAX</span> <span class="operator">=</span> <span class="string">&quot;ee2b1e56-fe83-4921-ac56-fa939c970ca4&quot;</span>;</span><br><span class="line"><span class="comment">// 客户基本信息 bd_customer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTOMER</span> <span class="operator">=</span> <span class="string">&quot;e4f48eaf-5567-4383-a370-a59cb3e8a451&quot;</span>;</span><br><span class="line"><span class="comment">// 客户基本信息(多版本) bd_customer_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTOMER_V</span> <span class="operator">=</span> <span class="string">&quot;554e2d13-671f-4a14-8d7f-d55450c84b5a&quot;</span>;</span><br><span class="line"><span class="comment">// 客户联系人 bd_custlinkman</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTLINKMAN</span> <span class="operator">=</span> <span class="string">&quot;0296226e-3fe6-4c85-872a-51198e1f0352&quot;</span>;</span><br><span class="line"><span class="comment">// 客户申请单 bd_customer_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTOMERPF</span> <span class="operator">=</span> <span class="string">&quot;6d6d4a15-d9bb-4b0c-9da3-80760872bf87&quot;</span>;</span><br><span class="line"><span class="comment">// 客户销售信息 bd_custsale</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTSALE</span> <span class="operator">=</span> <span class="string">&quot;2f6e0d52-ada9-43d1-b729-ef640b524625&quot;</span>;</span><br><span class="line"><span class="comment">// 客户销售分类 bd_custsaleclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTSALECLASS</span> <span class="operator">=</span> <span class="string">&quot;540a5bff-7232-4aa8-96c8-ae5b53e4ce59&quot;</span>;</span><br><span class="line"><span class="comment">// 客户合并信息 bd_custmerge</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTMERGE</span> <span class="operator">=</span> <span class="string">&quot;324a8385-502f-4af5-beca-e298fb75531b&quot;</span>;</span><br><span class="line"><span class="comment">// 客户升级 bd_custupgrade</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTUPGRADE</span> <span class="operator">=</span> <span class="string">&quot;0e772066-5166-415a-9660-aa1a86099fb8&quot;</span>;</span><br><span class="line"><span class="comment">// 客商 bd_cust_supplier</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTSUPPLIER</span> <span class="operator">=</span> <span class="string">&quot;8c6510dd-3b8a-4cfc-a5c5-323d53c6006f&quot;</span>;</span><br><span class="line"><span class="comment">// 客商(多版本) bd_cust_supplier_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTSUPPLIER_V</span> <span class="operator">=</span> <span class="string">&quot;1ddbbf20-c589-4362-9365-be7bc629e6bf&quot;</span>;</span><br><span class="line"><span class="comment">// 自定义档案 bd_defdoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFDOC</span> <span class="operator">=</span> <span class="string">&quot;85efe9e1-3bc2-492e-a92a-f52d3acff25d&quot;</span>;</span><br><span class="line"><span class="comment">// 自定义档案列表 bd_defdoclist</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFDOCLIST</span> <span class="operator">=</span> <span class="string">&quot;16c1dca0-e3ed-4dcc-8ed7-75fd59e2bef1&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_部门 org_dept</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPT</span> <span class="operator">=</span> <span class="string">&quot;b26fa3cb-4087-4027-a3b6-c83ab2a086a9&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPTLEVEL</span> <span class="operator">=</span> <span class="string">&quot;0001ORGDEPT000000001&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ECOTYPE</span> <span class="operator">=</span> <span class="string">&quot;0001ORGCORP000000004&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AREACODE</span> <span class="operator">=</span> <span class="string">&quot;1001ZZ10000000009031&quot;</span>;</span><br><span class="line"><span class="comment">// 异常日志 bd_errorlog</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ERRORLOG</span> <span class="operator">=</span> <span class="string">&quot;c04f0d5a-5bf8-4ce1-bece-f3e12e6b300f&quot;</span>;</span><br><span class="line"><span class="comment">// 异常信息 bd_errormsg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ERRORMSG</span> <span class="operator">=</span> <span class="string">&quot;04f10ae7-5010-4fce-bfbc-2dba8e11fbc7&quot;</span>;</span><br><span class="line"><span class="comment">// 外币汇率方案 bd_exratescheme</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXRATESCHEME</span> <span class="operator">=</span> <span class="string">&quot;3fbd6e6a-b879-4598-a234-f06f4d57271c&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FORERATE</span> <span class="operator">=</span> <span class="string">&quot;ec5a6a3d-ebc7-439d-adb4-854793dce16b&quot;</span>;</span><br><span class="line"><span class="comment">// 资金计划项目 bd_fundplan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDPLAN</span> <span class="operator">=</span> <span class="string">&quot;edc7fbfe-4111-440e-93e0-a88664969dd4&quot;</span>;</span><br><span class="line"><span class="comment">// IBDOBJECT</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IBDOBJECT</span> <span class="operator">=</span> <span class="string">&quot;6c8722b9-911a-489b-8d0d-18bd3734fcf6&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INDUSTRY</span> <span class="operator">=</span> <span class="string">&quot;0001ORGCORP000000002&quot;</span>;</span><br><span class="line"><span class="comment">// 收支项目 bd_inoutbusiclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INOUTBUSICLASS</span> <span class="operator">=</span> <span class="string">&quot;283d91a4-a8f4-4763-ac44-aae7401fa09a&quot;</span>;</span><br><span class="line"><span class="comment">// 物料基本分类 bd_marbasclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARBASCLASS</span> <span class="operator">=</span> <span class="string">&quot;c099f7d7-52a9-4b98-bee7-2e3a6c3ea263&quot;</span>;</span><br><span class="line"><span class="comment">// 物料成本分类 bd_marcostclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARCOSTCLASS</span> <span class="operator">=</span> <span class="string">&quot;fbb3c484-63bc-4624-9f2e-3627221f0036&quot;</span>;</span><br><span class="line"><span class="comment">// 物料采购分类 bd_marpuclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARPUCLASS</span> <span class="operator">=</span> <span class="string">&quot;2d7ce299-e28f-4e06-869e-4e6a0318ff76&quot;</span>;</span><br><span class="line"><span class="comment">// 物料销售分类 bd_marsaleclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARSALECLASS</span> <span class="operator">=</span> <span class="string">&quot;123ed90f-8907-4604-a978-0a0b6c80a030&quot;</span>;</span><br><span class="line"><span class="comment">// 物料基本信息（多版本） bd_material</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIAL</span> <span class="operator">=</span> <span class="string">&quot;c7dc0ccd-8872-4eee-8882-160e8f49dfad&quot;</span>;</span><br><span class="line"><span class="comment">// 物料基本信息 bd_material_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIAL_V</span> <span class="operator">=</span> <span class="string">&quot;eae040f4-3c88-413d-abc9-b15774463d46&quot;</span>;</span><br><span class="line"><span class="comment">// 辅计量管理 bd_materialconvert</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALCONVERT</span> <span class="operator">=</span> <span class="string">&quot;07adba95-d16a-45ae-8487-26d5a56f14bd&quot;</span>;</span><br><span class="line"><span class="comment">// 物料成本信息 bd_materialcost</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALCOST</span> <span class="operator">=</span> <span class="string">&quot;d0ff92c6-1059-46b4-97fd-ed8b3d0a85d9&quot;</span>;</span><br><span class="line"><span class="comment">// 物料财务信息 bd_materialfi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALFI</span> <span class="operator">=</span> <span class="string">&quot;59dc3ecc-6a55-4661-967c-0da637b3d440&quot;</span>;</span><br><span class="line"><span class="comment">// 物料申请单 bd_material_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPF</span> <span class="operator">=</span> <span class="string">&quot;6b2c8309-930b-4989-8b0e-f2a80f35c62c&quot;</span>;</span><br><span class="line"><span class="comment">// 物料计划信息 bd_materialplan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPLAN</span> <span class="operator">=</span> <span class="string">&quot;8b7d49ab-7a65-4885-bcf1-7df89b84df4b&quot;</span>;</span><br><span class="line"><span class="comment">// 物料生产信息 bd_materialprod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPROD</span> <span class="operator">=</span> <span class="string">&quot;a3133495-8c94-47b4-83d4-0d32bd08ac82&quot;</span>;</span><br><span class="line"><span class="comment">// 物料采购信息 bd_materialpu</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPU</span> <span class="operator">=</span> <span class="string">&quot;6ad42446-6188-48ba-8271-effe4c2ccb51&quot;</span>;</span><br><span class="line"><span class="comment">// 物料销售信息 bd_materialsale</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALSALE</span> <span class="operator">=</span> <span class="string">&quot;9a3fa854-5770-466b-bddb-37dbcb38fb84&quot;</span>;</span><br><span class="line"><span class="comment">// 物料库存信息 bd_materialstock</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALSTOCK</span> <span class="operator">=</span> <span class="string">&quot;13636fc1-0215-4102-a11e-af4be73a05ab&quot;</span>;</span><br><span class="line"><span class="comment">// 辅助属性结构 bd_marasstframe</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARASSTFRAME</span> <span class="operator">=</span> <span class="string">&quot;3e36a540-324c-4048-9df6-5feeb3fa3d88&quot;</span>;</span><br><span class="line"><span class="comment">// 辅助属性 bd_marassistant</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARASSISTANT</span> <span class="operator">=</span> <span class="string">&quot;4324091f-83de-4860-8c19-83fdd661f098&quot;</span>;</span><br><span class="line"><span class="comment">// 约束关系 bd_marasstrst</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARASSTRST</span> <span class="operator">=</span> <span class="string">&quot;3f45b681-81f2-4f1d-8561-01ea11de74db&quot;</span>;</span><br><span class="line"><span class="comment">// 计量单位 bd_measdoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MEASDOC</span> <span class="operator">=</span> <span class="string">&quot;8e668e99-3c0e-401a-8f55-3d192e055c3c&quot;</span>;</span><br><span class="line"><span class="comment">// 物料组织分配关系 bd_marorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MARORG</span> <span class="operator">=</span> <span class="string">&quot;7ed9b452-92c4-43a2-87d5-6603d1223c27&quot;</span>;</span><br><span class="line"><span class="comment">// 网银信息模板 bd_netbankinftp</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NETBANKINFTP</span> <span class="operator">=</span> <span class="string">&quot;257e617a-a1a1-420c-a74a-f0be414a7cd7&quot;</span>;</span><br><span class="line"><span class="comment">// 票据类型 bd_notetype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOTETYPE</span> <span class="operator">=</span> <span class="string">&quot;74c98540-4879-4584-a4c9-0f8b6e20b96a&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYTERM</span> <span class="operator">=</span> <span class="string">&quot;45113700-ebdf-4634-ad8e-3d543bc81672&quot;</span>;</span><br><span class="line"><span class="comment">// 权限资源 sm_permission_res</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PERMISSIONRESOURCE</span> <span class="operator">=</span> <span class="string">&quot;feda340d-2cf5-4aa1-b6b5-353c87ba6d51&quot;</span>;</span><br><span class="line"><span class="comment">// 功能实体 sm_funcregister</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NCFUNCNODEENTITY</span> <span class="operator">=</span> <span class="string">&quot;84a5a58d-f9b6-4ef9-a884-b45ee7ff26a6&quot;</span>;</span><br><span class="line"><span class="comment">// 产品线 bd_prodline</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRODLINE</span> <span class="operator">=</span> <span class="string">&quot;029c4c8f-39bb-4208-acc0-c3f66632f328&quot;</span>;</span><br><span class="line"><span class="comment">// 人员类别 bd_psncl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNCL</span> <span class="operator">=</span> <span class="string">&quot;400f55be-f4cc-4b38-b1e2-aabdc75e2aad&quot;</span>;</span><br><span class="line"><span class="comment">// 证件类别 bd_psnidtype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNID</span> <span class="operator">=</span> <span class="string">&quot;2b0d723e-7e62-4f50-942e-dda755587013&quot;</span>;</span><br><span class="line"><span class="comment">// 人员基本信息 bd_psndoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNDOC</span> <span class="operator">=</span> <span class="string">&quot;40d39c26-a2b6-4f16-a018-45664cac1a1f&quot;</span>;</span><br><span class="line"><span class="comment">// 人员工作信息 bd_psnjob</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNJOB</span> <span class="operator">=</span> <span class="string">&quot;a9f9c3af-1379-42a4-bd20-e4d45e364ae2&quot;</span>;</span><br><span class="line"><span class="comment">// 个人银行账户 bd_psnbankacc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNBANKACC</span> <span class="operator">=</span> <span class="string">&quot;fdf508bc-e741-415a-aa72-594028ca1a9a&quot;</span>;</span><br><span class="line"><span class="comment">// 个人银行账户信息 bd_bankaccbas</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNBANKACCBAS</span> <span class="operator">=</span> <span class="string">&quot;f6b6065c-8543-4983-aa20-51499ddd9c2c&quot;</span>;</span><br><span class="line"><span class="comment">// 个人银行账户子户 bd_bankaccsub</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PSNBANKACCSUB</span> <span class="operator">=</span> <span class="string">&quot;ada13c7f-b854-46cf-95a3-9f59d121c0e7&quot;</span>;</span><br><span class="line"><span class="comment">// 货位 bd_rack</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RACK</span> <span class="operator">=</span> <span class="string">&quot;9158fa3b-f765-4132-b14d-1851a18ffddc&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RECEIVEANDSENDTYPE</span> <span class="operator">=</span> <span class="string">&quot;c95722d8-3c7a-4fe6-82a1-4ca152427c1b&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGION</span> <span class="operator">=</span> <span class="string">&quot;0001PLY0000000000007&quot;</span>;</span><br><span class="line"><span class="comment">// 行政区划 bd_region</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGION_NEW</span> <span class="operator">=</span> <span class="string">&quot;988d7c0e-d94e-4c45-ac8e-1bce109a343a&quot;</span>;</span><br><span class="line"><span class="comment">// 海关商品编码 bd_goodscode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GOODSCODE</span> <span class="operator">=</span> <span class="string">&quot;b5939eb9-2ff6-4d95-b4b7-2102ff115a92&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_库存统计体系 org_stockstatstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STOCKSTATSTRU</span> <span class="operator">=</span> <span class="string">&quot;052ea773-2092-4d9f-b9a4-f3b4076f0aab&quot;</span>;</span><br><span class="line"><span class="comment">// 仓库 bd_stordoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STORDOC</span> <span class="operator">=</span> <span class="string">&quot;5489bda0-d876-4db2-9568-02954f240cc8&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商财务信息 bd_supfinance</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPFINANCE</span> <span class="operator">=</span> <span class="string">&quot;3b6d7504-95e9-4557-94c5-f6b562509420&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商基本信息 bd_supplier</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPPLIER</span> <span class="operator">=</span> <span class="string">&quot;720dcc7c-ff19-48f4-b9c5-b90906682f45&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商基本信息(多版本) bd_supplier_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPPLIER_V</span> <span class="operator">=</span> <span class="string">&quot;db564f82-5ab2-44c4-96bc-c9ae385b75db&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商银行账号 bd_custbank</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPPLIERBANKACCOUNT</span> <span class="operator">=</span> <span class="string">&quot;e839198a-f12b-461c-b165-1639b6e2e3ce&quot;</span>;</span><br><span class="line"><span class="comment">// 客商银行账户信息 bd_bankaccbas</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTBANKACC</span> <span class="operator">=</span> <span class="string">&quot;fe912f54-898c-4b0a-a8d5-8d7c4932c42a&quot;</span>;</span><br><span class="line"><span class="comment">// 客商银行账户子户 bd_bankaccsub</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTBANKACCSUB</span> <span class="operator">=</span> <span class="string">&quot;9e10ef4a-0be9-482b-880f-871e5b0504b7&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商基本分类 bd_supplierclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPPLIERCLASS</span> <span class="operator">=</span> <span class="string">&quot;dbacb77c-8a6c-4e50-aab2-d4500383b7b7&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商申请单 bd_supplier_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPPLIERPF</span> <span class="operator">=</span> <span class="string">&quot;d6be4596-55a6-4476-9b1d-cb770c03bfdd&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商合并信息 bd_supmerge</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPPLIERMERGE</span> <span class="operator">=</span> <span class="string">&quot;039db4c6-d049-453c-a158-fc43ccb8b1a0&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商采购信息 bd_supstock</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPSTOCK</span> <span class="operator">=</span> <span class="string">&quot;92eed375-f4bb-4852-b537-e31c5269bab8&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商组织分配关系 bd_suporg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPORG</span> <span class="operator">=</span> <span class="string">&quot;3f120f64-011b-4aae-8da0-16e7e7ba3010&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAXITEMSTAXRATE</span> <span class="operator">=</span> <span class="string">&quot;6d6c5409-31dd-4c6c-ae1b-f9501ffbe48d&quot;</span>;</span><br><span class="line"><span class="comment">// 网银信息模板字段 bd_templetitem</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEMPLETITEM</span> <span class="operator">=</span> <span class="string">&quot;ada82f8c-3350-48cb-b70b-c3eb096e1ccd&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TIMEZONE</span> <span class="operator">=</span> <span class="string">&quot;997fd0df-1fc7-4335-b209-61ea1b0011b7&quot;</span>;</span><br><span class="line"><span class="comment">// 批改规则组 bd_batchupruleteam</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BATCH_UPDATER_RULETEAM</span> <span class="operator">=</span> <span class="string">&quot;8c58925a-eddb-4563-b300-d9fb4b861fce&quot;</span>;</span><br><span class="line"><span class="comment">// 批改页签 bd_batchupdatetab</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BATCH_UPDATE_RULE</span> <span class="operator">=</span> <span class="string">&quot;76bde528-a2fc-4d52-89f1-e9e239ac9381&quot;</span>;</span><br><span class="line"><span class="comment">// 运输方式 bd_transporttype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRANSPORTTYPE</span> <span class="operator">=</span> <span class="string">&quot;c1221067-82ba-4df4-8337-82f6d26aa622&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_STRING</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001001&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_INTEGER</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001004&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_MEMO</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001030&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFDOUBLE</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001031&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFBOOLEAN</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001032&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFDATE</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001033&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFDATETIME</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001034&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFTIME</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001036&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFID</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001051&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_UFMONEY</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001052&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_BLOB</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001053&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_CLOB</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001054&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_IMAGE</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001055&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_CUSTOM</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001056&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_MULTILANGTEXT</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001058&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TYPE_FREE_ASSIST</span> <span class="operator">=</span> <span class="string">&quot;BS000010000100001059&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNITDISTINCTION</span> <span class="operator">=</span> <span class="string">&quot;0001ORGCORP000000003&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户 sm_user</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;f6f9a473-56c0-432f-8bc7-fbf8fde54fee&quot;</span>;</span><br><span class="line"><span class="comment">// 用户组 sm_usergroup</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERGROUP</span> <span class="operator">=</span> <span class="string">&quot;d5a59d31-5a01-46b7-8077-4f85af97f26d&quot;</span>;</span><br><span class="line"><span class="comment">// 用户角色 sm_user_role</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERROLE</span> <span class="operator">=</span> <span class="string">&quot;22a78c75-0804-4167-9640-8853f115286f&quot;</span>;</span><br><span class="line"><span class="comment">// 角色组 sm_role_group</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROLEGROUP</span> <span class="operator">=</span> <span class="string">&quot;c2c1d21e-c326-4e58-a46a-9b7b1ff8e2fd&quot;</span>;</span><br><span class="line"><span class="comment">// 角色 sm_role</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROLE</span> <span class="operator">=</span> <span class="string">&quot;ad9a284b-beb1-4805-b6d5-3aca70483316&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASEROLE</span> <span class="operator">=</span> <span class="string">&quot;f7c98b52-cdff-4aa9-b107-d16e44597dbe&quot;</span>;</span><br><span class="line"><span class="comment">// 用户定义属性 bd_userdefitem</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERDEFITEM</span> <span class="operator">=</span> <span class="string">&quot;c3dfe999-1673-46a9-9707-a3d9ace7af89&quot;</span>;</span><br><span class="line"><span class="comment">// 用户定义属性组 bd_userdefrule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERDEFITEMRULE</span> <span class="operator">=</span> <span class="string">&quot;351b91bd-d7d9-4044-93ca-b19e3c0bb3fa&quot;</span>;</span><br><span class="line"><span class="comment">// 凭证类别 bd_vouchertype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VOUCHERTYPE</span> <span class="operator">=</span> <span class="string">&quot;4fbff043-eca7-4d9a-b7b3-82c9b32ea9c7&quot;</span>;</span><br><span class="line"><span class="comment">// 工作日历 bd_workcalendar</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORKCALENDAR</span> <span class="operator">=</span> <span class="string">&quot;ed81132b-35d7-46f6-a10a-4b8319764107&quot;</span>;</span><br><span class="line"><span class="comment">// 工作日历规则 bd_workcalendrule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WORKCALENDRULE</span> <span class="operator">=</span> <span class="string">&quot;cf7bba48-880a-45a3-86f7-9979c8f30a5f&quot;</span>;</span><br><span class="line"><span class="comment">// 关键功能 sm_keyfunc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEYFUNC</span> <span class="operator">=</span> <span class="string">&quot;b9277f70-26da-4d17-a9b4-8ae734db2fe1&quot;</span>;</span><br><span class="line"><span class="comment">// 关键数据 sm_keydata</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEYDATA</span> <span class="operator">=</span> <span class="string">&quot;a73bcf80-7b37-4ccb-b61a-2ca18510668f&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STUGROUP</span> <span class="operator">=</span> <span class="string">&quot;c687906e-5bee-4386-85a4-359932304a2a&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STU</span> <span class="operator">=</span> <span class="string">&quot;76ebafc0-715d-478d-8d7b-cee5dea142b8&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STUPERFORM</span> <span class="operator">=</span> <span class="string">&quot;a8f1957f-f77b-4b13-a914-c809f851a1da&quot;</span>;</span><br><span class="line"><span class="comment">// 功能权限分配对象 sm_power_function</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNCPERMISSION</span> <span class="operator">=</span> <span class="string">&quot;51851259-af70-4293-b4ae-10d673ee5d75&quot;</span>;</span><br><span class="line"><span class="comment">// 角色权限变更申请单 sm_roleperm_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNCPERMPF</span> <span class="operator">=</span> <span class="string">&quot;1c9ff600-d4e4-416d-be69-bcea1def5737&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATAPOWERACPECT</span> <span class="operator">=</span> <span class="string">&quot;c90ec3d8-c7c9-432a-bf33-93007ebfda69&quot;</span>;</span><br><span class="line"><span class="comment">// 用户权限申请单 sm_userperm_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERROLEPERMPF</span> <span class="operator">=</span> <span class="string">&quot;d89a7bcd-1cbb-4478-9676-d330e0a84740&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASEROLEPERMPF</span> <span class="operator">=</span> <span class="string">&quot;488dea70-f80c-43d5-8cec-350770317076&quot;</span>;</span><br><span class="line"><span class="comment">// 权限使用场景 sm_perm_scenario</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PERMSCENARIO</span> <span class="operator">=</span> <span class="string">&quot;97535bbd-b298-463e-8265-d14bbcc506fa&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构视图 org_view</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGVIEW</span> <span class="operator">=</span> <span class="string">&quot;d822f33c-e12c-4d80-af45-0f728bcbcd18&quot;</span>;</span><br><span class="line"><span class="comment">// 职责 sm_responsibility</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESPONSIBILITY</span> <span class="operator">=</span> <span class="string">&quot;da66f038-f7d7-4f61-8bbf-9f3e1be27b38&quot;</span>;</span><br><span class="line"><span class="comment">// 功能权限查询 sm_funcperm_query</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERPERMQUERY</span> <span class="operator">=</span> <span class="string">&quot;7aebbd52-02d3-4dba-a65c-25386bd68377&quot;</span>;</span><br><span class="line"><span class="comment">// 数据权限查询 sm_datapermquery</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATAPERMQUERY</span> <span class="operator">=</span> <span class="string">&quot;793f14f9-923e-407c-abd5-cad24dac5a2f&quot;</span>;</span><br><span class="line"><span class="comment">// 现金折扣方案 bd_rateschema</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RATESCHEMA</span> <span class="operator">=</span> <span class="string">&quot;e69c6fb9-d74d-4d61-9430-02a78c364104&quot;</span>;</span><br><span class="line"><span class="comment">// 付款协议 bd_payment</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT</span> <span class="operator">=</span> <span class="string">&quot;3b240da8-8722-47ec-a557-97c63dd7aa2d&quot;</span>;</span><br><span class="line"><span class="comment">// 收款协议 bd_income</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INCOME</span> <span class="operator">=</span> <span class="string">&quot;5a96f405-3a18-4fe9-ac5b-99e81de0a5cc&quot;</span>;</span><br><span class="line"><span class="comment">// 收款协议申请单 bd_income_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INCOMEPF</span> <span class="operator">=</span> <span class="string">&quot;713b9a16-add6-4b4f-87e9-e41e493aa865&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATATEMPLATE</span> <span class="operator">=</span> <span class="string">&quot;7f0cb338-46b5-4532-90b1-657807628b14&quot;</span>;</span><br><span class="line"><span class="comment">// 职责功能 sm_resp_func</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESP_FUNC</span> <span class="operator">=</span> <span class="string">&quot;96d6dcfe-1fab-40b3-ba99-e00081ddb0be&quot;</span>;</span><br><span class="line"><span class="comment">// 功能权限分配实体 sm_perm_func</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNC_PERM</span> <span class="operator">=</span> <span class="string">&quot;153e11e5-3d3d-4813-afc7-6d0db180c068&quot;</span>;</span><br><span class="line"><span class="comment">// 授权实体主组织 sm_subject_org</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUBJECTORG</span> <span class="operator">=</span> <span class="string">&quot;55fcdf4e-6c82-48ed-ba4b-836d7a135182&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商税类 bd_suptaxes</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPTAXES_ID</span> <span class="operator">=</span> <span class="string">&quot;8152449c-c180-4186-b530-da8faf7893f0&quot;</span>;</span><br><span class="line"><span class="comment">// 客户税类 bd_custaxes</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTAXES_ID</span> <span class="operator">=</span> <span class="string">&quot;ad4146ab-8704-4a28-8398-8f5954e7cc98&quot;</span>;</span><br><span class="line"><span class="comment">// 物料税类 bd_mattaxes</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATTAXES_ID</span> <span class="operator">=</span> <span class="string">&quot;4866d40e-f667-4cb7-81f3-4de09b853d96&quot;</span>;</span><br><span class="line"><span class="comment">// 贸易术语 bd_incoterm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INCOTERM</span> <span class="operator">=</span> <span class="string">&quot;1069197c-49ce-4457-b64c-0a693859763c&quot;</span>;</span><br><span class="line"><span class="comment">// 交易代码 bd_transactioncode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRANSCTIONCODE</span> <span class="operator">=</span> <span class="string">&quot;a9a1f45e-6bdf-4175-a9ae-8669f50896b1&quot;</span>;</span><br><span class="line"><span class="comment">// 税收地区 bd_taxregion</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAXREGION</span> <span class="operator">=</span> <span class="string">&quot;89a13594-3c1e-42a7-a949-9d3d66620ccf&quot;</span>;</span><br><span class="line"><span class="comment">// 托收协议 bd_mandate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MANDATE</span> <span class="operator">=</span> <span class="string">&quot;169194bd-b76f-45a4-b2f1-4af4cf6ba9d3&quot;</span>;</span><br><span class="line"><span class="comment">// 增值税税码税率 bd_taxcode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAXCODE</span> <span class="operator">=</span> <span class="string">&quot;f758785c-a056-4f65-a551-ac05c3ac09cd&quot;</span>;</span><br><span class="line"><span class="comment">// 组织 org_orgs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORG_ORGS</span> <span class="operator">=</span> <span class="string">&quot;985be8a4-3a36-4778-8afe-2d8ed3902659&quot;</span>;</span><br><span class="line"><span class="comment">// 客户收货地址 bd_custaddress</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTADDRESS</span> <span class="operator">=</span> <span class="string">&quot;d702bbd6-daa1-4e7e-87f6-153b974190fd&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商发货地址 bd_supaddress</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPADDRESS</span> <span class="operator">=</span> <span class="string">&quot;e3ee2293-f619-4f6b-a2ea-43759af1a7aa&quot;</span>;</span><br><span class="line"><span class="comment">// 收款时点 bd_incomeperiod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INCOMEPERIOD</span> <span class="operator">=</span> <span class="string">&quot;5fd30e69-41d0-41ae-a08e-9a1b27bed726&quot;</span>;</span><br><span class="line"><span class="comment">// 付款时点 bd_payperiod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYPERIOD</span> <span class="operator">=</span> <span class="string">&quot;ede595e5-dc66-44c9-b60f-21ec01b7aeab&quot;</span>;</span><br><span class="line"><span class="comment">// 科目属性控制策略 bd_accfieldctrl</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCFIELDCTRL</span> <span class="operator">=</span> <span class="string">&quot;6929bc8a-a3f9-42b7-9c51-0f88848422be&quot;</span>;</span><br><span class="line"><span class="comment">// 客户物料码 bd_custmaterial</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTMATER</span> <span class="operator">=</span> <span class="string">&quot;54fd868c-9f2c-4d58-937a-c7c274458b15&quot;</span>;</span><br><span class="line"><span class="comment">// 客户物料码子表 bd_custmatersub</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTMATERSUB</span> <span class="operator">=</span> <span class="string">&quot;e32a67ea-bda0-4caf-9521-ed9712d0c0bb&quot;</span>;</span><br><span class="line"><span class="comment">// 客户组织分配关系 bd_custorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CUSTORG</span> <span class="operator">=</span> <span class="string">&quot;f6c37c38-738a-4440-b1b6-77fb798e3348&quot;</span>;</span><br><span class="line"><span class="comment">// 收支项目使用权 bd_inoutuse</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INOUTUSE</span> <span class="operator">=</span> <span class="string">&quot;1ea817b0-fd66-427c-999d-06eed54f66ff&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ECONOMYINDUSTRY</span> <span class="operator">=</span> <span class="string">&quot;1009ZZ100000000034NN&quot;</span>;</span><br><span class="line"><span class="comment">// 物料利润中心信息 bd_materialpfc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPFC</span> <span class="operator">=</span> <span class="string">&quot;052b52ec-5706-4661-b37f-806ee71b930d&quot;</span>;</span><br><span class="line"><span class="comment">// 物料利润中心子表信息 bd_materialpfcsub</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPFC_SUB</span> <span class="operator">=</span> <span class="string">&quot;747bde72-35a6-4c2e-8c88-89b70fd3a272&quot;</span>;</span><br><span class="line"><span class="comment">// 物料利润中心成本域信息 bd_materialpfcc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPFCC</span> <span class="operator">=</span> <span class="string">&quot;9dd5ba49-1311-4c6a-af99-905532c84890&quot;</span>;</span><br><span class="line"><span class="comment">// 物料利润中心成本域子表信息 bd_materialpfccsub</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MATERIALPFCC_SUB</span> <span class="operator">=</span> <span class="string">&quot;49e3e757-143c-4996-b058-2bf7037aa0ed&quot;</span>;</span><br><span class="line"><span class="comment">// 特征码档案 bd_ffile</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BD_FFILE</span> <span class="operator">=</span> <span class="string">&quot;b02b1a8f-9c08-407e-b159-b67dfc84ccd5&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESPVOUCHERTYPE</span> <span class="operator">=</span> <span class="string">&quot;246e8a13-a640-4742-bdf9-dc332a33cf89&quot;</span>;</span><br><span class="line"><span class="comment">// 月结检查项类别 org_checktype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHECKTYPE</span> <span class="operator">=</span> <span class="string">&quot;b135cc21-d8cf-4682-8792-682cf4b82482&quot;</span>;</span><br><span class="line"><span class="comment">// 月结检查项 org_checkitem</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHECKITEM</span> <span class="operator">=</span> <span class="string">&quot;78c94013-ac59-4993-8905-9a967d1cd9bf&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商资质档案 bd_supqualidoc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPQUALIDOC</span> <span class="operator">=</span> <span class="string">&quot;0fe009bd-10dd-4dc4-890e-08f4a01843f5&quot;</span>;</span><br><span class="line"><span class="comment">// 供应商资质分类 bd_supqualitype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUPQUALITYPE</span> <span class="operator">=</span> <span class="string">&quot;87c8fddb-2ee4-42ca-84eb-d450f6a34386&quot;</span>;</span><br><span class="line"><span class="comment">// 单价精度 bd_priceaccuracy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRICEACCURACY</span> <span class="operator">=</span> <span class="string">&quot;5f185c45-477c-42b1-ba04-396ce3a45635&quot;</span>;</span><br><span class="line"><span class="comment">// 信用控制域申请单 org_crectlregion_pf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CRECTLREGIONPF</span> <span class="operator">=</span> <span class="string">&quot;faebe279-9a21-4a8f-b74b-85d84747f2cd&quot;</span>;</span><br><span class="line"><span class="comment">// 汇率类型 bd_ratetype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RATETYPE</span> <span class="operator">=</span> <span class="string">&quot;8599ce90-c366-401b-baa9-c86a050a8abe&quot;</span>;</span><br><span class="line"><span class="comment">// 日汇率 bd_currrate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CURRRATE</span> <span class="operator">=</span> <span class="string">&quot;a4b265e2-385e-42f9-b170-5add154f8e09&quot;</span>;</span><br><span class="line"><span class="comment">// 期间汇率 bd_adjustrate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADJUSTRATE</span> <span class="operator">=</span> <span class="string">&quot;628f0bb4-d634-4879-9b73-dc3d7a1bb6dc&quot;</span>;</span><br><span class="line"><span class="comment">// 银行联系人 bd_banklinkman</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANKLINKMAN</span> <span class="operator">=</span> <span class="string">&quot;c9081a08-b6de-41c2-abd7-3df9be9e3216&quot;</span>;</span><br><span class="line"><span class="comment">// 未知！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GOODSREF</span> <span class="operator">=</span> <span class="string">&quot;639ee62d-0689-4b10-82ac-ac83b5577577&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------------------------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织 org_orgs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORG</span> <span class="operator">=</span> <span class="string">&quot;985be8a4-3a36-4778-8afe-2d8ed3902659&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_集团 org_group</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP</span> <span class="operator">=</span> <span class="string">&quot;3b6dd171-2900-47f3-bfbe-41e4483a2a65&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_公司 org_corp</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CORP</span> <span class="operator">=</span> <span class="string">&quot;4d514224-de70-44dd-bf70-f14a02f29d10&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_财务组织 org_financeorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FINANCEORG</span> <span class="operator">=</span> <span class="string">&quot;2cfe13c5-9757-4ae8-9327-f5c2d34bcb46&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_资金组织 org_fundorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDORG</span> <span class="operator">=</span> <span class="string">&quot;33f0d692-6a40-44a9-a471-7e4105c201b7&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_采购组织 org_purchaseorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PURCHASEORG</span> <span class="operator">=</span> <span class="string">&quot;5d69ee35-57d0-4f7b-b454-deff4fc73689&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_销售组织 org_salesorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SALESORG</span> <span class="operator">=</span> <span class="string">&quot;945f38b6-48ec-43e6-bb09-77ec89a3728f&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_库存组织 org_stockorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STOCKORG</span> <span class="operator">=</span> <span class="string">&quot;46c4bfba-0b40-4855-87f8-c2ac8647f039&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_物流组织 org_trafficorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRAFFICORG</span> <span class="operator">=</span> <span class="string">&quot;9a1a1816-b2de-4bae-a295-78fcebd080fb&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_质检中心 org_qccenter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QCCENTER</span> <span class="operator">=</span> <span class="string">&quot;9019762c-3baf-4618-a763-2432b5113f5a&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_资产组织 org_assetorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSETORG</span> <span class="operator">=</span> <span class="string">&quot;22bd6938-f5e0-444d-b2b9-029c8c7a4c9b&quot;</span>;</span><br><span class="line"><span class="comment">// 成本中心 resa_costcenter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COSTCENTER</span> <span class="operator">=</span> <span class="string">&quot;de9796b5-bccd-42a1-97dd-808847bfddbd&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_维修组织 org_maintainorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAINTAINORG</span> <span class="operator">=</span> <span class="string">&quot;61abab19-5402-484b-813a-c569ab748954&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_人力资源组织 org_hrorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HRORG</span> <span class="operator">=</span> <span class="string">&quot;f3fed5ea-72f2-4a0a-ad43-d30b1c22c86c&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MANAGEMENTORG</span> <span class="operator">=</span> <span class="string">&quot;017d5db7-fcc7-4cc4-af3d-1a4455ff6f0b&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_责任组织 org_liacenter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIABILITYCENTER</span> <span class="operator">=</span> <span class="string">&quot;5461ada1-ef2a-419a-af14-656cf0641d34&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_报表组织 org_reportorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTORG</span> <span class="operator">=</span> <span class="string">&quot;b0969fd4-2923-43c2-888a-c9fa4a25a528&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_预算组织 org_planbudget</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PLANBUDGET</span> <span class="operator">=</span> <span class="string">&quot;ff1f05b0-e7b7-4e22-a083-ad1b592f245c&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_项目组织 org_itemorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ITEMORG</span> <span class="operator">=</span> <span class="string">&quot;ab25dc29-7f2e-4906-b867-88e59f5fd6e0&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_行政组织 org_adminorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADMINORG</span> <span class="operator">=</span> <span class="string">&quot;a0ec952c-e4e5-416a-b3e0-d402725f76be&quot;</span>;</span><br><span class="line"><span class="comment">// 利润中心 org_profitcenter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROFITCENTER</span> <span class="operator">=</span> <span class="string">&quot;310e1300-0681-4062-9ca7-6276d9833901&quot;</span>;</span><br><span class="line"><span class="comment">// 利润中心版本 org_profitcenter_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROFITCENTERV</span> <span class="operator">=</span> <span class="string">&quot;eca72cac-085b-4796-b433-1b17b754574c&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_计划中心 org_plancenter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PLANCENTER</span> <span class="operator">=</span> <span class="string">&quot;3d6fcacc-e80e-4d32-a833-1bbf41a6f666&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_工厂 org_factory</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACTORY</span> <span class="operator">=</span> <span class="string">&quot;5144b675-b681-4509-809e-6eb311db39b4&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_成本域 org_costregion</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COSTREGION</span> <span class="operator">=</span> <span class="string">&quot;2b177ab7-a3a9-4cc4-bda7-5f99ec99efaf&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CR_STOCKORG</span> <span class="operator">=</span> <span class="string">&quot;15c1fdfe-a4a2-4d4d-97ac-2654eb5cd3ee&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CR_STOCKSTORAGE</span> <span class="operator">=</span> <span class="string">&quot;e546f684-0b37-4fb5-b11b-96e4e0794305&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_信用控制域 org_crectlregion</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREDITCTLREGION</span> <span class="operator">=</span> <span class="string">&quot;b9092cd4-2c9f-4658-8115-98a194c47d00&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CCREGION_FINORG</span> <span class="operator">=</span> <span class="string">&quot;845c7614-5c49-4037-aa03-6549545fc882&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_业务汇报关系 org_busireportstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUSIREPORTSTRU</span> <span class="operator">=</span> <span class="string">&quot;31f39dc2-cb9b-426a-9cfb-f07d83f58a20&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_业务汇报关系成员 org_brsmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUSIREPORTSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;dbfb91ac-27db-4b0b-b5ea-6138087b859a&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_资金管理体系 org_fundmanasystem</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDMANASYSTEM</span> <span class="operator">=</span> <span class="string">&quot;fa199fbb-4677-4e1c-a1ca-c00b2978bdd9&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_资金管理体系成员 org_fmsmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDMANASYSTEMMEMBER</span> <span class="operator">=</span> <span class="string">&quot;8c07de3a-481c-42a4-bc68-3d487b62538c&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_预算组织体系 org_budgetorgstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUDGETORGSTRU</span> <span class="operator">=</span> <span class="string">&quot;e8e0d250-8847-449a-8300-768dcd1caaa3&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_预算组织体系成员 org_bosmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUDGETORGSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;4dfd50d0-7c1e-4f16-ad67-86a604483046&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表合并体系 org_reportcombinestru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTCOMBINESTRU</span> <span class="operator">=</span> <span class="string">&quot;d9147792-2404-4f87-bc3c-ebd5cf5ed42e&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表合并体系成员 org_rcsmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTCOMBINESTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;c6abaaa6-ca35-4743-a66a-b1eb0d48342d&quot;</span>;</span><br><span class="line"><span class="comment">// 资产统计体系 org_assetstatstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSETSTATSTRU</span> <span class="operator">=</span> <span class="string">&quot;6527dc79-1773-4f8e-b66f-42948c20b936&quot;</span>;</span><br><span class="line"><span class="comment">// 资产统计体系成员 org_assmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSETSTATSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;ab6e3858-182b-4337-8f9f-fc70ef540fa1&quot;</span>;</span><br><span class="line"><span class="comment">// 利润中心结构 org_pfconstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROFITCENTERSTRU</span> <span class="operator">=</span> <span class="string">&quot;ae206fd1-a362-4070-b299-ffc5ef90bc47&quot;</span>;</span><br><span class="line"><span class="comment">// 利润中心组 org_pfgroup</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROFITCENTERGROUP</span> <span class="operator">=</span> <span class="string">&quot;fe3e49ce-57c0-4c99-b5f9-0902bb040dbc&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_账簿合并体系 org_bookcombinestru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOKCOMBINESTRU</span> <span class="operator">=</span> <span class="string">&quot;b729f282-f730-46f1-9c0d-5f7f24ac3eb6&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_账簿合并体系成员</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOKCOMBINESTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;febfe9bf-8ad8-4149-a3f9-6acb4e73bb1a&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表组织体系 org_reportmanastru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTMANASTRU</span> <span class="operator">=</span> <span class="string">&quot;60abb4e9-ef5c-4bce-a4d4-2a35bf01d405&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表组织体系成员 org_rmsmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTMANASTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;a6567240-4a8d-4548-b8da-ced59cff3787&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_库存统计体系成员 org_sssmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STOCKSTATSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;de7a908e-d652-4796-9b10-51442acc9121&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_采购计划体系 org_purplanstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PURPLANSTRU</span> <span class="operator">=</span> <span class="string">&quot;2574bccd-1637-419b-bc0d-5ce391211a52&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_采购计划体系成员 org_ppsmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PURPLANSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;2cf5d212-8ef8-4d51-b24b-abe29856241c&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_分销补货体系 org_saleappendstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SALEAPPENDSTRU</span> <span class="operator">=</span> <span class="string">&quot;a429863a-2bd3-4d73-ae33-e4f68e21ed10&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_分销补货体系成员 org_sasmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SALEAPPENDSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;5ec11d14-f193-4745-9058-d87167f9c61b&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_股权投资关系 org_stockinvest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STOCKINVESTRELA</span> <span class="operator">=</span> <span class="string">&quot;99e0e127-d2ee-4153-89f8-1c6d43f6eace&quot;</span>;</span><br><span class="line"><span class="comment">// 股权投资多方案 org_stockinvestscheme</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STOCKINVESTSCHEME</span> <span class="operator">=</span> <span class="string">&quot;a892e60c-06ca-4ce2-93af-a3e5e27fab7a&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_预算统计体系成员 org_bssmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUDGETSTATSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;157858b8-6809-46cd-8cdf-7ad5a1d60c72&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_财务统计体系 org_financestatstru</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FINANCESTATSTRU</span> <span class="operator">=</span> <span class="string">&quot;55d08901-9435-4445-bb6a-a894b6819562&quot;</span>;</span><br><span class="line"><span class="comment">// 财务统计体系成员 org_financestatstrumember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FINANCESTATSTRUMEMBER</span> <span class="operator">=</span> <span class="string">&quot;478add6b-57bb-4f16-9ea4-3f89a0b64d5d&quot;</span>;</span><br><span class="line"><span class="comment">// 组织其它_组织类型 org_orgtype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGTYPE</span> <span class="operator">=</span> <span class="string">&quot;18968315-fe71-4077-bea4-f6a31c38aa52&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系_组织关系类型 org_relationtype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGRELATIONTYPE</span> <span class="operator">=</span> <span class="string">&quot;17549b86-d14a-42e8-9a43-f8362448abbe&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系_组织关系类型_归属类型 org_rtypelefttype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGRELATIONTYPELEFTTYPE</span> <span class="operator">=</span> <span class="string">&quot;e1dd0ad6-87b0-42d9-92f1-4c538c4de317&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系 org_relation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGRELATION</span> <span class="operator">=</span> <span class="string">&quot;cf1a709f-6438-4ec4-bab8-125d12c038d4&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONNECTIONRULE</span> <span class="operator">=</span> <span class="string">&quot;f21833cd-b60e-444c-9c05-f99716cb66f7&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_组织数据校验服务 org_datavalidator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGDATAVALIDATOR</span> <span class="operator">=</span> <span class="string">&quot;d6c13fc0-851b-4b24-993e-14169bc05ebf&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系_组织关系类型_数据校验 org_relvalidator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGRELATIONVALIDATOR</span> <span class="operator">=</span> <span class="string">&quot;3f8223ac-26f7-4ec1-9b97-2f9c315ec562&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系_组织类型间规则类型 org_ot_ruletype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGTYPERULETYPE</span> <span class="operator">=</span> <span class="string">&quot;3462a197-58bb-435c-9020-915c5e0279a7&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系_组织类型规则 org_ot_rule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGTYPERULE</span> <span class="operator">=</span> <span class="string">&quot;6f8fd2aa-51f0-4f50-9ff8-0af7460e28a0&quot;</span>;</span><br><span class="line"><span class="comment">// 组织关系_操作 org_operate</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OPERATE</span> <span class="operator">=</span> <span class="string">&quot;12753850-850e-46eb-9d75-87c3a664c414&quot;</span>;</span><br><span class="line"><span class="comment">// 组织其它_用户主组织 sm_user_mainorg</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERMAINORG</span> <span class="operator">=</span> <span class="string">&quot;fdcf1090-506b-4458-a4f5-a0e9b0c6565a&quot;</span>;</span><br><span class="line"><span class="comment">// 组织其它_用户可管理的集团 org_uagroup</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERADMINGROUP</span> <span class="operator">=</span> <span class="string">&quot;a43d16f9-546f-4039-a735-04096110fe1e&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ENTITY</span> <span class="operator">=</span> <span class="string">&quot;118db440-34df-47ba-983e-f61bb100304e&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_集团_政策科目表 org_grouprelchart</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUPRELCHART</span> <span class="operator">=</span> <span class="string">&quot;4227847d-ba71-4e31-befe-e8ae95dc6c2d&quot;</span>;</span><br><span class="line"><span class="comment">// 账簿_账簿类型 org_setofbook</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SETOFBOOK</span> <span class="operator">=</span> <span class="string">&quot;835e9f49-5f2f-49fd-bb50-3139d0dd4435&quot;</span>;</span><br><span class="line"><span class="comment">// 账簿_核算账簿 org_accbook</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCBOOK</span> <span class="operator">=</span> <span class="string">&quot;a8c09a59-7e32-4e19-97a9-4c4ee02a7ea7&quot;</span>;</span><br><span class="line"><span class="comment">// 账簿_财务核算账簿 org_accountingbook</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACCOUNTINGBOOK</span> <span class="operator">=</span> <span class="string">&quot;fb4da7d4-77b0-4cb8-81c3-db65e32d63af&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSETBOOK</span> <span class="operator">=</span> <span class="string">&quot;63be7aed-117f-4b60-b1aa-3713f9043785&quot;</span>;</span><br><span class="line"><span class="comment">// 账簿_责任核算账簿 org_liabilitybook</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIABILITYBOOK</span> <span class="operator">=</span> <span class="string">&quot;13a0d3b2-4d5b-4314-9e75-481193f993f2&quot;</span>;</span><br><span class="line"><span class="comment">// 组织其它_组织主管 org_orgmanager</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGMANAGER</span> <span class="operator">=</span> <span class="string">&quot;10222696-daaf-43a7-962e-17baf1bf5fc8&quot;</span>;</span><br><span class="line"><span class="comment">// 账簿_组织关账 org_closeacc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGCLOSEACCBOOK</span> <span class="operator">=</span> <span class="string">&quot;360d759f-69e9-4a63-a6ca-f3321acca243&quot;</span>;</span><br><span class="line"><span class="comment">// 组织其它_VAT注册码 org_vat</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORGVAT</span> <span class="operator">=</span> <span class="string">&quot;2f83801d-b99b-4c8d-b4f8-e21ab1366cdd&quot;</span>;</span><br><span class="line"><span class="comment">// 组织其它_组织模块启用期间 org_moduleperiod</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODULEPERIOD</span> <span class="operator">=</span> <span class="string">&quot;5c7b3960-a398-4c32-a784-e5ba4f1c1748&quot;</span>;</span><br><span class="line"><span class="comment">// 人力资源管理_职务类别 om_jobtype</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JOBTYPE</span> <span class="operator">=</span> <span class="string">&quot;a93857b6-4317-4759-a83a-13e6c778e340&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JOBRANK</span> <span class="operator">=</span> <span class="string">&quot;b294f248-8a79-46a3-93d6-3255716717f7&quot;</span>;</span><br><span class="line"><span class="comment">// 人力资源管理_职务 om_job</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JOB</span> <span class="operator">=</span> <span class="string">&quot;8afa3f01-d755-4b31-a593-507130d91ffd&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JOBGRADE</span> <span class="operator">=</span> <span class="string">&quot;817baa31-0183-4d3f-a510-0adb6f4f0136&quot;</span>;</span><br><span class="line"><span class="comment">// 人力资源管理_岗位序列 om_postseries</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">POSTSERIES</span> <span class="operator">=</span> <span class="string">&quot;2c94d789-2e63-4264-8ce1-8c579e1432ef&quot;</span>;</span><br><span class="line"><span class="comment">// 人力资源管理_岗位 om_post</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">POST</span> <span class="operator">=</span> <span class="string">&quot;8a397eb5-f056-4bb3-bb04-4b8008e8a334&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_项目组织分解结构 org_obsdept</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OBS</span> <span class="operator">=</span> <span class="string">&quot;a9663df3-7d89-44ed-9f67-e4e7f3e8b00c&quot;</span>;</span><br><span class="line"><span class="comment">// 档案配置_档案唯一性规则 bd_uniquerule</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BDUNIQUERULE</span> <span class="operator">=</span> <span class="string">&quot;27853e07-eb29-404f-aa85-52e9d20c64f8&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_责任组织版本信息 org_liacenter_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIABILITYCENTER_V</span> <span class="operator">=</span> <span class="string">&quot;0b9ea16e-7650-47dc-9912-fd0bd351f124&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_财务组织结构成员版本信息 org_finorgmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FINORGSTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;0e1e2882-3dc4-4711-81c3-7be663c7675d&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_预算组织版本信息 org_planbudget_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PLANBUDGET_V</span> <span class="operator">=</span> <span class="string">&quot;10c17aa8-16fc-4ef6-b1c4-ac71b0302562&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_人力资源组织结构版本信息 org_hrorgstru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HRORGSTRU_V</span> <span class="operator">=</span> <span class="string">&quot;1372d904-203b-4552-a962-becab65dea6d&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_财务组织版本信息 org_financeorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FINANCEORG_V</span> <span class="operator">=</span> <span class="string">&quot;31736d3d-3626-46c5-b5d0-e10b4ed33dce&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_利润中心体系版本信息 org_liacenstru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIACENSTRU_V</span> <span class="operator">=</span> <span class="string">&quot;32c5ee2a-1e77-4e75-87b0-4763da9465ee&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_库存组织版本信息 org_stockorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STOCKORG_V</span> <span class="operator">=</span> <span class="string">&quot;34869061-84cb-4bc7-a052-12b1522620a3&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_物流组织版本信息 org_trafficorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TRAFFICORG_V</span> <span class="operator">=</span> <span class="string">&quot;42b60b87-a06f-4db6-8cf5-cedd952aae64&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_报表组织版本信息 org_reportorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTORG_V</span> <span class="operator">=</span> <span class="string">&quot;5341b16a-1a33-4f54-b1cc-d7a4c660daff&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_预算组织体系成员版本信息 org_bosmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUDGETORGSTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;5485c83b-7385-47f0-88c4-afbb1ad3d725&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_部门结构成员版本信息 org_deptstrumem_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPTSTRUMEM_V</span> <span class="operator">=</span> <span class="string">&quot;640b4182-d31c-4fc0-ba7d-391c716aacd2&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_部门版本信息 org_dept_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPT_V</span> <span class="operator">=</span> <span class="string">&quot;66ed0cf6-e260-4f39-8fbb-172260efd677&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_人力资源组织结构成员版本信息 org_hrorgmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HRORGSTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;704b24c5-7f6e-4d1d-8920-02ced4878f93&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_资金管理体系成员版本信息 org_fmsmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDMANASYSTEMMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;7db2d060-5e2c-4358-808b-a524b509d6ae&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_人力资源组织版本信息 org_hrorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HRORG_V</span> <span class="operator">=</span> <span class="string">&quot;84d388a8-c966-4222-8144-36d2a58886fd&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_项目组织版本信息 org_itemorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ITEMORG_V</span> <span class="operator">=</span> <span class="string">&quot;89e00da9-9536-46fe-ba09-753c5bb24548&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_资金管理体系版本信息 org_fms_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDMANASYSTEM_V</span> <span class="operator">=</span> <span class="string">&quot;8a8eceb2-3d84-440e-94ea-c99b8ad8823a&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_财务组织结构版本信息 org_finorgstru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FINORGSTRU_V</span> <span class="operator">=</span> <span class="string">&quot;97fc3843-8ce7-486d-a16c-32ead41a1300&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_预算组织体系版本信息 org_bos_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUDGETORGSTRU_V</span> <span class="operator">=</span> <span class="string">&quot;981d2449-d5bd-41de-a24c-5f3d33a518e4&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_部门结构版本信息 org_deptstru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPTSTRU_V</span> <span class="operator">=</span> <span class="string">&quot;a251c2c1-0058-4159-aab6-f8f1d6d4aefe&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_资金组织版本信息 org_fundorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FUNDORG_V</span> <span class="operator">=</span> <span class="string">&quot;b76613da-c83f-4f5e-83cc-fce5b04e6efa&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MANAGEMENTORG_V</span> <span class="operator">=</span> <span class="string">&quot;3d1516b9-7622-4138-805f-b90bfcb6fe2d&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_维修组织版本信息 org_maintainorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAINTAINORG_V</span> <span class="operator">=</span> <span class="string">&quot;b8861744-eeed-4bf4-b361-1445bd9ee267&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_质检中心版本信息 org_qccenter_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QCCENTER_V</span> <span class="operator">=</span> <span class="string">&quot;c6fe6290-9476-4b9b-9baf-6775d07f3846&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_资产组织版本信息 org_assetorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ASSETORG_V</span> <span class="operator">=</span> <span class="string">&quot;d271ee1a-fb4b-4bb5-8ac8-1f8bc18c7c4b&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_利润中心体系成员版本信息 org_liacenmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIACENMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;d79516a2-85d4-4148-b542-f448e52e42ea&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_公司版本信息 org_corp_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CORP_V</span> <span class="operator">=</span> <span class="string">&quot;d8f91112-3845-4289-ab99-b87d372878d6&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_版本信息 org_orgs_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORG_V</span> <span class="operator">=</span> <span class="string">&quot;da7bba89-9a59-42d6-a262-c13ef459dbd9&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_销售组织版本信息 org_salesorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SALESORG_V</span> <span class="operator">=</span> <span class="string">&quot;df1a50ce-e9d9-418f-b1e8-c406aa067a5c&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_采购组织版本信息 org_purchaseorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PURCHASEORG_V</span> <span class="operator">=</span> <span class="string">&quot;eda9f476-357f-4ff7-ac09-6766bc29de29&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_行政组织版本信息 org_adminorg_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADMINORG_V</span> <span class="operator">=</span> <span class="string">&quot;fa902409-20fe-4c49-89ee-85ee9312174b&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_行政组织结构版本信息 org_adminorgstru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADMINORGSTRU_V</span> <span class="operator">=</span> <span class="string">&quot;548390ca-4472-48d4-8c6d-3763bc051f3b&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_行政组织结构成员版本信息 org_admorgmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADMINORGSTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;9abc270f-7ccc-4769-9a25-a14df4107531&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_工厂版本信息 org_factory_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACTORY_V</span> <span class="operator">=</span> <span class="string">&quot;4f5ee63d-f4f5-4ec2-a99d-75b3cdf37c97&quot;</span>;</span><br><span class="line"><span class="comment">// 组织_业务单元_计划中心版本信息 org_plancenter_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PLANCENTER_V</span> <span class="operator">=</span> <span class="string">&quot;d85e06a6-822d-4994-b71c-1328f85c3602&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表合并体系_多版本 org_reportcombinestru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTCOMBINESTRU_V</span> <span class="operator">=</span> <span class="string">&quot;1a2d237c-5bb9-4de1-ae54-8243f85ecc9e&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表合并体系成员_多版本 org_rcsmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTCOMBINESTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;90e381ee-0f5c-4588-9c96-4d2fd9f6bf72&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_账簿合并体系_多版本 org_bookcombinestru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOKCOMBINESTRU_V</span> <span class="operator">=</span> <span class="string">&quot;abb22bb5-54a8-4f60-beef-0e816e3cf055&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_账簿合并体系_多版本 org_bookcombinestru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BOOKCOMBINESTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;484650b9-ae99-49ea-be61-27c9a1ffe7dc&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_预算统计成员版本信息 org_bssmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUDGETSTATSTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;439049c4-fc6c-4174-8172-568ef4a9aa53&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_报表组织体系版本信息 org_reportmanastru_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTMANASTRU_V</span> <span class="operator">=</span> <span class="string">&quot;b8ec7a64-46a0-43aa-9ea0-d34f2a560efb&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构-报表组织体系成员版本信息 org_reportmanastrumember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REPORTMANASTRUMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;5053cc32-290f-4423-a182-2263f4269848&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_行政组织体系版本信息 org_aos_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AOS_V</span> <span class="operator">=</span> <span class="string">&quot;42bfcdee-0a81-457e-a31c-32e6fbc5dbe4&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_行政组织体系成员 org_aosmember</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AOSMEMBER</span> <span class="operator">=</span> <span class="string">&quot;1c086c6e-3c19-4249-8bec-e98ffcd954fa&quot;</span>;</span><br><span class="line"><span class="comment">// 组织结构_行政组织体系成员版本信息 org_aosmember_v</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AOSMEMBER_V</span> <span class="operator">=</span> <span class="string">&quot;bf6a72eb-387d-40b7-8778-2033e5070475&quot;</span>;</span><br><span class="line"><span class="comment">// 业务人员来源主表 org_admin_dept</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUSI_ROLE_DEPT</span> <span class="operator">=</span> <span class="string">&quot;66ab2316-2d7d-46ae-aef3-6b65cdfdfe32&quot;</span>;</span><br><span class="line"><span class="comment">// 业务人员来源子表 org_busi_func</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BUSI_ROLE_FUNC</span> <span class="operator">=</span> <span class="string">&quot;cbe5d679-fd4c-4899-b782-1e63bc593f0a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目基本分类 pm_eps</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EPS</span> <span class="operator">=</span> <span class="string">&quot;0f329ae1-a9b3-48d4-93bb-d2857acbd7ab&quot;</span>;</span><br><span class="line"><span class="comment">// 项目类型 bd_projectclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROJECT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;b0f3f52d-1582-4f8f-a466-753aa0d5462a&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用单据审批方法</title>
      <link href="/2024/11/09/241109/%E9%80%9A%E7%94%A8%E5%8D%95%E6%8D%AE%E5%AE%A1%E6%89%B9%E6%96%B9%E6%B3%95/"/>
      <url>/2024/11/09/241109/%E9%80%9A%E7%94%A8%E5%8D%95%E6%8D%AE%E5%AE%A1%E6%89%B9%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="通用单据-提交-方法"><a href="#通用单据-提交-方法" class="headerlink" title="通用单据 提交 方法"></a>通用单据 提交 方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IPFBusiAction</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(IPFBusiAction.class);</span><br><span class="line">service.processAction(<span class="string">&quot;COMMIT&quot;</span>, <span class="string">&quot;交易类型编码&quot;</span>,<span class="literal">null</span>, “<span class="string">&quot;待提交VO&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//第一个参数  COMMIT 或者  SAVE  arap的付款单是 COMMIT ,erm 模块的单据基本上都是 SAVE</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交单据</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;F3&quot;</span>.equals(billtype)) &#123;<span class="comment">// 付款</span></span><br><span class="line"><span class="type">IPFBusiAction</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(IPFBusiAction.class);</span><br><span class="line">service.processAction(<span class="string">&quot;COMMIT&quot;</span>, (String) arr[<span class="number">0</span>].getParentVO().getAttributeValue(<span class="string">&quot;pk_tradetype&quot;</span>),<span class="literal">null</span>, arr[<span class="number">0</span>], <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;263X&quot;</span>.equals(billtype)) &#123;<span class="comment">// 借款</span></span><br><span class="line"><span class="type">IPFBusiAction</span> <span class="variable">pfbo</span> <span class="operator">=</span> NCLocator.getInstance().lookup(IPFBusiAction.class);</span><br><span class="line">pfbo.processAction(<span class="string">&quot;SAVE&quot;</span>, (String) arr[<span class="number">0</span>].getParentVO().getAttributeValue(<span class="string">&quot;djlxbm&quot;</span>), <span class="literal">null</span>,arr[<span class="number">0</span>], <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;264X&quot;</span>.equals(billtype)) &#123;<span class="comment">// 报销</span></span><br><span class="line"><span class="type">IPFBusiAction</span> <span class="variable">pfbo</span> <span class="operator">=</span> NCLocator.getInstance().lookup(IPFBusiAction.class);</span><br><span class="line">pfbo.processAction(<span class="string">&quot;SAVE&quot;</span>, (String) arr[<span class="number">0</span>].getParentVO().getAttributeValue(<span class="string">&quot;djlxbm&quot;</span>), <span class="literal">null</span>,arr[<span class="number">0</span>], <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;261X&quot;</span>.equals(billtype)) &#123;<span class="comment">// 费用申请</span></span><br><span class="line"><span class="type">IPFBusiAction</span> <span class="variable">pfbo</span> <span class="operator">=</span> NCLocator.getInstance().lookup(IPFBusiAction.class);</span><br><span class="line">pfbo.processAction(<span class="string">&quot;SAVE&quot;</span>, (String) arr[<span class="number">0</span>].getParentVO().getAttributeValue(<span class="string">&quot;pk_tradetype&quot;</span>),<span class="literal">null</span>, arr[<span class="number">0</span>], <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;2647&quot;</span>.equals(billtype)) &#123;<span class="comment">// 还款</span></span><br><span class="line"><span class="type">IPFBusiAction</span> <span class="variable">pfbo</span> <span class="operator">=</span> NCLocator.getInstance().lookup(IPFBusiAction.class);</span><br><span class="line">pfbo.processAction(<span class="string">&quot;SAVE&quot;</span>, (String) arr[<span class="number">0</span>].getParentVO().getAttributeValue(<span class="string">&quot;djlxbm&quot;</span>), <span class="literal">null</span>,arr[<span class="number">0</span>], <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建基础的Spring项目</title>
      <link href="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建一个最基础的Spring项目"><a href="#搭建一个最基础的Spring项目" class="headerlink" title="搭建一个最基础的Spring项目"></a>搭建一个最基础的Spring项目</h1><h2 id="第一步，新建项目"><a href="#第一步，新建项目" class="headerlink" title="第一步，新建项目"></a>第一步，新建项目</h2><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241116171037502.png" alt="image-20241116171037502"></p><h2 id="第二步，添加基础依赖"><a href="#第二步，添加基础依赖" class="headerlink" title="第二步，添加基础依赖"></a>第二步，添加基础依赖</h2><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241116171136243.png" alt="image-20241116171136243"></p><p>第三步，设置maven仓库和module</p><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118090622109.png" alt="image-20241118090622109"></p><ul><li><p>第一步 ，设置源目录</p><p> <img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118090810218.png" alt="image-20241118090810218"></p></li><li><p>第二步，设置maven仓库，默认使用idea的仓库，太慢了。</p></li></ul><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091025959.png" alt="image-20241118091025959"></p><ul><li>第三步，设置模块</li></ul><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091141092.png" alt="image-20241118091141092"></p><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091245044.png" alt="image-20241118091245044"></p><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091344613.png" alt="image-20241118091344613"></p><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091441728.png" alt="image-20241118091441728"></p><h2 id="第三步，启动入口类"><a href="#第三步，启动入口类" class="headerlink" title="第三步，启动入口类"></a>第三步，启动入口类</h2><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091634953.png" alt="image-20241118091634953"></p><p>访问 localhost8080</p><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118091659196.png" alt="image-20241118091659196"></p><h2 id="第四步，写一个controller测试"><a href="#第四步，写一个controller测试" class="headerlink" title="第四步，写一个controller测试"></a>第四步，写一个controller测试</h2><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118092024944.png" alt="image-20241118092024944"></p><p><img src="/2024/11/09/spring241121/%E6%90%AD%E5%BB%BASpring%E6%A1%86%E6%9E%B6%E9%A1%B9%E7%9B%AE/image-20241118092034522.png" alt="image-20241118092034522"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置sysConfig</title>
      <link href="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/"/>
      <url>/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/</url>
      
        <content type="html"><![CDATA[<h1 id="配置-sysConfig"><a href="#配置-sysConfig" class="headerlink" title="配置 sysConfig"></a>配置 sysConfig</h1><ul><li>拿到新的home之后，一般是从linux系统拷贝下来的，不能直接使用，先配置一下sysconfig</li></ul><h2 id="sysConfig打不开"><a href="#sysConfig打不开" class="headerlink" title="sysConfig打不开"></a>sysConfig打不开</h2><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015152752451.png" alt="image-20241015152752451"></p><p>第一步，备份ant，然后从别的 相同版本的 home中拷贝一个 ant。</p><p>第二步，在sysConfig中配置 jdk路径</p><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015153031272.png" alt="image-20241015153031272"></p><h2 id="配置-sysConfig-1"><a href="#配置-sysConfig-1" class="headerlink" title="配置 sysConfig"></a>配置 sysConfig</h2><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015153253531.png" alt="image-20241015153253531"></p><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015153308690.png" alt="image-20241015153308690"></p><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015153345535.png" alt="image-20241015153345535"></p><p><strong>！！！！！！ 文件服务器的存储路径，要自己换成 windows下的某个位置，不然会报错！！！！！</strong></p><p><strong>第二点，看到那个启用安全访问了没，要关掉！！！！</strong></p><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015153413814.png" alt="image-20241015153413814"></p><h2 id="如果是-6系列，则客户端启动端口和服务端口保持一致。"><a href="#如果是-6系列，则客户端启动端口和服务端口保持一致。" class="headerlink" title="如果是 6系列，则客户端启动端口和服务端口保持一致。"></a>如果是 6系列，则客户端启动端口和服务端口保持一致。</h2><p><img src="/2024/10/15/240911/%E9%85%8D%E7%BD%AEsysConfig/image-20241015153500960.png" alt="image-20241015153500960"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗慕前端脚手架运行</title>
      <link href="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/"/>
      <url>/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="罗慕前端脚手架运行"><a href="#罗慕前端脚手架运行" class="headerlink" title="罗慕前端脚手架运行"></a>罗慕前端脚手架运行</h1><ul><li>从git上拉下来的前端脚手架有可能不能直接运行，需要做一些处理。</li></ul><h2 id="第一步，下载依赖"><a href="#第一步，下载依赖" class="headerlink" title="第一步，下载依赖"></a>第一步，下载依赖</h2><ul><li>打开刚刚从 git上拉下来的脚手架，npm run dev 报错，找不到模块，此时是没有下载依赖。</li></ul><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926093530752.png" alt="image-20240926093530752"></p><ul><li>执行命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="第二步，尝试编译，看看有哪些报错"><a href="#第二步，尝试编译，看看有哪些报错" class="headerlink" title="第二步，尝试编译，看看有哪些报错"></a>第二步，尝试编译，看看有哪些报错</h2><ul><li>开发要用到 ic 模块，所以我们在config中配置上编译路径，然后尝试编译一下</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926094519625.png" alt="image-20240926094519625"></p><ul><li>报错了</li></ul><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926094707530.png" alt="image-20240926094707530"></p><p>从报错上来看，是没有找到相应的文件，这种情况，只需要去目录下看一看有没有那个文件，没有的话，从home–&gt; hotwebs –&gt; nccloud –&gt; resources 中拷贝相应的文件到脚手架即可。（如果你的文件拷过来，重新编译还是报 找不到的错误，重启 vscode试试）</p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926094933534.png" alt="image-20240926094933534"></p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926095032889.png" alt="image-20240926095032889"></p><p>粘贴到脚手架内</p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926095130399.png" alt="image-20240926095130399"></p><p>此时，重新再变异一下，就没有 scmpub 模块的错误了，剩下的 也是 qc模块 和 so模块的 components 找不到，依法炮制，去home里复制即可。</p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926095310970.png" alt="image-20240926095310970"></p><h2 id="有四个很重要的模块，如果脚手架里面没有，要去home里复制过来，不管有没有提示报错信息"><a href="#有四个很重要的模块，如果脚手架里面没有，要去home里复制过来，不管有没有提示报错信息" class="headerlink" title="有四个很重要的模块，如果脚手架里面没有，要去home里复制过来，不管有没有提示报错信息"></a>有四个很重要的模块，如果脚手架里面没有，要去home里复制过来，不管有没有提示报错信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uap  uapbd  workbench platform</span><br></pre></td></tr></table></figure><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926100122840.png" alt="image-20240926100122840"></p><ul><li>当上面所有的模块都复制到脚手架中，重新编译，此时已经没有报错了。</li></ul><h2 id="第三步，尝试在开发环境启动脚手架"><a href="#第三步，尝试在开发环境启动脚手架" class="headerlink" title="第三步，尝试在开发环境启动脚手架"></a>第三步，尝试在开发环境启动脚手架</h2><ul><li><p>首先启动后端项目</p></li><li><p>然后启动前端项目</p></li></ul><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926101502086.png" alt="image-20240926101502086"></p><ul><li>此时是可以进入到主页的（如果主页是空白的，啥都没有，可能是缓存的影响，清理一下即可。）</li></ul><h2 id="进入某一节点，页面加载不出来"><a href="#进入某一节点，页面加载不出来" class="headerlink" title="进入某一节点，页面加载不出来"></a>进入某一节点，页面加载不出来</h2><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20240926101821786.png" alt="image-20240926101821786"></p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010163615953.png" alt="image-20241010163615953"></p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010163700194.png" alt="image-20241010163700194"></p><ul><li>补上 &#x2F;nccloud&#x2F;resources 之后，页面可以正常显示了。</li><li>但是，这样子，前端的资源用的是home里的文件，我们希望  用我们脚手架里的文件，那么还是要去掉这个</li></ul><h3 id="缺少文件"><a href="#缺少文件" class="headerlink" title="缺少文件"></a>缺少文件</h3><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010164450224.png" alt="image-20241010164450224"></p><p>检查控制台里面报 404的地方，去home把相应的文件夹复制到前端脚手架里面。</p><h2 id="编译路径不全"><a href="#编译路径不全" class="headerlink" title="编译路径不全"></a>编译路径不全</h2><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010171503547.png" alt="image-20241010171503547"></p><ul><li>看到这一堆的报错，Uncaught SyntaxError: Cannot use import statement outside a module ， 点击 index.js:2:1 进入到代码界面</li></ul><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010171607882.png" alt="image-20241010171607882"></p><p>看到是  ic&#x2F;ic&#x2F;components&#x2F;模块下的这些组件报的错误，然后我们的工程里面是源码，并不是编译后的代码，那么可能就是在别的地方用到了这些组件，但是脚手架的源码没有编译导致的。</p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010171746542.png" alt="image-20241010171746542"></p><p>在 config.json中配置好编译路径之后，再重启。</p><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010172005808.png" alt="image-20241010172005808"></p><h2 id="为什么代码不走脚手架，而是走的home里面的代码"><a href="#为什么代码不走脚手架，而是走的home里面的代码" class="headerlink" title="为什么代码不走脚手架，而是走的home里面的代码"></a>为什么代码不走脚手架，而是走的home里面的代码</h2><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010172221279.png" alt="image-20241010172221279"></p><h3 id="还有一种情况"><a href="#还有一种情况" class="headerlink" title="还有一种情况"></a>还有一种情况</h3><p><img src="/2024/09/26/240911/%E7%BD%97%E6%85%95%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E8%BF%90%E8%A1%8C/image-20241010173817704.png" alt="image-20241010173817704"></p><p>在脚手架的配置中，将这里 补上  &#x2F;nccloud&#x2F;resources 之后，会优先走脚手架的代码！！！！</p><p>此时，前端页面，审查元素之后，路径就算带有 &#x2F;nccloud&#x2F;resources&#x2F;**** 也会优先走 脚手架里面的代码！！！</p><p>去掉后反而无法加载页面了！</p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCC配置审批流与工作流</title>
      <link href="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
      <url>/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="NCC配置审批流和工作流"><a href="#NCC配置审批流和工作流" class="headerlink" title="NCC配置审批流和工作流"></a>NCC配置审批流和工作流</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914134908752.png" alt="image-20240914134908752"></p><h2 id="审批流配置"><a href="#审批流配置" class="headerlink" title="审批流配置"></a>审批流配置</h2><h3 id="新增交易类型"><a href="#新增交易类型" class="headerlink" title="新增交易类型"></a>新增交易类型</h3><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914135611011.png" alt="image-20240914135611011"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914140235761.png" alt="image-20240914140235761"></p><h4 id="可能会遇到的报错"><a href="#可能会遇到的报错" class="headerlink" title="可能会遇到的报错"></a>可能会遇到的报错</h4><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914140334683.png" alt="image-20240914140334683"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914140545331.png" alt="image-20240914140545331"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914140822523.png" alt="image-20240914140822523"></p><h3 id="审批流定义"><a href="#审批流定义" class="headerlink" title="审批流定义"></a>审批流定义</h3><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914141159488.png" alt="image-20240914141159488"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914142514630.png" alt="image-20240914142514630"></p><h4 id="制单人"><a href="#制单人" class="headerlink" title="制单人"></a>制单人</h4><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914141437265.png" alt="image-20240914141437265"></p><h4 id="人工活动1—-gt-设置为某一具体操作员"><a href="#人工活动1—-gt-设置为某一具体操作员" class="headerlink" title="人工活动1—&gt;设置为某一具体操作员"></a>人工活动1—&gt;设置为某一具体操作员</h4><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914142016032.png" alt="image-20240914142016032"></p><h4 id="人工活动2—-gt-设置为某一角色—-gt-抢占式审批，有一个人审批其他人不用审批了。"><a href="#人工活动2—-gt-设置为某一角色—-gt-抢占式审批，有一个人审批其他人不用审批了。" class="headerlink" title="人工活动2—&gt;设置为某一角色—&gt;抢占式审批，有一个人审批其他人不用审批了。"></a>人工活动2—&gt;设置为某一角色—&gt;抢占式审批，有一个人审批其他人不用审批了。</h4><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914142500139.png" alt="image-20240914142500139"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914142555680.png" alt="image-20240914142555680"></p><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><ul><li><strong>交易类型选择我们刚才建立的  ZHT有审批流类型，然后保存提交，是会走审批流的，我们也能在审批详情里看到进度。</strong></li></ul><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914142807298.png" alt="image-20240914142807298"></p><ul><li><strong>审批中心也能看到单据的详情</strong></li></ul><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914143547360.png" alt="image-20240914143547360"></p><ul><li><strong>交易类型选择  ZHT无审批流类型，则不会走审批流，单据提交后直接变成审批通过的状态。</strong></li></ul><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914143005444.png" alt="image-20240914143005444"></p><hr><h2 id="工作流配置"><a href="#工作流配置" class="headerlink" title="工作流配置"></a>工作流配置</h2><ul><li>什么是工作流 ？ 在ncc中一般指  <strong>业务流程定义</strong>  指一张单据可以推单拉单，由上游单据生成下游单据的过程。</li></ul><h3 id="修改单据动作"><a href="#修改单据动作" class="headerlink" title="修改单据动作"></a>修改单据动作</h3><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914144610706.png" alt="image-20240914144610706"></p><h3 id="配置单据类型"><a href="#配置单据类型" class="headerlink" title="配置单据类型"></a>配置单据类型</h3><ul><li><strong>来到 单据类型管理节点，找到我们的单据类型</strong></li></ul><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914144841559.png" alt="image-20240914144841559"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914145159495.png" alt="image-20240914145159495"></p><h3 id="新建业务流程定义"><a href="#新建业务流程定义" class="headerlink" title="新建业务流程定义"></a>新建业务流程定义</h3><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914151109335.png" alt="image-20240914151109335"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914151211606.png" alt="image-20240914151211606"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914151315279.png" alt="image-20240914151315279"></p><ul><li><strong>配置好后启用即可。</strong></li></ul><h3 id="设置单据转换规则"><a href="#设置单据转换规则" class="headerlink" title="设置单据转换规则"></a>设置单据转换规则</h3><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914151526581.png" alt="image-20240914151526581"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914151639494.png" alt="image-20240914151639494"></p><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240914151650971.png" alt="image-20240914151650971"></p><ul><li>赋值，可以设置默认值</li><li>映射，两种单据的字段之间相互映射</li><li>公式，设置显示公式</li><li>清空</li></ul><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul><li>这里遇到一个问题，通过上游单据审批生成下游单据的时候， 下游单据的单据号不会自动生成。</li><li>如果在单据转换规则里面做了映射，就会把上游单据的单据号映射给下游单据，这不符合要求。</li><li>第二个问题是，设置的单据动作是，审批后生成下游单据，但是如果有审批流且有多人审批的情况，则或重复生成下游单据。</li></ul><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240917170626493.png" alt="image-20240917170626493"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>配置一个水平产品交换后处理类，手动赋值  单据号，并且判断审批状态是否为审批通过，只有最后一个审批人审批通过后才会生成下游单据。</li></ul><p><img src="/2024/09/14/240911/NCC%E9%85%8D%E7%BD%AE%E5%AE%A1%E6%89%B9%E6%B5%81%E4%B8%8E%E5%B7%A5%E4%BD%9C%E6%B5%81/image-20240917164632527.png" alt="image-20240917164632527"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nc.hk.pub.billprocess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ArrayUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.InvocationInfoProxy;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.NCLocator;</span><br><span class="line"><span class="keyword">import</span> nc.pub.billcode.itf.IBillcodeManage;</span><br><span class="line"><span class="keyword">import</span> nc.pub.billcode.vo.BillCodeContext;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pf.change.ChangeVOAdjustContext;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pf.change.IChangeVOAdjust;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.AggregatedValueObject;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.BusinessException;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.SuperVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.zhtmk.ZhtEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhtBillCodeGenerateHandler</span> <span class="keyword">implements</span> <span class="title class_">IChangeVOAdjust</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AggregatedValueObject <span class="title function_">adjustAfterChange</span><span class="params">(AggregatedValueObject p0, AggregatedValueObject p1,</span></span><br><span class="line"><span class="params">ChangeVOAdjustContext p2)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AggregatedValueObject <span class="title function_">adjustBeforeChange</span><span class="params">(AggregatedValueObject p0, ChangeVOAdjustContext p1)</span></span><br><span class="line"><span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AggregatedValueObject[] batchAdjustAfterChange(AggregatedValueObject[] p0, AggregatedValueObject[] p1,</span><br><span class="line">ChangeVOAdjustContext p2) <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="comment">//1.只有最后一个审批人审批通过时才会生成下游单据</span></span><br><span class="line"><span class="keyword">for</span> (AggregatedValueObject zhtMetaDatavo : p0) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) zhtMetaDatavo.getParentVO().getAttributeValue(<span class="string">&quot;approvestatus&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> != status) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重新设置下游单据单据号</span></span><br><span class="line"><span class="keyword">for</span> (AggregatedValueObject entivo : p1) &#123;</span><br><span class="line"><span class="type">ZhtEntity</span> <span class="variable">parentVO</span> <span class="operator">=</span> (ZhtEntity) entivo.getParentVO();</span><br><span class="line">setBillCode(parentVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存前处理编码规则</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vos</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setBillCode</span><span class="params">(ZhtEntity... vos)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (ArrayUtils.isNotEmpty(vos)) &#123;</span><br><span class="line"><span class="keyword">for</span> (ZhtEntity vo : vos) &#123;</span><br><span class="line"><span class="type">BillCodeContext</span> <span class="variable">billCodeContext</span> <span class="operator">=</span> getBillCodeContext(<span class="string">&quot;zhtmkzhtEntity&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_group</span> <span class="operator">=</span> InvocationInfoProxy.getInstance().getGroupId();</span><br><span class="line"><span class="keyword">if</span> (billCodeContext != <span class="literal">null</span> &amp;&amp; !billCodeContext.isPrecode()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> getBillcodeManage().getBillCode_RequiresNew(<span class="string">&quot;zhtmkzhtEntity&quot;</span>, pk_group, pk_group,</span><br><span class="line">getMainVO(vo));</span><br><span class="line">getMainVO(vo).setAttributeValue(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">getMainVO(vo).setAttributeValue(<span class="string">&quot;billno&quot;</span>, code);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> SuperVO <span class="title function_">getMainVO</span><span class="params">(Object vo)</span> &#123;</span><br><span class="line"><span class="type">SuperVO</span> <span class="variable">parentVO</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (vo <span class="keyword">instanceof</span> SuperVO) &#123;</span><br><span class="line">parentVO = (SuperVO) vo;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (vo <span class="keyword">instanceof</span> AggregatedValueObject) &#123;</span><br><span class="line">parentVO = (SuperVO) ((AggregatedValueObject) vo).getParentVO();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;vo type illegal ,must be supervo or aggvo!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parentVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> BillCodeContext <span class="title function_">getBillCodeContext</span><span class="params">(String coderuleid)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_group</span> <span class="operator">=</span> InvocationInfoProxy.getInstance().getGroupId();</span><br><span class="line"><span class="keyword">return</span> getBillcodeManage().getBillCodeContext(coderuleid, pk_group, pk_group);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> IBillcodeManage <span class="title function_">getBillcodeManage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (IBillcodeManage) NCLocator.getInstance().lookup(IBillcodeManage.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AggregatedValueObject[] batchAdjustBeforeChange(AggregatedValueObject[] p0, ChangeVOAdjustContext p1)</span><br><span class="line"><span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React路由</title>
      <link href="/2024/09/12/react241121/React%E8%B7%AF%E7%94%B1/"/>
      <url>/2024/09/12/react241121/React%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="React-中的-路由"><a href="#React-中的-路由" class="headerlink" title="React 中的 路由"></a>React 中的 路由</h1><h2 id="SPA应用"><a href="#SPA应用" class="headerlink" title="SPA应用"></a>SPA应用</h2><ul><li><p>SPA应用是指<strong>单页面应用</strong>，只有一个页面，只是不同的组件构成不同的页面效果。</p></li><li><p>点击页面的某处按钮或链接，<strong>不会发生页面跳转</strong>，只会<strong>局部刷新</strong>。</p></li><li><p>数据通过 ajax请求获取，在后端展现出来。</p></li></ul><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><ul><li><p><strong>原理：点击路由链接，引发导航栏地址的 path发生变化 。React监测到 导航栏路径发生变化，根据path 选择对应的组件挂载到页面上。</strong></p></li><li><p><strong>一个路由 对应一个映射关系：  key:value   key是 导航栏上的&#x2F;path ， value是一个组件</strong></p></li></ul><h2 id="React是如何检测到导航栏的-path发生变化的？"><a href="#React是如何检测到导航栏的-path发生变化的？" class="headerlink" title="React是如何检测到导航栏的  path发生变化的？"></a>React是如何检测到导航栏的  path发生变化的？</h2><ul><li>通过浏览器的历史记录。</li></ul><p><img src="/2024/09/12/react241121/React%E8%B7%AF%E7%94%B1/image-20240912174253178.png" alt="image-20240912174253178"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return push(&#x27;/test1&#x27;) &quot;</span>&gt;</span>push test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;push(&#x27;/test2&#x27;)&quot;</span>&gt;</span>push test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;replace(&#x27;/test3&#x27;)&quot;</span>&gt;</span>replace test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;back()&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span>= 回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;forword()&quot;</span>&gt;</span>前进 =<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!-- 想要操作历史记录对象，先要引入这个库 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/history/4.7.2/history.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let history = History.createBrowserHistory() //方法一，直接使用H5推出的history身上的API</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> history = <span class="title class_">History</span>.<span class="title function_">createHashHistory</span>() <span class="comment">//方法二，hash值（锚点）</span></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//这两种方式 本质上都是返回了一个  历史记录对象，各有优劣，哪个都可以。 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">push</span> (path) &#123; <span class="comment">// 将一个 path 推入栈中</span></span></span><br><span class="line"><span class="language-javascript">history.<span class="title function_">push</span>(path)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">replace</span> (path) &#123; <span class="comment">// 讲一个 path 代替栈中 目前处于栈顶的  path</span></span></span><br><span class="line"><span class="language-javascript">history.<span class="title function_">replace</span>(path)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">back</span>(<span class="params"></span>) &#123;  <span class="comment">//将当前栈顶 path出栈，即浏览器的返回</span></span></span><br><span class="line"><span class="language-javascript">history.<span class="title function_">goBack</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">forword</span>(<span class="params"></span>) &#123; <span class="comment">//将最近被出栈的path重新加入到 栈中，即浏览器的前进 //部分浏览器没有这个按钮。</span></span></span><br><span class="line"><span class="language-javascript">history.<span class="title function_">goForward</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">history.<span class="title function_">listen</span>(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123; <span class="comment">//通过这个方法，浏览器就能拿到当前导航栏上的path了。</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求路由路径变化了&#x27;</span>, location)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a>路由的基本使用</h2><ul><li>首先安装 组件库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i react-router-dom@5</span><br></pre></td></tr></table></figure><p>- </p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React使用Fetch发送请求</title>
      <link href="/2024/09/12/react241121/React%E4%BD%BF%E7%94%A8Fetch%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
      <url>/2024/09/12/react241121/React%E4%BD%BF%E7%94%A8Fetch%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Fetch发送请求"><a href="#使用Fetch发送请求" class="headerlink" title="使用Fetch发送请求"></a>使用Fetch发送请求</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><strong>fetch是react内置的XMLHttpRequest对象的替代方案，因此获取后台数据可以使用fetch、axios来替代ajax。</strong></li><li><strong>使用fetch时不需要安装，这是浏览器自带的函数</strong></li><li><strong>fetch 不常使用，它和axios 都是对于 XMLHttpRequest 的封装</strong></li></ul><h2 id="fetch的基本使用"><a href="#fetch的基本使用" class="headerlink" title="fetch的基本使用"></a>fetch的基本使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  fetch发送请求采用了关注分离的思想</span></span><br><span class="line"><span class="title function_">fetch</span>(url, [options]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>() <span class="comment">//res不是用户需要的数据，只是将本次请求发送成功与否的消息返回给客户端</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123; <span class="comment">//data是用户需要的响应数据，是服务器返回给客户端的数据,第二个then里面才是我们需要的数据</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="comment">//err是请求失败的信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li><p><strong>fetch的返回值是一个promise对象</strong></p></li><li><p><strong>[options]表示对象格式的参数，具体参数有：</strong></p><p><strong>①method: “HTTP请求方式”，默认是GET；</strong></p><p><strong>②body: “请求参数”，若发送的是json格式参数，则需要使用JSON.stringify({参数: 参数值})；</strong></p><p><strong>③headers: { ‘Content-Type’:参数值 }，可以设置响应头的信息，如果使用JSON数据格式，参数值可以设置为application&#x2F;json；</strong></p><p><strong>④credentials:参数默认为omit，忽略的意思，也就是不带cookie；same-origin，意思就是同源请求带cookie；include，表示无论跨域还是同源请求都会带cookie</strong></p></li></ol><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">search =<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//发送网络请求---使用fetch发送（未优化）</span></span><br><span class="line"> <span class="title function_">fetch</span>(<span class="string">`/api1/search/users2?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line"><span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//每一个then 中都要定义 成功的回调和失败的回调</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;联系服务器成功了&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;联系服务器失败了&#x27;</span>,error);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line"><span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据成功了&#x27;</span>,response);&#125;,</span><br><span class="line"><span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据失败了&#x27;</span>,error);&#125;</span><br><span class="line">) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的写法有些过于麻烦 可以优化为   使用 catch块 统一 接收报错信息</span></span><br><span class="line">                    <span class="comment">//发送网络请求---使用fetch发送（未优化）</span></span><br><span class="line"> <span class="title function_">fetch</span>(<span class="string">`/api1/search/users2?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>).<span class="title function_">then</span>(</span><br><span class="line"><span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">//每一个then 中都要定义 成功的回调和失败的回调</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;联系服务器成功了&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> response.<span class="title function_">json</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line"><span class="function"><span class="params">response</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据成功了&#x27;</span>,response);&#125;,</span><br><span class="line">).<span class="title function_">catch</span>(</span><br><span class="line">            <span class="function"><span class="params">error</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取数据失败了&#x27;</span>,error);&#125;</span><br><span class="line">         ) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 再进一步优化</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//发送网络请求---使用fetch发送（优化） 采用异步处理方式</span></span><br><span class="line">      search =<span class="title function_">async</span>()=&gt;&#123;  <span class="comment">//使用  await必须使用 async函数</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> response= <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api1/search/users2?q=<span class="subst">$&#123;keyWord&#125;</span>`</span>) <span class="comment">//返回了一个 pomise对象</span></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123; <span class="comment">//使用  try catch处理报错信息。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求出错&#x27;</span>,error);</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="关于关注分离思想"><a href="#关于关注分离思想" class="headerlink" title="关于关注分离思想"></a>关于关注分离思想</h2><ul><li><p><strong>是处理复杂性的一个原则。由于关注点混杂在一起会导致复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法</strong></p></li><li><p><strong>举一个例子，一个程序运行要经过 2 个阶段，如果不采用关注分离的思想，则我们要等程序执行结束后，才能知道程序运行成功还是失败！但是，如果发生了错误，究竟是在哪里发生了报错呢？阶段1？还是阶段2？，这我们就很难知道了。</strong></p></li><li><p><strong>若是采用了关注分离的思想，会是什么样子呢？ 程序阶段1执行之后，告知我们—&gt; 滴滴，阶段1执行完毕，没有错误！后面的每个阶段都像这样告知我们程序运行的状态，即便是发生了错误，我们也能清楚地知道是在哪个阶段出现了意外。此时我们对于程序的关注点就不仅在于程序运行后的结果，而是细化到了程序运行的每一个阶段，这就是关注分离。</strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React使用消息订阅发布实现组件间数据传递</title>
      <link href="/2024/09/11/react241121/React%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E9%97%B4%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
      <url>/2024/09/11/react241121/React%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E5%8F%91%E5%B8%83%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E9%97%B4%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h1 id="React使用消息订阅发布实现组件间数据传递"><a href="#React使用消息订阅发布实现组件间数据传递" class="headerlink" title="React使用消息订阅发布实现组件间数据传递"></a>React使用消息订阅发布实现组件间数据传递</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">React子组件传值父组件方式：子组件利用props调用父组件的自定义事件，即可实现传值。这种方式的局限性很大，如果我组件嵌套的很深，岂不是相当麻烦？</span><br><span class="line">组件之间可以通过  消息订阅和发布的方式实现数据的传递。</span><br></pre></td></tr></table></figure><h1 id="安装-Pubsub-js-库"><a href="#安装-Pubsub-js-库" class="headerlink" title="安装 Pubsub-js 库"></a>安装 Pubsub-js 库</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li><strong>在要使用的组件引入：import PubSub from ‘pubsub-js’</strong></li><li><strong>在父组件的componentWillMount钩子函数中订阅消息，要注意  this</strong></li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Bar</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Bar&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span>  <span class="comment">//订阅者和发布者都要引入这个库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">msg</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">componentWillMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 订阅消息</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="function">(<span class="params">msg,data</span>) =&gt;</span> &#123;   </span><br><span class="line">    <span class="comment">/* 订阅消息的，是数据的接受方  第一个参数 是 topic  第二个参数是 一个回调函数 */</span></span><br><span class="line">    <span class="comment">/* 当有组件发布了相同的  topic 主题的时候，会自动执行 订阅者的这个 回调函数。*/</span>    </span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">msg</span>:data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;msg&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Bar</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;&#125;&#125;&gt;</span>我是订阅的结果：&#123;msg&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>在子组件的自定义方法中发布消息：</strong></li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PubSub</span> <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  sendMsg = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 发布消息   发布消息的组件是 要把数据传递出去的一方</span></span><br><span class="line">    <span class="title class_">PubSub</span>.<span class="title function_">publish</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">`我是发布的随机数：<span class="subst">$&#123;<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">1000</span>)&#125;</span>`</span>)  </span><br><span class="line">   <span class="comment">/* 组件发布消息的时候，会传入一个 topic 参数（第一个参数），还传入需要传递的数据 （第二个参数） */</span>   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.sendMsg&#125;</span>&gt;</span>发布消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用React搭建一个登录页面</title>
      <link href="/2024/09/11/react241121/%E4%BD%BF%E7%94%A8React%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
      <url>/2024/09/11/react241121/%E4%BD%BF%E7%94%A8React%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="使用React-Antd-写一个登录页面"><a href="#使用React-Antd-写一个登录页面" class="headerlink" title="使用React+Antd 写一个登录页面"></a>使用React+Antd 写一个登录页面</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2024/09/11/react241121/%E4%BD%BF%E7%94%A8React%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/image-20240911155337763.png" alt="image-20240911155337763"></p><p><img src="/2024/09/11/react241121/%E4%BD%BF%E7%94%A8React%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/image-20240911155348046.png" alt="image-20240911155348046"></p><h2 id="新建组件"><a href="#新建组件" class="headerlink" title="新建组件"></a>新建组件</h2><ul><li><strong>注意组件的首字母大写，不然React识别不出来！</strong></li></ul><p><img src="/2024/09/11/react241121/%E4%BD%BF%E7%94%A8React%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/image-20240911155544044.png" alt="image-20240911155544044"></p><h2 id="index-js代码"><a href="#index-js代码" class="headerlink" title="index.js代码"></a>index.js代码</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LockOutlined</span>, <span class="title class_">UserOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/icons&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Checkbox</span>, <span class="title class_">Form</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginPage</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleUsernameChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">username</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handlePasswordChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">password</span>: e.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Username:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">username</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Password:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">password</span>);</span><br><span class="line">    <span class="comment">// 添加登录逻辑</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onFinish</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received values of form: &#x27;</span>, e);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> =<span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;login-box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">className</span>=<span class="string">&quot;login-contain&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">legend</span> <span class="attr">className</span>=<span class="string">&quot;legends&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">name</span>=<span class="string">&quot;normal_login&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">className</span>=<span class="string">&quot;login-form&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">initialValues</span>=<span class="string">&#123;&#123;</span> <span class="attr">remember:</span> <span class="attr">true</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onFinish</span>=<span class="string">&#123;onFinish&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &#x27;<span class="attr">Please</span> <span class="attr">input</span> <span class="attr">your</span> <span class="attr">Username</span>!&#x27; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  &gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Input</span> <span class="attr">prefix</span>=<span class="string">&#123;</span>&lt;<span class="attr">UserOutlined</span> <span class="attr">className</span>=<span class="string">&quot;site-form-item-icon&quot;</span> /&gt;</span>&#125; placeholder=&quot;Username&quot; /&gt;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                      <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &#x27;<span class="attr">Please</span> <span class="attr">input</span> <span class="attr">your</span> <span class="attr">Password</span>!&#x27; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  &gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                          <span class="attr">prefix</span>=<span class="string">&#123;</span>&lt;<span class="attr">LockOutlined</span> <span class="attr">className</span>=<span class="string">&quot;site-form-item-icon&quot;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">                          type=&quot;password&quot;</span></span><br><span class="line"><span class="language-xml">                          placeholder=&quot;Password&quot;</span></span><br><span class="line"><span class="language-xml">                      /&gt;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">valuePropName</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">noStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                          <span class="tag">&lt;<span class="name">Checkbox</span>&gt;</span>记住密码<span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      &#123;/* eslint-disable-next-line jsx-a11y/anchor-is-valid */&#125;</span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;login-form-forgot&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                          跳转主页</span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">className</span>=<span class="string">&quot;login-form-button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                          登录</span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LoginPage</span>;</span><br></pre></td></tr></table></figure><h2 id="index-css代码"><a href="#index-css代码" class="headerlink" title="index.css代码"></a>index.css代码</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>; </span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>; <span class="comment">/* Magic here */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../../../../public/bk1.jpg&#x27;</span>);</span><br><span class="line">    <span class="comment">/* background-color:  rgba(255, 255, 255, 0.5); */</span></span><br><span class="line">    <span class="comment">/* opacity: 0.6; */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-box</span>&#123;</span><br><span class="line">    <span class="comment">/* border-radius 属性用于设置元素的边框圆角的大小。它接受一个或多个长度值或百分比值作为参数，分别表示圆角的半径。</span></span><br><span class="line"><span class="comment">       border-radius 属性接受四个值，按顺序表示左上角、右上角、右下角和左下角的圆角半径。 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>,<span class="number">15px</span>,<span class="number">0</span>,<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 外边距 */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">330px</span>;</span><br><span class="line">    <span class="comment">/* 内边距 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">35px</span> <span class="number">20px</span> <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ebf3ef</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ebf3ef</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">252</span>, <span class="number">252</span>, <span class="number">252</span>, <span class="number">0.05</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-contain</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ebf3ef</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ebf3ef</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.legends</span>&#123;</span><br><span class="line">    <span class="attribute">padding-top</span>:<span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>:<span class="number">30%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.legend</span> &#123;  </span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ebf3ef</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">122px</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ebf3ef</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ebf3ef</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form-forgot</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ant-col-rtl</span> <span class="selector-class">.login-form-forgot</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form-button</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">156</span>, <span class="number">78</span>) ;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">156</span>, <span class="number">78</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form-button</span><span class="selector-pseudo">:focus</span> &#123;  <span class="comment">/*设置按钮的边框和颜色*/</span></span><br><span class="line">    <span class="attribute">border</span>:<span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">156</span>, <span class="number">78</span>) ;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">156</span>, <span class="number">78</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.login-form-button</span><span class="selector-pseudo">:hover</span> &#123; <span class="comment">/*光标移动到按钮时，设置按钮的边框和颜色*/</span></span><br><span class="line">    <span class="attribute">border</span>:<span class="built_in">rgb</span>(<span class="number">18</span>, <span class="number">156</span>, <span class="number">78</span>) ;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">46</span>, <span class="number">240</span>, <span class="number">130</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装并引入-antd"><a href="#安装并引入-antd" class="headerlink" title="安装并引入  antd"></a>安装并引入  antd</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.安装antd</span><br><span class="line"> yarn add antd</span><br><span class="line">2.安装@ant-design/icons</span><br><span class="line"> yarn add @ant-design/icons</span><br><span class="line">3.全局样式，在src/index.css首行新增</span><br><span class="line"> @import <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">1. npm install antd@^4.24.2</span><br><span class="line">2. npm install @ant-design/icons</span><br><span class="line">3. 全局样式，在src/index.css首行新增  @import <span class="string">&#x27;~antd/dist/antd.css&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows切换Node版本</title>
      <link href="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/"/>
      <url>/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Window系统自由切换Node版本"><a href="#Window系统自由切换Node版本" class="headerlink" title="Window系统自由切换Node版本"></a>Window系统自由切换Node版本</h1><ul><li>有一种方式可以免重新配置node的环境变量，借助于一个  node管理工具  –&gt;   nvm（Node Version Manager）</li></ul><h2 id="nvm概述及下载"><a href="#nvm概述及下载" class="headerlink" title="nvm概述及下载"></a>nvm概述及下载</h2><p>Node.js支持多版本共存，有多种方式切换Node.js版本。</p><p>其中最简单、最基本的切换方式就是使用Node.js官方工具-nvm（Node Version Manager），它可以在同一台电脑上轻松管理和切换多个Node.js版本。</p><p>nvm是一个跨平台的命令行工具，可以在Mac、Linux、Windows等各种操作系统上使用。</p><p>nvm下载地址：<a href="https://github.com/coreybutler/nvm-windows/">https://github.com/coreybutler/nvm-windows/</a></p><h2 id="下载安装-nvm"><a href="#下载安装-nvm" class="headerlink" title="下载安装  nvm"></a>下载安装  nvm</h2><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910110725380.png" alt="image-20240910110725380"></p><ul><li>下载后，安装，会提示，是否管理当前已有的  node版本，点击  是</li><li>安装后，打开 cmd</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm -v</span><br></pre></td></tr></table></figure><p>提示版本信息，则为成功！</p><ul><li>如果提示不出版本信息，检查是否配置了环境变量。理论上安装的时候会自动配置环境变量！！！</li></ul><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910111030802.png" alt="image-20240910111030802"></p><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910111056876.png" alt="image-20240910111056876"></p><h2 id="使用-nvm切换node版本"><a href="#使用-nvm切换node版本" class="headerlink" title="使用 nvm切换node版本"></a>使用 nvm切换node版本</h2><ul><li><strong>首先使用<code>nvm list available </code>命令可以查看电脑上可以安装的Node.js版本</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list available  </span><br></pre></td></tr></table></figure><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910111209979.png" alt="image-20240910111209979"></p><ul><li><strong>然后安装你要更换的的Node.js版本（可能要几分钟，请耐心等待，如果超过10分钟还没反应就管理员运行cmd重新安装）</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install xxxxx</span><br></pre></td></tr></table></figure><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910111323171.png" alt="image-20240910111323171"></p><ul><li><strong>如果出现<code>successfully</code>就是安装新版本安装成功了，现在你可以使用nvm更换Node.js版本了</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use 18.17.0</span><br></pre></td></tr></table></figure><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910111424521.png" alt="image-20240910111424521"></p><ul><li><strong>你还可以查看此时你电脑上的node版本有哪些本nvm管理了</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240910111448123.png" alt="image-20240910111448123"></p><h1 id="使用-cnmp-切换-npm的版本"><a href="#使用-cnmp-切换-npm的版本" class="headerlink" title="使用 cnmp 切换 npm的版本"></a>使用 cnmp 切换 npm的版本</h1><ul><li>只切换 node的版本 有时候是不行的，因为 npm 和 node 一般是配套使用的，如果npm的版本不对的话是无法执行命令的。</li><li>管理 npm的一个库 是  cnpm</li></ul><h2 id="安装cnmp"><a href="#安装cnmp" class="headerlink" title="安装cnmp"></a>安装cnmp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm  //如果你因为切换了node版本导致  npm命令已经无法使用了，请先切换回来，先安装cnmp</span><br></pre></td></tr></table></figure><h2 id="查看-cnmp镜像"><a href="#查看-cnmp镜像" class="headerlink" title="查看 cnmp镜像"></a>查看 cnmp镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm config get registry</span><br></pre></td></tr></table></figure><p><strong>如果不是 <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a> 的话就修改一下镜像源，淘宝镜像源下载的快一些，降低因为下载慢报错的几率：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="然后我们需要使用-cnpm-和淘宝镜像对-npm-进行升级-x2F-降级操作："><a href="#然后我们需要使用-cnpm-和淘宝镜像对-npm-进行升级-x2F-降级操作：" class="headerlink" title="然后我们需要使用 cnpm 和淘宝镜像对 npm 进行升级&#x2F;降级操作："></a>然后我们需要使用 cnpm 和淘宝镜像对 npm 进行升级&#x2F;降级操作：</h2><ul><li>首先，C:\Users\Administrator\AppData\Roaming ，这个目录下的  npm目录 和 npm-cache目录先删除掉！</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install npm@8.19.2 -g</span><br></pre></td></tr></table></figure><h2 id="node-和-npm-版本对应关系"><a href="#node-和-npm-版本对应关系" class="headerlink" title="node  和 npm 版本对应关系"></a>node  和 npm 版本对应关系</h2><p>官网链接：<a href="https://nodejs.org/zh-cn/download/releases/?spm=a2c6h.12873639.article-detail.7.41b47444Lpbriw">https://nodejs.org/zh-cn/download/releases/</a></p><p><img src="/2024/09/10/240827/Windows%E5%88%87%E6%8D%A2Node%E7%89%88%E6%9C%AC/image-20240925141231572.png" alt="image-20240925141231572"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端vscode下载依赖报错</title>
      <link href="/2024/09/10/240827/%E5%89%8D%E7%AB%AFvscode%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99/"/>
      <url>/2024/09/10/240827/%E5%89%8D%E7%AB%AFvscode%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="npm-run-install-报错"><a href="#npm-run-install-报错" class="headerlink" title="npm run install 报错"></a>npm run install 报错</h1><p><strong>报错信息:</strong></p><p><strong>This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I’ll try to do my best with it!</strong></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm版本跟你引入的包版本不同，</span><br><span class="line">需要升级 或 降级，看依赖的包是低版本还是高版本，</span><br><span class="line">从我的报错可以看出npm适合于lockfileVersion@1的，但是package-lock.json是源于lockfileVersion@2的。因为代码中使用的某个包只能用特定版本的npm        下载，所以会报错导致npm install失败。这时就需要升级一下npm。</span><br></pre></td></tr></table></figure><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="升级npm"><a href="#升级npm" class="headerlink" title="升级npm"></a>升级npm</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><h3 id="降级npm"><a href="#降级npm" class="headerlink" title="降级npm"></a>降级npm</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo npm install npm@降级版本号 -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCC前台页面响应报文乱码</title>
      <link href="/2024/09/10/240827/NCC%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2024/09/10/240827/NCC%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="NCC前台页面响应报文乱码"><a href="#NCC前台页面响应报文乱码" class="headerlink" title="NCC前台页面响应报文乱码"></a>NCC前台页面响应报文乱码</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p><img src="/2024/09/10/240827/NCC%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B9%B1%E7%A0%81/image-20240910093542143.png" alt="image-20240910093542143"></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p><img src="/2024/09/10/240827/NCC%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B9%B1%E7%A0%81/image-20240910093644470.png" alt="image-20240910093644470"></p><h2 id="已解决"><a href="#已解决" class="headerlink" title="已解决"></a>已解决</h2><p><img src="/2024/09/10/240827/NCC%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E4%B9%B1%E7%A0%81/image-20240910093705762.png" alt="image-20240910093705762"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树表型参照开发</title>
      <link href="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/"/>
      <url>/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树表型参照开发"><a href="#树表型参照开发" class="headerlink" title="树表型参照开发"></a>树表型参照开发</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240906105045807.png" alt="image-20240906105045807"></p><h2 id="第一步，去前端新建一个组件，并渲染到目标页面上"><a href="#第一步，去前端新建一个组件，并渲染到目标页面上" class="headerlink" title="第一步，去前端新建一个组件，并渲染到目标页面上"></a>第一步，去前端新建一个组件，并渲染到目标页面上</h2><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908185817633.png" alt="image-20240908185817633"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;high&#125; <span class="keyword">from</span> <span class="string">&#x27;nc-lightapp-front&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">Refer</span>&#125; = high;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> conf = &#123;</span><br><span class="line">        <span class="attr">multiLang</span>: &#123;  <span class="comment">//引入多语文件</span></span><br><span class="line">            <span class="attr">domainName</span>: <span class="string">&#x27;zhtmk&#x27;</span>,   <span class="comment">//模块名</span></span><br><span class="line">            <span class="attr">currentLocale</span>: <span class="string">&#x27;zh-CN&#x27;</span>,  <span class="comment">//默认不变</span></span><br><span class="line">            <span class="attr">moduleId</span>: <span class="string">&#x27;zhtGridRef&#x27;</span>,  <span class="comment">//多语文件名 ，新建在 public目录下的一个  .json文件。一定要写在 public目录下面</span></span><br><span class="line">        &#125;,</span><br><span class="line">    </span><br><span class="line">        <span class="attr">refCode</span>: <span class="string">&#x27;uapbd.address.AddrDocGridTreeRef&#x27;</span>,  <span class="comment">//暂时未知！！！！！</span></span><br><span class="line">        <span class="attr">queryTreeUrl</span>: <span class="string">&#x27;/nccloud/uapbd/ref/AreaclTreeRef.do&#x27;</span>,  <span class="comment">//树形参照查询路径</span></span><br><span class="line">        <span class="attr">rootNode</span>: &#123; <span class="attr">refname</span>: <span class="string">&#x27;地区分类&#x27;</span>, <span class="attr">refpk</span>: <span class="string">&#x27;root&#x27;</span>&#125;,  <span class="comment">//树形参照根节点</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">refType</span>: <span class="string">&#x27;gridTree&#x27;</span>,  <span class="comment">// 参照类型  树表型参照  </span></span><br><span class="line">        <span class="attr">refName</span>: <span class="string">&#x27;zht资质审批单新参照&#x27;</span>,  <span class="comment">//参照的名称</span></span><br><span class="line">        <span class="attr">placeholder</span>: <span class="string">&#x27;zht资质审批单新参照&#x27;</span>,  <span class="comment">//参照文本框内的提示词</span></span><br><span class="line">        <span class="comment">// treeConfig: [&#123;name: [&#x27;编码&#x27;, &#x27;名称&#x27;], code: [&#x27;refcode&#x27;, &#x27;refname&#x27;]&#125;],</span></span><br><span class="line">        <span class="attr">columnConfig</span>: [&#123;<span class="attr">name</span>: [<span class="string">&#x27;目标组织&#x27;</span>, <span class="string">&#x27;经销商编码&#x27;</span>,<span class="string">&#x27;经销商名称&#x27;</span>,<span class="string">&#x27;经销商简称&#x27;</span>,<span class="string">&#x27;对应客户名称&#x27;</span>], <span class="attr">code</span>: [<span class="string">&#x27;targetorg&#x27;</span>, <span class="string">&#x27;supcode&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;shortname&#x27;</span>,<span class="string">&#x27;customername&#x27;</span>]&#125;],   <span class="comment">//表型参照的   列名设置</span></span><br><span class="line">        <span class="attr">queryGridUrl</span>: <span class="string">&#x27;/nccloud/zhtmk/zhtEntity/ZhtSingleGridRefAction.do&#x27;</span>,  <span class="comment">//表型参照查询路径</span></span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Refer</span> &#123;<span class="attr">...conf</span>&#125; &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908190700403.png" alt="image-20240908190700403"></p><ul><li>新建完组件之后，将组件放在页面上，点击查看效果。</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908191156742.png" alt="image-20240908191156742"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908191205622.png" alt="image-20240908191205622"></p><p><strong>去页面上看下效果，正常来说前端页面上就可以看到一个空白的可点击的参照类型的文本框，尝试点击，但是会报错，因为没写后端action</strong></p><h2 id="第二步，新建后端action类和-配置文件"><a href="#第二步，新建后端action类和-配置文件" class="headerlink" title="第二步，新建后端action类和  配置文件"></a>第二步，新建后端action类和  配置文件</h2><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908203902320.png" alt="image-20240908203902320"></p><h3 id="后端action类"><a href="#后端action类" class="headerlink" title="后端action类"></a>后端action类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nccloud.hk.zhtmk.zhtentity.singlegridref.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> nc.bs.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> nc.itf.org.IOrgResourceCodeConst;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.BusinessException;</span><br><span class="line"><span class="keyword">import</span> nccloud.framework.web.processor.refgrid.RefQueryInfo;</span><br><span class="line"><span class="keyword">import</span> nccloud.framework.web.processor.reftree.TreeRefQueryInfo;</span><br><span class="line"><span class="keyword">import</span> nccloud.framework.web.ui.meta.RefMeta;</span><br><span class="line"><span class="keyword">import</span> nccloud.pubitf.baseapp.apprbac.IAppAndOrgPermQueryPubService;</span><br><span class="line"><span class="keyword">import</span> nccloud.web.refer.DefaultGridRefAction;</span><br><span class="line"><span class="keyword">import</span> nccloud.framework.service.ServiceLocator;</span><br><span class="line"><span class="keyword">import</span> nccloud.framework.web.container.SessionContext;</span><br><span class="line"><span class="keyword">import</span> nccloud.commons.lang.ArrayUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树表类型的继承  DefaultGridRefAction</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhtSingleGridQueryAction</span> <span class="keyword">extends</span> <span class="title class_">DefaultGridRefAction</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RefMeta <span class="title function_">getRefMeta</span><span class="params">(RefQueryInfo refQueryInfo)</span> &#123;</span><br><span class="line"><span class="type">RefMeta</span> <span class="variable">refMeta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefMeta</span>();</span><br><span class="line">setResourceCode(IOrgResourceCodeConst.ORG);</span><br><span class="line">refMeta.setCodeField(<span class="string">&quot;supcode&quot;</span>);</span><br><span class="line">refMeta.setNameField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">refMeta.setPkField(<span class="string">&quot;pk_zhttable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; (select z.pk_zhttable,&quot;</span> + <span class="string">&quot;z.supcode supcode,&quot;</span> + <span class="string">&quot;z.name name,&quot;</span> + <span class="string">&quot;z.shortname shortname,&quot;</span></span><br><span class="line">+ <span class="string">&quot;z.iscustomer iscustomer,&quot;</span> + <span class="string">&quot;z.customer customer,&quot;</span> + <span class="string">&quot;a.pk_areacl pk_areacl,&quot;</span>+<span class="string">&quot;z.pk_org pk_org,&quot;</span></span><br><span class="line">+ <span class="string">&quot; z.countryzone countryzone,&quot;</span></span><br><span class="line">+ <span class="string">&quot; CASE WHEN z.targetorg = 0 THEN &#x27;本组织&#x27;  WHEN z.targetorg = 1 THEN &#x27;集团&#x27; ELSE &#x27;全局&#x27; END AS targetorg,&quot;</span></span><br><span class="line">+ <span class="string">&quot;c.name customername,&quot;</span> + <span class="string">&quot;a.name countryzonename &quot;</span> + <span class="string">&quot;from zhtmk_zhtentity z &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; inner join bd_customer c on z.customer = c.pk_customer &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; inner join bd_areacl a on a.pk_areacl = z.countryzone &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; where z.dr = &#x27;0&#x27; and z.iscustomer = &#x27;Y&#x27;) singletable &quot;</span>);</span><br><span class="line"></span><br><span class="line">refMeta.setTableName(buf.toString());</span><br><span class="line">refMeta.setExtraFields(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;targetorg&quot;</span>, <span class="string">&quot;shortname&quot;</span>, <span class="string">&quot;customername&quot;</span> &#125;);</span><br><span class="line">refMeta.setMutilLangNameRef(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">return</span> refMeta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getExtraSql</span><span class="params">(RefQueryInfo refQueryInfo, RefMeta refMeta)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;  &quot;</span>;</span><br><span class="line">Map&lt;String, String&gt; queryCondition = refQueryInfo.getQueryCondition();</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_areacl</span> <span class="operator">=</span> ((TreeRefQueryInfo) refQueryInfo).getPid();</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNotBlank(pk_areacl)) &#123;</span><br><span class="line">sql = <span class="string">&quot; and pk_areacl =  &#x27;&quot;</span> + pk_areacl + <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_org</span> <span class="operator">=</span> queryCondition.get(<span class="string">&quot;pk_org&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(pk_org)) &#123;</span><br><span class="line">sql = sql + <span class="string">&quot; and pk_org = &#x27;&quot;</span> + pk_org + <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件和鉴权文件"><a href="#配置文件和鉴权文件" class="headerlink" title="配置文件和鉴权文件"></a>配置文件和鉴权文件</h3><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908204543493.png" alt="image-20240908204543493"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908204602547.png" alt="image-20240908204602547"></p><ul><li>此时，参照就可以正确显示出来了。</li></ul><h2 id="第三步，为元数据新增-一个字段作为参照字段"><a href="#第三步，为元数据新增-一个字段作为参照字段" class="headerlink" title="第三步，为元数据新增 一个字段作为参照字段"></a>第三步，为元数据新增 一个字段作为参照字段</h2><ul><li>注意，这里需要增加一个字段，是你需要去引用新创建的参照的那个元数据。</li><li>A 是创建元数据的实体，B是引用元数据A的实体，</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908210953352.png" alt="image-20240908210953352"></p><ul><li>接下来，就是，删除元数据，删除组件和数据库，重新发布和建库</li><li>登录集团管理员账号，到代码注册节点，下载源代码，重新走一遍流程，参考上一篇新建主子表。</li></ul><h2 id="第四步，执行sql脚本"><a href="#第四步，执行sql脚本" class="headerlink" title="第四步，执行sql脚本"></a>第四步，执行sql脚本</h2><ul><li>此时前台页面应该已经能看到我们新增的元数据了，但是我们点击后出不来东西！</li><li>到应用注册，找到页面模板设置</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908212157921.png" alt="image-20240908212157921"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908212225339.png" alt="image-20240908212225339"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> BD_REFINFO (</span><br><span class="line">&quot;CODE&quot;,</span><br><span class="line">&quot;DR&quot;,</span><br><span class="line">&quot;ISTREELAZYLOAD&quot;,</span><br><span class="line">&quot;ISNEEDPARA&quot;,</span><br><span class="line">&quot;ISSPECIALREF&quot;,</span><br><span class="line">&quot;LAYER&quot;,</span><br><span class="line">&quot;METADATANAMESPACE&quot;,</span><br><span class="line">&quot;METADATATYPENAME&quot;,</span><br><span class="line">&quot;MOBILEREFPATH&quot;,</span><br><span class="line">&quot;MODULENAME&quot;,</span><br><span class="line">&quot;NAME&quot;,</span><br><span class="line">&quot;PARA1&quot;,</span><br><span class="line">&quot;PARA2&quot;,</span><br><span class="line">&quot;PARA3&quot;,</span><br><span class="line">&quot;PK_COUNTRY&quot;,</span><br><span class="line">&quot;PK_INDUSTRY&quot;,</span><br><span class="line">&quot;PK_REFINFO&quot;,</span><br><span class="line">&quot;REFCLASS&quot;,</span><br><span class="line">&quot;REFPATH&quot;,</span><br><span class="line">&quot;REFSYSTEM&quot;,</span><br><span class="line">&quot;REFTYPE&quot;,</span><br><span class="line">&quot;RESERV1&quot;,</span><br><span class="line">&quot;RESERV2&quot;,</span><br><span class="line">&quot;RESERV3&quot;,</span><br><span class="line">&quot;RESID&quot;,</span><br><span class="line">&quot;RESIDPATH&quot;,</span><br><span class="line">&quot;TS&quot;,</span><br><span class="line">&quot;WHEREPART&quot;,</span><br><span class="line">&quot;WORKFLOWCONDITIONUSEUNITORG&quot; </span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(</span><br><span class="line"><span class="string">&#x27;94H10107&#x27;</span>,  <span class="comment">--无需改动</span></span><br><span class="line"><span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;N&#x27;</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="string">&#x27;zhtmk&#x27;</span>,   <span class="comment">--模块名</span></span><br><span class="line"><span class="string">&#x27;zhtEntity&#x27;</span>,  <span class="comment">--实体名</span></span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="string">&#x27;zhtmk&#x27;</span>,  <span class="comment">--模块名</span></span><br><span class="line"><span class="string">&#x27;azhtmk&#x27;</span>, <span class="comment">-- 这里叫做refmodulename，随便取名字</span></span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="string">&#x27;1001ZZ1LCP00000HUHSU&#x27;</span>,  <span class="comment">-- 主键，自己修改一下</span></span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="string">&#x27;zhtmk/refer/zhtentity/ZhtSingleGridRef/index&#x27;</span>,  <span class="comment">--元数据的前端路径，去 脚手架里面找</span></span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="string">&#x27;zhtEntity&#x27;</span>, <span class="comment">--实体名</span></span><br><span class="line"><span class="string">&#x27;zhtEntity&#x27;</span>, <span class="comment">-- 实体名</span></span><br><span class="line"><span class="string">&#x27;2024-09-08 15:04:40&#x27;</span>,</span><br><span class="line"><span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">NULL</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> md_class  <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%zht%&#x27;</span> <span class="comment">--  md_class中找到你创建参照的实体的 数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> md_class <span class="keyword">set</span> refmodelname <span class="operator">=</span><span class="string">&#x27;azhtmk&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;86235382-1862-471f-a02a-8825d9770136&#x27;</span> <span class="comment">-- 修改 refmodulename 和上面设置的保持一致</span></span><br></pre></td></tr></table></figure><ul><li>此时页面模板设置那里就可以参照到我们创建的元数据了。</li></ul><h2 id="第五步，设置过滤，根据地区分类（树形参照）和-销售组织（页面上的字段）对表形参照进行过滤"><a href="#第五步，设置过滤，根据地区分类（树形参照）和-销售组织（页面上的字段）对表形参照进行过滤" class="headerlink" title="第五步，设置过滤，根据地区分类（树形参照）和 销售组织（页面上的字段）对表形参照进行过滤"></a>第五步，设置过滤，根据地区分类（树形参照）和 销售组织（页面上的字段）对表形参照进行过滤</h2><ul><li>根据树形参照的条件过滤</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们用的树表参照，树形参照的主键值是可以传入到表参照的action里面的。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getExtraSql</span><span class="params">(RefQueryInfo refQueryInfo, RefMeta refMeta)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;  &quot;</span>;</span><br><span class="line">Map&lt;String, String&gt; queryCondition = refQueryInfo.getQueryCondition();</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_areacl</span> <span class="operator">=</span> ((TreeRefQueryInfo) refQueryInfo).getPid(); <span class="comment">//拿到表参照的属性值</span></span><br><span class="line"><span class="keyword">if</span>(StringUtils.isNotBlank(pk_areacl)) &#123;</span><br><span class="line">sql = <span class="string">&quot; and pk_areacl =  &#x27;&quot;</span> + pk_areacl + <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_org</span> <span class="operator">=</span> queryCondition.get(<span class="string">&quot;pk_org&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(pk_org)) &#123;</span><br><span class="line">sql = sql + <span class="string">&quot; and pk_org = &#x27;&quot;</span> + pk_org + <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据 页面上的销售组织字段进行过滤</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="comment">// 卡片表单区主组织字段添加权限过滤</span></span><br><span class="line">    meta[<span class="string">&#x27;ZhtMetaData_form&#x27;</span>].<span class="property">items</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> abc = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">form</span> ;</span><br><span class="line">            <span class="keyword">if</span> (item.<span class="property">attrcode</span> == <span class="string">&quot;pk_zhttable&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">debugger</span>;</span><br><span class="line">                item.<span class="property">queryCondition</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        pk_org : <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">form</span>.<span class="title function_">getFormItemsValue</span>(<span class="string">&#x27;ZhtMetaData_form&#x27;</span>, <span class="string">&#x27;pk_org&#x27;</span>).<span class="property">value</span>,</span><br><span class="line">                        <span class="title class_">TreeRefActionExt</span> : <span class="string">&#x27;nccloud.hk.zhtmk.zhtentity.singlegridref.action.ZhtSingleGridQueryAction&#x27;</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//这样写，页面上的pk_org在编辑后就能传入到表形参照的action里面。</span></span><br></pre></td></tr></table></figure><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908214649721.png" alt="image-20240908214649721"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908214846962.png" alt="image-20240908214846962"></p><h1 id="节点位置"><a href="#节点位置" class="headerlink" title="节点位置"></a>节点位置</h1><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908215037875.png" alt="image-20240908215037875"></p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908215106530.png" alt="image-20240908215106530"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908215155468.png" alt="image-20240908215155468"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908215300453.png" alt="image-20240908215300453"></p><h1 id="遇到的问题—-gt-处理办法"><a href="#遇到的问题—-gt-处理办法" class="headerlink" title="遇到的问题—&gt;处理办法"></a>遇到的问题—&gt;处理办法</h1><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><ul><li>进行组织过滤的时候，因为是树表参照，所以会走两遍这个类。第一遍的时候查询的是地区<br>分类这个表，且pid没有数值。如果直接按照组织进行过滤，不仅过滤了表型参照中的数据，<br>树型参照的数据也会进行过滤。<br><strong>解决办法：</strong><br>这里根据表名进行判断，如果是树型参照也就是地区分类这个表不进行过滤。只对表型数据<br>进行过滤。</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908215941759.png" alt="image-20240908215941759"></p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><ul><li>前台应用注册，设置模板时，新增参照字段的类型设置中，无法选择到自己创建的参照，是空白的。</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908220057749.png" alt="image-20240908220057749"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908220110147.png" alt="image-20240908220110147"></p><ul><li>解决办法：因为我采用的是在元数据实体上增加一个字段，来设置新参照的，不是启用自定义项来设置。所以系统在读取参照时的取值逻辑有些不同。</li><li>必须保证 bd_refinfo表和 md_class表，你的参照元数据的  refmodulename不能为空，且保持一致。</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908220915142.png" alt="image-20240908220915142"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240908220320193.png" alt="image-20240908220320193"></p><h3 id="详细说明下-问题二"><a href="#详细说明下-问题二" class="headerlink" title="详细说明下 问题二"></a>详细说明下 问题二</h3><ul><li><strong>问题二涉及到了一个字段   MD_CLASS中的  REFMODELNAME 字段，这个字段究竟有什么用处？</strong></li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912152517747.png" alt="image-20240912152517747"></p><ul><li><strong>从数据库表里面看，有的元数据它这里就是空的，而有的元数据这里则是有值，这是为什么？</strong></li></ul><h4 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h4><ul><li><p>我们先了解一件事情  —–&gt;  <strong>元数据和参照的关系是 一对应多 的 关系</strong></p></li><li><p>一个元数据  下是允许关联着多个 参照的。 这一点我们查询 md_class 表和 bd_refinfo表就能验证。</p></li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912153534729.png" alt="image-20240912153534729"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912153526923.png" alt="image-20240912153526923"></p><ul><li>第一张表是 md_class 表的查询结果，显示我们创建的一个元数据</li><li>第二张表是 bd_refinfo 表，在新建单表节点的时候，系统已经生成了两个参照，再加上我们新建的参照一共有 3 个。</li></ul><h4 id="第二，我们想在-页面模板上体现一个参照字段，有几种方式？"><a href="#第二，我们想在-页面模板上体现一个参照字段，有几种方式？" class="headerlink" title="第二，我们想在 页面模板上体现一个参照字段，有几种方式？"></a>第二，我们想在 页面模板上体现一个参照字段，有几种方式？</h4><ul><li>第一，选择一个自定义项，更改类型为 参照，并选择到我们想要设置的参照类型。</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912153916328.png" alt="image-20240912153916328"></p><ul><li><p>这里其实我们可以发现，自定义项字段的数据类型是动态的，我们可以随时修改的！！！！！</p></li><li><p>像其他参照字段比如，组织。它的数据类型是在元数据里面指定好的，是无法在页面模板上修改的。</p></li><li><p>第二 ， 修改元数据，在元数据上增加一个参照字段，类型选择我们想要设置的 参照类型。</p></li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912154858924.png" alt="image-20240912154858924"></p><ul><li><strong>修改元数据的方式，我们来看下模板上的字段</strong></li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912155032690.png" alt="image-20240912155032690"></p><p><strong>可以看到这里的 数据类型是固定为  参照 的，我们是无法在页面模板上去做修改的！！</strong></p><h4 id="第三，我们说明下，这两种设置页面参照字段的-获取参照类型的方式有何区别？"><a href="#第三，我们说明下，这两种设置页面参照字段的-获取参照类型的方式有何区别？" class="headerlink" title="第三，我们说明下，这两种设置页面参照字段的 获取参照类型的方式有何区别？"></a>第三，我们说明下，这两种设置页面参照字段的 获取参照类型的方式有何区别？</h4><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912155317367.png" alt="image-20240912155317367"></p><ul><li><strong>首先，我们先来看自定义项，在设置参照类型时的取值逻辑。</strong></li></ul><ol><li>nccloud.web.platform.template.action.QueryRefInfoAction</li></ol><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912155716033.png" alt="image-20240912155716033"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getRefInfos</span><span class="params">(String defdoc)</span> &#123;</span><br><span class="line">  List&lt;RefInfoVO&gt; defList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  RefInfoVO[] refs = getAllRefInfoVOs();  <span class="comment">// 在这里，拿到了  bd_refinfo表里面的所有参照类型</span></span><br><span class="line">  <span class="type">BaseDAO</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseDAO</span>();</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isNotEmpty(defdoc)) &#123;  <span class="comment">// ----------&gt;  这里是空，所以跳过</span></span><br><span class="line">      <span class="comment">//  下面代码跳过 ----------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;08aca301-1a69-4257-b549-b29e992e35ea&quot;</span>.equals(defdoc)) &#123;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      str.append(<span class="string">&quot;select pk_refinfo from bd_refinfo where &quot;</span>);</span><br><span class="line">      str.append(<span class="string">&quot; name = &#x27;客商银行账户&#x27;&quot;</span>);</span><br><span class="line">      Set&lt;String&gt; pk_refInfoSet = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        pk_refInfoSet = (Set&lt;String&gt;)dao.executeQuery(str.toString(), (ResultSetProcessor)<span class="keyword">new</span> <span class="title class_">ColumnSetProcessor</span>());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line">        Logger.error(e);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">for</span> (RefInfoVO ref : refs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pk_refInfoSet.contains(ref.getPk_refinfo())) &#123;</span><br><span class="line">          dealResName((SuperVO)ref, <span class="string">&quot;residPath&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">          defList.add(ref);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> defList;</span><br><span class="line">    &#125; </span><br><span class="line">    Set&lt;String&gt; refNameSet = getRefModelName(defdoc);</span><br><span class="line">    <span class="keyword">if</span> (refNameSet != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (refNameSet.isEmpty())</span><br><span class="line">        ExceptionUtils.wrapBusinessException(<span class="string">&quot;无法从元数据中获取该参照！&quot;</span>); </span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">refName</span> <span class="operator">=</span> ((String[])refNameSet.toArray((T[])<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))[<span class="number">0</span>];</span><br><span class="line">      List&lt;String&gt; refNameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span> (refName.indexOf(<span class="string">&quot;;&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        refNameList = Arrays.asList(refName.split(<span class="string">&quot;;&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        refNameList.add(refName);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">strBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      strBuilder.append(<span class="string">&quot;select pk_refinfo from bd_refinfo where &quot;</span>);</span><br><span class="line">      strBuilder.append(<span class="string">&quot; name in &quot;</span> + InSqlManager.getInSQLValue(refNameList.&lt;String&gt;toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>])));</span><br><span class="line"></span><br><span class="line">      Set&lt;String&gt; pk_refInfoSet = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        pk_refInfoSet = (Set&lt;String&gt;)dao.executeQuery(strBuilder.toString(), (ResultSetProcessor)<span class="keyword">new</span> <span class="title class_">ColumnSetProcessor</span>());</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line">        Logger.error(e);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">for</span> (RefInfoVO ref : refs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pk_refInfoSet.contains(ref.getPk_refinfo())) &#123;</span><br><span class="line">          dealResName((SuperVO)ref, <span class="string">&quot;residPath&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">          defList.add(ref);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (RefInfoVO ref : refs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(ref.getPara2()) &amp;&amp; ref.getPara2().equals(<span class="string">&quot;bd_defdoc&quot;</span>)) &#123;</span><br><span class="line">          dealResName((SuperVO)ref, <span class="string">&quot;residPath&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">          defList.add(ref);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> defList.toArray();</span><br><span class="line">  &#125; </span><br><span class="line">    <span class="comment">// 上面代码跳过 ----------------------------------------------------------------------------------------</span></span><br><span class="line">  <span class="keyword">return</span> refs;  <span class="comment">// 直接把  bd_refinfo 里所有的参照类型返回了，所以前台那个自定义项能够设置成任意一个  参照类型。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912160100247.png" alt="image-20240912160100247"></p><ul><li><strong>看起来和  refmodelname字段没有任何关系，我们接着看 另外一种方式，就是直接修改元数据增加一个参照字段的方式。</strong></li></ul><ol><li>nccloud.web.platform.template.action.QueryRefInfoAction</li></ol><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912160552794.png" alt="image-20240912160552794"></p><ul><li>我们可以看到，这种在元数据上面设置的参照字段，在选择参照类型时，会把在元数据上设置的元数据的参照的id传给后端。</li></ul><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912160717202.png" alt="image-20240912160717202"></p><p><img src="/2024/09/06/240827/%E6%A0%91%E8%A1%A8%E5%9E%8B%E5%8F%82%E7%85%A7%E5%BC%80%E5%8F%91/image-20240912160811456.png" alt="image-20240912160811456"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getRefInfos</span><span class="params">(String defdoc)</span> &#123;</span><br><span class="line">  List&lt;RefInfoVO&gt; defList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  RefInfoVO[] refs = getAllRefInfoVOs();</span><br><span class="line">  <span class="type">BaseDAO</span> <span class="variable">dao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseDAO</span>();</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isNotEmpty(defdoc)) &#123;   <span class="comment">// 这里有值，不会跳过，和自定义项设置参照的方式不一样。</span></span><br><span class="line">      <span class="comment">//下面跳过 --------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;08aca301-1a69-4257-b549-b29e992e35ea&quot;</span>.equals(defdoc)) &#123;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      str.append(<span class="string">&quot;select pk_refinfo from bd_refinfo where &quot;</span>);</span><br><span class="line">      str.append(<span class="string">&quot; name = &#x27;客商银行账户&#x27;&quot;</span>);</span><br><span class="line">      Set&lt;String&gt; pk_refInfoSet = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        pk_refInfoSet = (Set&lt;String&gt;)dao.executeQuery(str.toString(), (ResultSetProcessor)<span class="keyword">new</span> <span class="title class_">ColumnSetProcessor</span>());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line">        Logger.error(e);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">for</span> (RefInfoVO ref : refs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pk_refInfoSet.contains(ref.getPk_refinfo())) &#123;</span><br><span class="line">          dealResName((SuperVO)ref, <span class="string">&quot;residPath&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">          defList.add(ref);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> defList;</span><br><span class="line">    &#125; </span><br><span class="line">      <span class="comment">// 上面跳过 --------------------------------------------------------------</span></span><br><span class="line">   </span><br><span class="line">      Set&lt;String&gt; refNameSet = getRefModelName(defdoc); <span class="comment">//这里开始，就和  refmodelname字段有关系了！！！！！</span></span><br><span class="line">      <span class="comment">// 上面是根据 元数据 id 去 bd_info表里面去获取  refModelName 字段去了。</span></span><br><span class="line">    <span class="keyword">if</span> (refNameSet != <span class="literal">null</span>) &#123; <span class="comment">//这里不会为null ，顶多是一个 空的set</span></span><br><span class="line">      <span class="keyword">if</span> (refNameSet.isEmpty()) <span class="comment">// 这里 ，如果你的 md_class里面的元数据 refmodelname 字段为空，就报错了！！！！！！</span></span><br><span class="line">          <span class="comment">//所以，首先，你的 md_class表的 元数据的 refmodelname 要设置上值。</span></span><br><span class="line">        ExceptionUtils.wrapBusinessException(<span class="string">&quot;无法从元数据中获取该参照！&quot;</span>); </span><br><span class="line">      <span class="type">String</span> <span class="variable">refName</span> <span class="operator">=</span> ((String[])refNameSet.toArray((T[])<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))[<span class="number">0</span>];</span><br><span class="line">      List&lt;String&gt; refNameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span> (refName.indexOf(<span class="string">&quot;;&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        refNameList = Arrays.asList(refName.split(<span class="string">&quot;;&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        refNameList.add(refName);</span><br><span class="line">      &#125; </span><br><span class="line">        <span class="comment">//上面是在做什么？ 实际上 md_class 表的 refmodelname字段是可以由多个  名称通过;拼接起来的。</span></span><br><span class="line">        <span class="comment">//下面去 bd_refinfo 里获取参照类型的时候，会一起查询出来。</span></span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">strBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      strBuilder.append(<span class="string">&quot;select pk_refinfo from bd_refinfo where &quot;</span>);</span><br><span class="line">      strBuilder.append(<span class="string">&quot; name in &quot;</span> + InSqlManager.getInSQLValue(refNameList.&lt;String&gt;toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>])));</span><br><span class="line">      Set&lt;String&gt; pk_refInfoSet = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        pk_refInfoSet = (Set&lt;String&gt;)dao.executeQuery(strBuilder.toString(), (ResultSetProcessor)<span class="keyword">new</span> <span class="title class_">ColumnSetProcessor</span>());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line">        Logger.error(e);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">for</span> (RefInfoVO ref : refs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pk_refInfoSet.contains(ref.getPk_refinfo())) &#123;</span><br><span class="line">          dealResName((SuperVO)ref, <span class="string">&quot;residPath&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">          defList.add(ref);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (RefInfoVO ref : refs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(ref.getPara2()) &amp;&amp; ref.getPara2().equals(<span class="string">&quot;bd_defdoc&quot;</span>)) &#123;</span><br><span class="line">          dealResName((SuperVO)ref, <span class="string">&quot;residPath&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">          defList.add(ref);</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> defList.toArray(); <span class="comment">//只返回  refmodelname字段能匹配上的参照，而不是和自定义项取参照一样，返回全部的参照。</span></span><br><span class="line">                              <span class="comment">//比如 元数据的  refmodelname 是 A ; B ; C, 则去bd_refinfo表查询时，会返回三条数据</span></span><br><span class="line">                              <span class="comment">//分别是 name = A , B , C 的数据，这三个参照类型均可以在前台的下拉框中选择到！！！！</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> refs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk、maven、redis、MySQL、ES安装</title>
      <link href="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/"/>
      <url>/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="jdk、maven、redis、MySQL、ES安装"><a href="#jdk、maven、redis、MySQL、ES安装" class="headerlink" title="jdk、maven、redis、MySQL、ES安装"></a>jdk、maven、redis、MySQL、ES安装</h1><h2 id="JDK1-8安装"><a href="#JDK1-8安装" class="headerlink" title="JDK1.8安装"></a>JDK1.8安装</h2><h3 id="JDK下载（点击可跳过下面步骤直接进入下载界面）"><a href="#JDK下载（点击可跳过下面步骤直接进入下载界面）" class="headerlink" title="JDK下载（点击可跳过下面步骤直接进入下载界面）"></a>JDK下载（点击可跳过下面步骤直接进入下载界面）</h3><p>1、打开浏览器输入网址 <a href="https://www.oracle.com/index.html%EF%BC%8C%E8%BF%9B%E5%85%A5Oracle%E5%AE%98%E7%BD%91">https://www.oracle.com/index.html，进入Oracle官网</a></p><p>2、在官网首页菜单栏，点击Products，在Software中找到Java，单击该选项</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182220374.png" alt="image-20240905182220374"></p><p>会进入如下界面</p><p>3、在界面中往下滑，可以看到如下选项，在该选项中选择Java SE，找到Oracle JDK，点击进入JDK下载界面</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182235736.png" alt="image-20240905182235736"></p><p>4、在该界面可以找到各种版本的JDK，选择自己需要的版本进行下载即可。在这里本人选择JDK1.8的 X64 版本进行下载安装</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182250495.png" alt="image-20240905182250495"></p><p>5、确定好之后选择对应的exe文件格式，点击进行下载，点击后会弹出一个通知，同意接受，点击安装，未登录的用户可能会弹出登录界面，假如没有Oracle账号创建账号进行登录后即可下载安装</p><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>1、下载完JDK到本地后，找到该文件，双击运行JDK安装程序</p><p>2、等待一会，进入JDK安装界面，点击下一步</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182338777.png" alt="image-20240905182338777"></p><p>3、可以直接默认目录，点击下一步。也可以自定义路径，先创建一个文件夹名为 Java，再在该文件夹下创建一个文件夹为 JDK 安装目录，同时创建一个文件夹为 JRE 安装目录</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182349561.png" alt="image-20240905182349561"></p><p>4、然后回到JDK安装界面，更改安装路径，为上述所创建的 JDK 路径，点击下一步（这里由于第一项开发工具中已经自带了 JRE，则第三项的公共 JRE 可以取消独立安装，上述创建的 JRE 文件夹也不需要了）。无其他需求，取消安装 JRE 即可</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182411248.png" alt="image-20240905182411248"></p><p>5、等待一会，会进入 JRE 的安装界面，同样的更改路径，为上述所创建的 JRE 路径，更改完之后点击下一步（在上一步取消公共 JRE 安装的则不会出现下面的界面，直接到 2.6 安装完成）</p><p>6、至此JDK已经安装完毕，点击关闭</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>找到 path</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182527822.png" alt="image-20240905182527822"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182544766.png" alt="image-20240905182544766"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182604398.png" alt="image-20240905182604398"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182625407.png" alt="image-20240905182625407"></p><h2 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h2><h3 id="maven的安装"><a href="#maven的安装" class="headerlink" title="maven的安装"></a><a href="https://so.csdn.net/so/search?q=maven&spm=1001.2101.3001.7020">maven</a>的安装</h3><p>官网下载地址：<br><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182823264.png" alt="image-20240905182823264"></p><h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>找到 path</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905182908728.png" alt="image-20240905182908728"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905183004286.png" alt="image-20240905183004286"></p><h3 id="配置阿里云镜像和-定义仓库位置"><a href="#配置阿里云镜像和-定义仓库位置" class="headerlink" title="配置阿里云镜像和 定义仓库位置"></a>配置阿里云镜像和 定义仓库位置</h3><ul><li>修改配置文件</li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905183329539.png" alt="image-20240905183329539"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905183146351.png" alt="image-20240905183146351"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在maven安装目录同级创建一个文件夹当做仓库</li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905183303158.png" alt="image-20240905183303158"></p><ul><li>修改配置文件</li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240905183349048.png" alt="image-20240905183349048"></p><h3 id="IDEA里面配置maven"><a href="#IDEA里面配置maven" class="headerlink" title="IDEA里面配置maven"></a>IDEA里面配置maven</h3><ul><li><strong>首先打开一个maven项目</strong></li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093223885.png" alt="image-20240906093223885"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093233914.png" alt="image-20240906093233914"></p><ul><li><strong>改变所使用的jdk</strong></li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093310986.png" alt="image-20240906093310986"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093325554.png" alt="image-20240906093325554"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093338689.png" alt="image-20240906093338689"></p><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><h3 id="Redis下载地址："><a href="#Redis下载地址：" class="headerlink" title="Redis下载地址："></a>Redis下载地址：</h3><p><strong>windows版本readis下载（GitHub）：</strong></p><p><a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a> <strong>（推荐使用）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis 支持 32 位和 64 位。根据你所使用的系统和实际情况进行选择，这里我下载 Redis-x64-xxx.zip压缩包到磁盘，解压后，将文件夹重新命名为 redis。</span><br><span class="line"></span><br><span class="line">Windows下的.msi安装和.zip格式区别：</span><br><span class="line"></span><br><span class="line">.msi是Windows installer开发出来的程序安装文件，它可以让你安装，修改，卸载你所安装的程序。说白了.msi就是Windows installer的数据包，把所有和安装文件相关的内容封装在一个包里。此外：它还包含有关安装过程自己的信息。例如：安装序列、目标文件夹路径、安装选项和控制安装过程的属性。</span><br><span class="line">.zip是一个压缩包，解压之后即可，不需要安装</span><br></pre></td></tr></table></figure><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093537200.png" alt="image-20240906093537200"></p><ul><li>将下载的压缩包解压到指定的文件夹中，如：<strong>D:\Redis</strong>，内容如下：</li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093557427.png" alt="image-20240906093557427"></p><h3 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h3><p><strong>在Redis的安装目录下打开cmd窗口，然后执行命令来启动服务：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure><p>直接在Redis目录路径处输入cmd回车也可以进入命令窗口</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093702217.png" alt="image-20240906093702217"></p><p><strong>随后使用<code>redis-server.exe redis.windows.conf</code>命令来启动redis服务</strong></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093718849.png" alt="image-20240906093718849"></p><p><strong>默认端口为6379，出现图上的图标说明redis服务启动成功。命令里面的 <code>redis.windows.conf</code> 可以省略，省略后，使用<code>redis-server.exe</code>命令会使用默认的配置。</strong></p><h3 id="配置环境变量-2"><a href="#配置环境变量-2" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><strong>为了方便，建议把Redis路径配置到系统变量Path值中，这样就省得再输路径了。</strong></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093809522.png" alt="image-20240906093809522"></p><h3 id="打开Redis客户端进行连接"><a href="#打开Redis客户端进行连接" class="headerlink" title="打开Redis客户端进行连接"></a>打开<a href="https://so.csdn.net/so/search?q=Redis%E5%AE%A2%E6%88%B7%E7%AB%AF&spm=1001.2101.3001.7020">Redis客户端</a>进行连接</h3><p>我们使用<code>redis-cli.exe</code>命令来打开Redis客户端：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093833104.png" alt="image-20240906093833104"></p><p><strong>在命令中输入</strong>ping命令来检测redis服务器与redis客户端的连通性，返回<code>PONG</code>则说明连接成功了。</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093854774.png" alt="image-20240906093854774"></p><p><strong>如果出现连接不成功，注意服务打开以后，另启一个 cmd 窗口到Redis所在的目录执行命令，原来的Redis启动窗口不要关闭，不然就无法访问服务端了。</strong></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906093917551.png" alt="image-20240906093917551"></p><h3 id="将Redis设置为后台服务的方式"><a href="#将Redis设置为后台服务的方式" class="headerlink" title="将Redis设置为后台服务的方式"></a>将Redis设置为后台服务的方式</h3><p>在 cmd 中输入, 将Redis绑定为 Windows 服务, 并设置为后台启动：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server --service-install redis.windows.conf --loglevel verbose    // 安装redis服务</span><br></pre></td></tr></table></figure><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094645551.png" alt="image-20240906094645551"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094658960.png" alt="image-20240906094658960"></p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p><strong>在命令中通过<code>set</code>命令设置键值，通过<code>get</code>命令取出键值：</strong></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094013782.png" alt="image-20240906094013782"></p><p><strong>在命令中通过<code>shutdown</code>命令来关闭redis服务：</strong></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094040807.png" alt="image-20240906094040807"></p><p>在Redis服务启动的cmd窗口中会出现服务关闭的提醒，如下图：</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094056943.png" alt="image-20240906094056943"></p><h3 id="Redis常用的服务指令"><a href="#Redis常用的服务指令" class="headerlink" title="Redis常用的服务指令"></a><strong>Redis常用的服务指令</strong></h3><p>卸载服务：<code>redis-server --service-uninstall</code></p><p>开启服务：<code>redis-server --service-start</code></p><p>停止服务：<code>redis-server --service-stop</code></p><h3 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h3><p>安装完毕后，进入redis安装目录找到配置文件<strong>redis.windows-service.conf</strong></p><p>注意是<strong>redis.windows-service.conf</strong>不是<strong>redis.windows.conf</strong></p><p>后者是以非系统服务方式启动程序使用的配置文件.</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094256888.png" alt="image-20240906094256888"></p><p>在配置文件中,找到<strong>requirepass foobared</strong>字样，在其后面追加一行，输入<code>requirepass 123456</code>设置访问Redis时所需的密码。</p><p>一般测试情况下可以不用设定密码。我这里设置123456做演示。</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906094330705.png" alt="image-20240906094330705"></p><h3 id="Redis-Desktop-Manager"><a href="#Redis-Desktop-Manager" class="headerlink" title="Redis Desktop Manager"></a>Redis Desktop Manager</h3><p>需要安装使用，0.9.4以上是要收费的</p><p>下载地址：<a href="https://github.com/uglide/RedisDesktopManager/releases/download/0.9.3/redis-desktop-manager-0.9.3.817.exe">https://github.com/uglide/RedisDesktopManager/releases/download/0.9.3/redis-desktop-manager-0.9.3.817.exe</a><br>        下载完成之后直接点击安装，无需任何配置直接连接。</p><h2 id="MySQL8-x安装"><a href="#MySQL8-x安装" class="headerlink" title="MySQL8.x安装"></a>MySQL8.x安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>点击进入MySQL官网：<a href="https://www.mysql.com/">https://www.mysql.com/</a></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095231300.png" alt="image-20240906095231300"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095242243.png" alt="image-20240906095242243"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095256532.png" alt="image-20240906095256532"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095318785.png" alt="image-20240906095318785"></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095411658.png" alt="image-20240906095411658"></p><h3 id="创建初始化文件mysql-ini"><a href="#创建初始化文件mysql-ini" class="headerlink" title="创建初始化文件mysql.ini"></a>创建初始化文件mysql.ini</h3><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095433233.png" alt="image-20240906095433233"></p><p>点击进入.ini文件，将下面的内容复制进去<br><strong>注意：将其中的basedir和datadir的mysql文件夹所在位置修改成自己计算机上下载的mysql-8.0.22-22-winx64的路径，datadir后的‘\Data’不要变，不要手动创建Data文件夹</strong></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql-server\mysql-<span class="number">8.0</span>.<span class="number">22</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\mysql-server\mysql-<span class="number">8.0</span>.<span class="number">22</span>-winx64\Data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对MySQL进行初始化"><a href="#对MySQL进行初始化" class="headerlink" title="对MySQL进行初始化"></a>对MySQL进行初始化</h3><ul><li>以管理员身份运行cmd</li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095621680.png" alt="image-20240906095621680"></p><ul><li>进入mysql的bin目录<br><strong>不要在bin目录下的路径栏直接输入cmd（这样就不是管理员身份了，会报错）</strong></li></ul><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095642512.png" alt="image-20240906095642512"></p><ul><li>输入以下命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906095922743.png" alt="image-20240906095922743"></p><ul><li>安装MySQL服务<br>  ① 在cmd窗口继续输入以下命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --install</span><br></pre></td></tr></table></figure><p>由于我已安装过，所以这里显示“already exists”。第一次成功的标志应该是“Service successfully installed! ”</p><p>​        ② 在cmd窗口继续输入以下命令，启动MySQL服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p>当出现MySQL 服务正在启动，MySQL 服务已经启动成功</p><h3 id="修改MySQL密码-–-gt-例1"><a href="#修改MySQL密码-–-gt-例1" class="headerlink" title="修改MySQL密码 –&gt;例1"></a>修改MySQL密码 –&gt;例1</h3><p>在cmd窗口继续输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入刚刚生成的密码；</p><p>之后继续输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的密码&#x27;;</span><br></pre></td></tr></table></figure><p>输入exit，退出mysql，mysql安装成功结束。<br><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100153334.png" alt="image-20240906100153334"></p><h3 id="修改MySQL密码-–-gt-例2"><a href="#修改MySQL密码-–-gt-例2" class="headerlink" title="修改MySQL密码 –&gt;例2"></a>修改MySQL密码 –&gt;例2</h3><p>​       <strong>修改默认账户密码（我是用的例2）</strong></p><ul><li>在cmd命令行输入如下代码，这里的<code>1234</code>就是指默认管理员(即root账户)的密码，可以自行修改成你喜欢的：</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password <span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="ElasticSearch7-17-16-安装"><a href="#ElasticSearch7-17-16-安装" class="headerlink" title="ElasticSearch7.17.16 安装"></a>ElasticSearch7.17.16 安装</h2><h3 id="一、安装jdk"><a href="#一、安装jdk" class="headerlink" title="一、安装jdk"></a>一、安装jdk</h3><p>ElasticSearch是基于lucence开发的，也就是运行需要java jdk支持。所以要先安装JAVA环境。</p><p>由于ElasticSearch 5.x 往后依赖于JDK 1.8的，所以现在我们下载JDK 1.8或者更高版本。<br>下载JDK1.8,下载完成后安装。</p><h3 id="二、安装ElasticSearch"><a href="#二、安装ElasticSearch" class="headerlink" title="二、安装ElasticSearch"></a>二、安装ElasticSearch</h3><p>1.ElasticSearch下载地址：</p><p><a href="https://www.elastic.co/downloads/elasticsearch">https://www.elastic.co/downloads/elasticsearch</a></p><p>2.下载安装包后解压</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100748819.png" alt="image-20240906100748819"></p><p>3.进入bin目录下,双击执行elasticsearch.bat</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100804975.png" alt="image-20240906100804975"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100813576.png" alt="image-20240906100813576"></p><p>看到started说明启动成功,打开浏览器测试一下,如下图</p><p><a href="http://localhost:9200/">http://localhost:9200</a></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100828840.png" alt="image-20240906100828840"></p><h3 id="三、安装ElasticSearch-head插件"><a href="#三、安装ElasticSearch-head插件" class="headerlink" title="三、安装ElasticSearch-head插件"></a>三、安装ElasticSearch-head插件</h3><p>1、安装node环境<br>网址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 下载Windows版msi的,下载完直接安装，一直确定</p><p>安装完后cmd查看版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node-v</span><br></pre></td></tr></table></figure><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100942982.png" alt="image-20240906100942982"></p><p>2、安装grunt</p><p>grunt是一个很方便的构建工具，可以进行打包压缩、测试、执行等等的工作，5.x里之后的head插件就是通过grunt启动的。因此需要安装grunt.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure><p>查看版本号 grunt -version</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100933189.png" alt="image-20240906100933189"></p><p>3.下载head插件</p><p>1.网址:<a href="https://github.com/mobz/elasticsearch-head%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8C%85">https://github.com/mobz/elasticsearch-head下载安装包</a></p><p>2.解压</p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906100959608.png" alt="image-20240906100959608"></p><p>3.进入head文件夹下，执行命令：npm install (此处是为安装进行安装pathomjs)</p><p> 如果安装速度慢,设置成淘宝的镜像重新安装 npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>4.安装完成之后npm run start或grunt server,启动head插件<img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906101017297.png" alt="image-20240906101017297"></p><p>5.修改es使用的参数.编辑D:\elasticsearch\elasticsearch-7.3.2-windows-x86_64\elasticsearch-7.3.2\config\elasticsearch.yml文件<img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906101033418.png" alt="image-20240906101033418"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906101042544.png" alt="image-20240906101042544"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 增加新的参数，这样head插件可以访问es</span><br><span class="line">http.cors.enabled: true </span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">@注意，设置参数的时候:后面要有空格！</span><br></pre></td></tr></table></figure><p>6.修改完配置将es重启,浏览器访问 <a href="http://localhost:9100/">http://localhost:9100</a><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906101105169.png" alt="image-20240906101105169"></p><h3 id="四、ElasticSearch安装为Windows服务"><a href="#四、ElasticSearch安装为Windows服务" class="headerlink" title="四、ElasticSearch安装为Windows服务"></a>四、<strong>ElasticSearch安装为Windows服务</strong></h3><p>1.elasticsearch的bin目录下有一个elasticsearch-service.bat</p><p>2.cmd 进入bin目录下执行: elasticsearch-service.bat install<img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906101125016.png" alt="image-20240906101125016"></p><p><img src="/2024/09/05/240827/jdk%E3%80%81maven%E3%80%81redis%E3%80%81MySQL%E3%80%81ES%E5%AE%89%E8%A3%85/image-20240906101141458.png" alt="image-20240906101141458"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elasticsearch-service.bat后面还可以执行这些命令 --&gt;</span><br><span class="line">install: 安装Elasticsearch服务</span><br><span class="line">remove: 删除已安装的Elasticsearch服务（如果启动则停止服务）</span><br><span class="line">start: 启动Elasticsearch服务（如果已安装）</span><br><span class="line">stop: 停止服务（如果启动）</span><br><span class="line">manager:启动GUI来管理已安装的服务</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 软件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCC新建一个主从表节点</title>
      <link href="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/"/>
      <url>/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="NCC新建一个主从表节点"><a href="#NCC新建一个主从表节点" class="headerlink" title="NCC新建一个主从表节点"></a>NCC新建一个主从表节点</h1><h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830102928891.png" alt="image-20240830102928891"></p><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><h2 id="新建工程，工程名-x3D-模块名"><a href="#新建工程，工程名-x3D-模块名" class="headerlink" title="新建工程，工程名 &#x3D; 模块名"></a>新建工程，工程名 &#x3D; 模块名</h2><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830103151897.png" alt="image-20240830103151897"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830103504641.png" alt="image-20240830103504641"></p><ul><li>建好之后的目录结构</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830103611794.png" alt="image-20240830103611794"></p><h1 id="画元数据"><a href="#画元数据" class="headerlink" title="画元数据"></a>画元数据</h1><h2 id="编辑组件属性和实体属性"><a href="#编辑组件属性和实体属性" class="headerlink" title="编辑组件属性和实体属性"></a>编辑组件属性和实体属性</h2><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830103739729.png" alt="image-20240830103739729"></p><ul><li>拖拽一个  实体  到面板之上，然后编辑  实体面板和组件面板</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830104707035.png" alt="image-20240830104707035"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105046797.png" alt="image-20240830105046797"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105153666.png" alt="image-20240830105153666"></p><h2 id="引用需要的特性"><a href="#引用需要的特性" class="headerlink" title="引用需要的特性"></a>引用需要的特性</h2><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105353307.png" alt="image-20240830105353307"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105413244.png" alt="image-20240830105413244"></p><h3 id="删掉特性自动生成的id字段"><a href="#删掉特性自动生成的id字段" class="headerlink" title="删掉特性自动生成的id字段"></a>删掉特性自动生成的id字段</h3><ul><li>这个字段有问题，删掉不用</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105545666.png" alt="image-20240830105545666"></p><h3 id="引入主子表查询接口"><a href="#引入主子表查询接口" class="headerlink" title="引入主子表查询接口"></a>引入主子表查询接口</h3><ul><li>因为我们在实体属性组件中，选择的访问器类型是 Aggvo，这里必须手动引入主子表查询接口才可以。</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105727466.png" alt="image-20240830105727466"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830105754010.png" alt="image-20240830105754010"></p><h3 id="引入单据号查询接口"><a href="#引入单据号查询接口" class="headerlink" title="引入单据号查询接口"></a>引入单据号查询接口</h3><ul><li>这个是主子表里需要引入的一个接口，单表的暂不清楚</li></ul><p><strong>(baseapp&#x2F;metadata&#x2F;meta&#x2F;IBillNo)</strong></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830113651178.png" alt="image-20240830113651178"></p><h2 id="添加其他所需要的属性"><a href="#添加其他所需要的属性" class="headerlink" title="添加其他所需要的属性"></a>添加其他所需要的属性</h2><h3 id="修改业务类型字段"><a href="#修改业务类型字段" class="headerlink" title="修改业务类型字段"></a>修改业务类型字段</h3><ul><li>业务类型字段是特性自动生成的，但是不对，要改下，改成参照类型的，参照业务流程元数据</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830111556106.png" alt="image-20240830111556106"></p><h3 id="修改Code字段"><a href="#修改Code字段" class="headerlink" title="修改Code字段"></a>修改Code字段</h3><ul><li>使用code字段作为  单据号</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830111655511.png" alt="image-20240830111655511"></p><h3 id="修改单据类型和交易类型pk字段"><a href="#修改单据类型和交易类型pk字段" class="headerlink" title="修改单据类型和交易类型pk字段"></a>修改单据类型和交易类型pk字段</h3><ul><li>改成参照类型</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830160201568.png" alt="image-20240830160201568"></p><ul><li>图片有问题，不对！</li><li>交易类型 设成字符串类型，不参照</li><li>交易类型pk  参照单据类型，参照名称交易类型</li><li>单据类型，参照单据类型 ，参照名称 影响因素单据类型</li></ul><h3 id="修改自定义项"><a href="#修改自定义项" class="headerlink" title="修改自定义项"></a>修改自定义项</h3><ul><li>默认生成的是 String 类型，这里手动改成 自定义项，后面子实体添加自定义项也要这么做</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830135017340.png" alt="image-20240830135017340"></p><h2 id="添加子实体"><a href="#添加子实体" class="headerlink" title="添加子实体"></a>添加子实体</h2><ul><li>子实体和主实体是组合关系 1—n。</li><li>子实体只需要实现  行号 的接口。</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830112534667.png" alt="image-20240830112534667"></p><h2 id="编辑子实体的-实体属性面板"><a href="#编辑子实体的-实体属性面板" class="headerlink" title="编辑子实体的 实体属性面板"></a>编辑子实体的 实体属性面板</h2><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830112848833.png" alt="image-20240830112848833"></p><h2 id="添加子实体需要的属性字段"><a href="#添加子实体需要的属性字段" class="headerlink" title="添加子实体需要的属性字段"></a>添加子实体需要的属性字段</h2><p>略</p><h2 id="修改主表新增的外键字段"><a href="#修改主表新增的外键字段" class="headerlink" title="修改主表新增的外键字段"></a>修改主表新增的外键字段</h2><ul><li>首先这个属性是在主表的 实体上面</li><li>其次，你组合  主子表之后，这个自动就生成了</li><li>最后，只需要改动访问策略   <strong>nc.md.model.access.BodyOfAggVOAccessor</strong> ， <strong>char类型，长度20</strong></li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830113058601.png" alt="image-20240830113058601"></p><h2 id="配置业务接口映射"><a href="#配置业务接口映射" class="headerlink" title="配置业务接口映射"></a>配置业务接口映射</h2><p>略</p><h2 id="发布元数据，并生成sql文件执行"><a href="#发布元数据，并生成sql文件执行" class="headerlink" title="发布元数据，并生成sql文件执行"></a>发布元数据，并生成sql文件执行</h2><h1 id="建立应用注册-和-菜单注册层级"><a href="#建立应用注册-和-菜单注册层级" class="headerlink" title="建立应用注册 和 菜单注册层级"></a>建立应用注册 和 菜单注册层级</h1><h2 id="首先，建立应用注册节点的三级菜单"><a href="#首先，建立应用注册节点的三级菜单" class="headerlink" title="首先，建立应用注册节点的三级菜单"></a>首先，建立应用注册节点的三级菜单</h2><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830142913282.png" alt="image-20240830142913282"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830143035371.png" alt="image-20240830143035371"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830143113315.png" alt="image-20240830143113315"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830143126329.png" alt="image-20240830143126329"></p><h2 id="第二步，进入菜单注册，建立三级层次"><a href="#第二步，进入菜单注册，建立三级层次" class="headerlink" title="第二步，进入菜单注册，建立三级层次"></a>第二步，进入菜单注册，建立三级层次</h2><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830143848337.png" alt="image-20240830143848337"></p><ul><li><strong>这里编码最好和应用注册的编码保持一致，我新建菜单的时候发现Y1被别人用了，所以换成Y2了。</strong></li></ul><h2 id="增补模块"><a href="#增补模块" class="headerlink" title="增补模块"></a>增补模块</h2><ul><li>使用  admin账号登录 –&gt;  业务初始化 —&gt;增补模块，把刚创建的模块增补上。</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830144217532.png" alt="image-20240830144217532"></p><h3 id="额外一个问题"><a href="#额外一个问题" class="headerlink" title="额外一个问题"></a>额外一个问题</h3><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830145227414.png" alt="image-20240830145227414"></p><ul><li>去数据库查询菜单</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> SM_APPMENUREG</span><br></pre></td></tr></table></figure><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240828225707687.png" alt="image-20240828225707687"></p><ul><li>我们上面新建的菜单，全都建在  当前这个正在使用的菜单模板下面了。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> SM_APPMENUITEM <span class="keyword">where</span> menuitemcode <span class="keyword">like</span> <span class="string">&#x27;Y2%&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830145504389.png" alt="image-20240830145504389"></p><ul><li>低代码平台在选择  上级菜单的时候，似乎只能识别到  系统默认的那个菜单模板下的菜单。</li><li>所以我们必须将这三条数据复制成  insert语句，改一下 主键和菜单模板的主键</li><li>插入到  当前表中</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830145731276.png" alt="image-20240830145731276"></p><h1 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h1><ul><li>使用集团管理员账号登录 —&gt; 代码定制</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830150758451.png" alt="image-20240830150758451"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830150812380.png" alt="image-20240830150812380"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830150818842.png" alt="image-20240830150818842"></p><ul><li>这次很顺利，啥错都没报！！！</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830151037922.png" alt="image-20240830151037922"></p><h1 id="导入前端，后端代码"><a href="#导入前端，后端代码" class="headerlink" title="导入前端，后端代码"></a>导入前端，后端代码</h1><h2 id="导入前端代码"><a href="#导入前端代码" class="headerlink" title="导入前端代码"></a>导入前端代码</h2><ul><li>代码已经被下载到我们指定的前端路径里面了。</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830152419187.png" alt="image-20240830152419187"></p><ul><li>将前端代码 复制到一个前端脚手架中去</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830152408365.png" alt="image-20240830152408365"></p><ul><li>在 config.json中  配置编译路径</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830152512504.png" alt="image-20240830152512504"></p><ul><li>编译一下，将编译后的代码打到home里面</li></ul><h2 id="处理后端代码"><a href="#处理后端代码" class="headerlink" title="处理后端代码"></a>处理后端代码</h2><ul><li>后端代码，是被下载到我们的工程根目录下面了</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830153512455.png" alt="image-20240830153512455"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830153553819.png" alt="image-20240830153553819"></p><h2 id="执行sql脚本"><a href="#执行sql脚本" class="headerlink" title="执行sql脚本"></a>执行sql脚本</h2><ul><li>在下载下来的  后端  代码中，有一个  sql脚本</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240829104920501.png" alt="image-20240829104920501"></p><ul><li>打开，找到如下脚本文件，到数据库执行一下</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 向  SM_APPREGISTER  插入数据的    一共有三个类似的SQL，注意看应用编码，找不带 L 或 P的</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SM_APPREGISTER ( PK_APPREGISTER,CODE,NAME,OWN_MODULE,MOUNTID,WIDTH,HEIGHT,TARGET_PATH,APPTYPE,IMAGE_SRC,USELICENSE_LOAD,ORGTYPECODE,FUNTYPE,PARENT_ID,ISENABLE,PK_GROUP,APP_DESC,SCOPEID,HELP_NAME,ISCAUSERUSABLE,MDID,SOURCE_APP_CODE,RESID,FUN_PROPERTY,ISCOPYPAGE,CREATOR,CREATIONTIME,MODIFIER,MODIFIEDTIME,DR,TS ) <span class="keyword">values</span>  ( <span class="string">&#x27;1001ZZ100000000HT3H6&#x27;</span>,<span class="string">&#x27;Y1H10102&#x27;</span>,<span class="string">&#x27;资质审批&#x27;</span>,<span class="string">&#x27;Y1H1&#x27;</span>,<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">null</span>,<span class="number">1</span>,<span class="string">&#x27;default&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;BUSINESSUNIT00000000&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1001ZZ100000000HSO1N&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;01f5ffe5-f29b-4f52-b379-2e80e53983a4&#x27;</span>,<span class="string">&#x27;Y1H10102&#x27;</span>,<span class="keyword">null</span>,<span class="number">0</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;0001E110000000001TPP&#x27;</span>,<span class="string">&#x27;2024-08-30 15:08:55&#x27;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>,<span class="string">&#x27;2024-08-30 15:08:55&#x27;</span> ) </span><br></pre></td></tr></table></figure><ul><li>如果你到这里发现，数据库提示</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830153809033.png" alt="image-20240830153809033"></p><ul><li>说明已经插入进去了，跳过这一步！</li></ul><h2 id="启动项目，到菜单注册节点，建立第四层实菜单"><a href="#启动项目，到菜单注册节点，建立第四层实菜单" class="headerlink" title="启动项目，到菜单注册节点，建立第四层实菜单"></a>启动项目，到菜单注册节点，建立第四层实菜单</h2><ul><li>前面我们在菜单注册时，只建立了三层 虚菜单（没有关联应用），这次我们要去建立第四层实菜单，关联上我们注册的应用。（上面的那个脚本，实际上就是在注册应用，Y2H10102是我们的应用编码）</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830153958290.png" alt="image-20240830153958290"></p><ul><li>保存即可</li></ul><h2 id="打后端补丁"><a href="#打后端补丁" class="headerlink" title="打后端补丁"></a>打后端补丁</h2><ul><li><strong>前端代码编译之后，我们已经打到home里面了，可是后端代码还没有</strong></li><li><strong>将后端代码出补丁，尤其是  client 下面的代码，出完补丁打到home里面，就可以启动去验证了！！</strong></li><li><strong>这里出补丁的时候，仔细检查下路径，挺乱的，容易出错，打错路径代码可能不生效！</strong></li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830154105002.png" alt="image-20240830154105002"></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="分配职责"><a href="#分配职责" class="headerlink" title="分配职责"></a>分配职责</h2><ul><li>登录集团管理员，分配下职责，把我们新建的应用分配到角色上。</li></ul><h2 id="用自己的账号去验证"><a href="#用自己的账号去验证" class="headerlink" title="用自己的账号去验证"></a>用自己的账号去验证</h2><ul><li>确保当前账号已经分配了 角色（有自己新建的应用的权限的那个角色）</li><li>查看页面</li></ul><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830162927447.png" alt="image-20240830162927447"></p><p><img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830162940429.png" alt="image-20240830162940429"></p><h1 id="发现元数据有问题，重新修改并发布元数据流程"><a href="#发现元数据有问题，重新修改并发布元数据流程" class="headerlink" title="发现元数据有问题，重新修改并发布元数据流程"></a>发现元数据有问题，重新修改并发布元数据流程</h1><ul><li><p>修改元数据</p></li><li><p>删除发布的元数据，删除组件以及数据库</p></li><li><p>重新发布元数据，生成建库脚本并执行</p></li><li><p>使用集团管理员登录，代码定制节点 —&gt; 使用代码定制修改，可以直接修改已有的元数据<img src="/2024/08/30/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%BB%E4%BB%8E%E8%A1%A8%E8%8A%82%E7%82%B9/image-20240830163148544.png" alt="image-20240830163148544"></p></li><li><p>重新下载源代码，导入到工程</p></li><li><p>前端代码编译后打到home里面，后端代码也要重新打补丁</p></li><li><p>重启服务，使用集团管理员账号登录，进入菜单管理节点，重新建第四层  实菜单，记得关联你的应用！</p></li><li><p>分配职责</p></li><li><p>用自己的账号登录查看！</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCC新建一个单表节点_支持审批流</title>
      <link href="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/"/>
      <url>/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="新建一个单表节点"><a href="#新建一个单表节点" class="headerlink" title="新建一个单表节点"></a>新建一个单表节点</h1><h2 id="新建元数据"><a href="#新建元数据" class="headerlink" title="新建元数据"></a>新建元数据</h2><h3 id="新建一个全新的NCC项目"><a href="#新建一个全新的NCC项目" class="headerlink" title="新建一个全新的NCC项目"></a>新建一个全新的NCC项目</h3><h3 id="这里新建工程的时候，不要大小写都用！后面会出问题的！全用小写！"><a href="#这里新建工程的时候，不要大小写都用！后面会出问题的！全用小写！" class="headerlink" title="这里新建工程的时候，不要大小写都用！后面会出问题的！全用小写！"></a>这里新建工程的时候，不要大小写都用！后面会出问题的！全用小写！</h3><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827154756329.png" alt="image-20240827154756329"></p><h3 id="新建一个NCC组件"><a href="#新建一个NCC组件" class="headerlink" title="新建一个NCC组件"></a>新建一个NCC组件</h3><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827155419906.png" alt="image-20240827155419906"></p><h3 id="新建元数据-1"><a href="#新建元数据-1" class="headerlink" title="新建元数据"></a>新建元数据</h3><ul><li><strong>在新建的模块  souto 中，METADATA 目录下，新建元数据</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827155824395.png" alt="image-20240827155824395"></p><ul><li><strong>切换到 MDP视图可以看到新建的元数据</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827160156642.png" alt="image-20240827160156642"></p><h4 id="设置-实体-x2F-组件属性面板"><a href="#设置-实体-x2F-组件属性面板" class="headerlink" title="设置 实体&#x2F;组件属性面板"></a>设置 实体&#x2F;组件属性面板</h4><ul><li><strong>画元数据</strong><ul><li><strong>代码风格 —&gt;  标准格式</strong></li></ul></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827161050422.png" alt="image-20240827161050422"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827172129369.png" alt="image-20240827172129369"></p><h4 id="设置实体的字段属性以及业务接口映射-（只介绍几个值得注意的地方）"><a href="#设置实体的字段属性以及业务接口映射-（只介绍几个值得注意的地方）" class="headerlink" title="设置实体的字段属性以及业务接口映射 （只介绍几个值得注意的地方）"></a>设置实体的字段属性以及业务接口映射 （只介绍几个值得注意的地方）</h4><h5 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h5><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827172541558.png" alt="image-20240827172541558"></p><h5 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h5><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827173349906.png" alt="image-20240827173349906"></p><ul><li><strong>新建完枚举之后，在实体的具体的字段上引用该枚举。</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827174409742.png" alt="image-20240827174409742"></p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li><strong>引入需要的特性，一般是下面五个，没有树形结构！</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827174824443.png" alt="image-20240827174824443"></p><h5 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h5><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828231824464.png" alt="image-20240828231824464"></p><ul><li><strong>引入完，我们的元数据会自动实现一些接口和补充一些字段。</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827175002898.png" alt="image-20240827175002898"></p><ul><li>这些自动生成的字段，我们原则上不去修改，让它默认就好，但是名称啊，长度，可见不可见啥的可以修改！</li><li>code字段 对应  系统里面的单据号</li><li>id字段要删除掉</li></ul><h5 id="业务接口属性映射"><a href="#业务接口属性映射" class="headerlink" title="业务接口属性映射"></a>业务接口属性映射</h5><ul><li>新增完特性，以及新增完我们需要的字段属性之后，来到业务接口映射。</li><li>首先，所有的字段都要给设置映射属性</li><li>第二，id,pid,pk锁，这些地方要设置成实体的主键（我们自己创建的）</li><li>第三,单据号 映射为实体的code属性即可</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827175432279.png" alt="image-20240827175432279"></p><ul><li>如果你的访问器类型设置成了AggVO，则还需要引入主子表查询接口，这里注意，只有Aggvo支持审批流程！</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827175739108.png" alt="image-20240827175739108"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827175845403.png" alt="image-20240827175845403"></p><h2 id="低代码平台生成源代码"><a href="#低代码平台生成源代码" class="headerlink" title="低代码平台生成源代码"></a>低代码平台生成源代码</h2><h3 id="发布元数据，并生成脚本执行"><a href="#发布元数据，并生成脚本执行" class="headerlink" title="发布元数据，并生成脚本执行"></a>发布元数据，并生成脚本执行</h3><ul><li>如果你对元数据  后续做了修改，则需要先删除已发布的元数据，删除发布的组件和数据库后，重新发布才可以！</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240827180054564.png" alt="image-20240827180054564"></p><h2 id="新建元数据完成后"><a href="#新建元数据完成后" class="headerlink" title="新建元数据完成后"></a>新建元数据完成后</h2><h3 id="新建应用注册的层级"><a href="#新建应用注册的层级" class="headerlink" title="新建应用注册的层级"></a>新建应用注册的层级</h3><ul><li>登录集团管理员&#x2F;普通用户（有应用注册权限）</li><li>新建应用注册的   层级</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828112733930.png" alt="image-20240828112733930"></p><p>一般来讲，我们业务上很少需要新建一级应用，都是在已有的一级应用下面接着建</p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828112853679.png" alt="image-20240828112853679"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828113041885.png" alt="image-20240828113041885"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828113246998.png" alt="image-20240828113246998"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828113351389.png" alt="image-20240828113351389"></p><h3 id="新建菜单层级"><a href="#新建菜单层级" class="headerlink" title="新建菜单层级"></a>新建菜单层级</h3><ul><li>登录集团管理员，打开菜单注册节点。</li></ul><p>​                             </p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828222906434.png" alt="image-20240828222906434"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828222920540.png" alt="image-20240828222920540"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828222934601.png" alt="image-20240828222934601"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828222945426.png" alt="image-20240828222945426"></p><ul><li>这三个都是虚菜单，不需要关联应用编码，一会下载完源代码之后，会回到这里，新建一个实菜单（关联应用编码）</li></ul><h3 id="增补模块"><a href="#增补模块" class="headerlink" title="增补模块"></a>增补模块</h3><p>使用admin账号登录 ，进入业务初始化节点。右上角有个增补模块。</p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828223406512.png" alt="image-20240828223406512"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828223343960.png" alt="image-20240828223343960"></p><h4 id="额外的一个小问题"><a href="#额外的一个小问题" class="headerlink" title="额外的一个小问题"></a>额外的一个小问题</h4><ul><li>到了此时，去代码注册里下载源代码的时候，我发现我的菜单选不到。</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828225417104.png" alt="image-20240828225417104"></p><ul><li>去数据库查询菜单</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> SM_APPMENUREG</span><br></pre></td></tr></table></figure><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828225707687.png" alt="image-20240828225707687"></p><ul><li>我们上面新建的菜单，全都建在  当前这个正在使用的菜单模板下面了。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> SM_APPMENUITEM <span class="keyword">where</span> menuitemcode <span class="keyword">like</span> <span class="string">&#x27;F2%&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828225931774.png" alt="image-20240828225931774"></p><ul><li>低代码平台在选择  上级菜单的时候，似乎只能识别到  系统默认的那个菜单模板下的菜单。</li><li>所以我们必须将这三条数据复制成  insert语句，改一下 主键和菜单模板的主键</li><li>插入到  当前表中</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828230143566.png" alt="image-20240828230143566"></p><ul><li>插入之后，再去下载源代码的时候，就能看到我们新建的菜单了。</li></ul><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><ul><li>登录 集团管理员   进入 代码定制节点</li><li><strong>下图的 应用名称 和  菜单项名称 保持一致最好！</strong></li><li><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828230444955.png" alt="image-20240828230444955"></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828230557242.png" alt="image-20240828230557242"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828230823707.png" alt="image-20240828230823707"></p><ul><li><p><strong>下一步</strong>  下载源码</p></li><li><p>中途如果报错 ：XXX 自定义项主键违反唯一约束XXX ,大概是这个报错，反正和自定义项有关系，这个时候，什么也不用管，重新下载源代码就好了。</p></li><li><p>如果报错   往  sm_appregister  插入数据时，违反了唯一约束XXX   ，这个错误也是低代码平台的bug ，在插入数据的时候重复插入两次，第二次爆错了，解决办法， 找到  nc.codeplatform.framework.DataEngine 这个类  在 850 行   加上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String sql14 = &quot;delete from sm_appregister where CODE = &#x27;94H10111&#x27;&quot;;  //code 是你的 应用编码</span><br></pre></td></tr></table></figure><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829102503707.png" alt="image-20240829102503707"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829102523405.png" alt="image-20240829102523405"></p></li><li><p>再次下载源代码就可以了！</p></li></ul><h2 id="生成源代码后"><a href="#生成源代码后" class="headerlink" title="生成源代码后"></a>生成源代码后</h2><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829102003730.png" alt="image-20240829102003730"></p><h3 id="处理前端源码"><a href="#处理前端源码" class="headerlink" title="处理前端源码"></a>处理前端源码</h3><ul><li>前端源代码 已经被下载到指定的目录中了</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829103349284.png" alt="image-20240829103349284"></p><ul><li>随便找一个  前端脚手架，然后把我们的代码放进去</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104033576.png" alt="image-20240829104033576"></p><ul><li><strong>在 config.json文件中添加  这个模块的编译路径</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104156437.png" alt="image-20240829104156437"></p><ul><li>执行命令 进行编译</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm  run  build</span><br></pre></td></tr></table></figure><ul><li>将编译之后的  前端代码，放入 home</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104244018.png" alt="image-20240829104244018"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104335596.png" alt="image-20240829104335596"></p><h3 id="处理后端代码"><a href="#处理后端代码" class="headerlink" title="处理后端代码"></a>处理后端代码</h3><ul><li>后端的代码也被下载到制定目录中了</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104651347.png" alt="image-20240829104651347"></p><ul><li>先把这个文件夹  剪切到  工程根目录中去</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104726132.png" alt="image-20240829104726132"></p><ul><li>在当前工程中  引入 下载下来的代码。</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104422637.png" alt="image-20240829104422637"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104506918.png" alt="image-20240829104506918"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104619923.png" alt="image-20240829104619923"></p><h3 id="执行sql脚本"><a href="#执行sql脚本" class="headerlink" title="执行sql脚本"></a>执行sql脚本</h3><ul><li>在下载下来的  后端  代码中，有一个  sql脚本</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829104920501.png" alt="image-20240829104920501"></p><ul><li>打开，找到如下脚本文件，到数据库执行一下</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 向  SM_APPREGISTER  插入数据的    一共有三个类似的SQL，注意看应用编码，找不带 L 或 P的</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SM_APPREGISTER ( PK_APPREGISTER,CODE,NAME,OWN_MODULE,MOUNTID,WIDTH,HEIGHT,TARGET_PATH,APPTYPE,IMAGE_SRC,USELICENSE_LOAD,ORGTYPECODE,FUNTYPE,PARENT_ID,ISENABLE,PK_GROUP,APP_DESC,SCOPEID,HELP_NAME,ISCAUSERUSABLE,MDID,SOURCE_APP_CODE,RESID,FUN_PROPERTY,ISCOPYPAGE,CREATOR,CREATIONTIME,MODIFIER,MODIFIEDTIME,DR,TS ) <span class="keyword">values</span>  ( <span class="string">&#x27;1001ZZ100000000HF67V&#x27;</span>,<span class="string">&#x27;94H10107&#x27;</span>,<span class="string">&#x27;张宏涛资质审批07&#x27;</span>,<span class="string">&#x27;94H1&#x27;</span>,<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">null</span>,<span class="number">1</span>,<span class="string">&#x27;default&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;BUSINESSUNIT00000000&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;1001ZZ100000000HCLCE&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;86235382-1862-471f-a02a-8825d9770136&#x27;</span>,<span class="string">&#x27;94H10111&#x27;</span>,<span class="keyword">null</span>,<span class="number">0</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;0001E110000000001TPP&#x27;</span>,<span class="string">&#x27;2024-08-26 14:58:12&#x27;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>,<span class="string">&#x27;2024-08-26 14:58:11&#x27;</span> ) </span><br></pre></td></tr></table></figure><h3 id="启动项目，到菜单注册节点，建立第四层实菜单"><a href="#启动项目，到菜单注册节点，建立第四层实菜单" class="headerlink" title="启动项目，到菜单注册节点，建立第四层实菜单"></a>启动项目，到菜单注册节点，建立第四层实菜单</h3><ul><li>前面我们在菜单注册时，只建立了三层 虚菜单（没有关联应用），这次我们要去建立第四层实菜单，关联上我们注册的应用。（上面的那个脚本，实际上就是在注册应用，94H10111是我们的应用编码）</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829105724043.png" alt="image-20240829105724043"></p><ul><li>保存即可</li></ul><h2 id="打后端补丁"><a href="#打后端补丁" class="headerlink" title="打后端补丁"></a>打后端补丁</h2><ul><li><strong>前端代码编译之后，我们已经打到home里面了，可是后端代码还没有</strong></li><li><strong>将后端代码出补丁，尤其是  client 下面的代码，出完补丁打到home里面，就可以启动去验证了！！</strong></li><li><strong>这里出补丁的时候，仔细检查下路径，挺乱的，容易出错，打错路径代码可能不生效！</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829105840580.png" alt="image-20240829105840580"></p><h2 id="最后登录验证"><a href="#最后登录验证" class="headerlink" title="最后登录验证"></a>最后登录验证</h2><h3 id="分配职责"><a href="#分配职责" class="headerlink" title="分配职责"></a>分配职责</h3><ul><li>登录集团管理员，分配下职责，把我们新建的应用分配到角色上。</li></ul><h3 id="用自己的账号去验证"><a href="#用自己的账号去验证" class="headerlink" title="用自己的账号去验证"></a>用自己的账号去验证</h3><ul><li>确保当前账号已经分配了 角色（有自己新建的应用的权限的那个角色）</li><li>查看页面</li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829111228101.png" alt="image-20240829111228101"></p><h1 id="低代码平台搭建参考："><a href="#低代码平台搭建参考：" class="headerlink" title="低代码平台搭建参考："></a>低代码平台搭建参考：</h1><h3 id="打开代码定制节点报错-授权已过期，等待正版"><a href="#打开代码定制节点报错-授权已过期，等待正版" class="headerlink" title="打开代码定制节点报错    授权已过期，等待正版"></a>打开代码定制节点报错    授权已过期，等待正版</h3><p>在补丁文件 modules\lcdp\META-INF\classes\nc\impl\codefactory\codecreater\ICAHandler.class中，有一个时间字段，暂时修改成2026年，如果有需要的话，可以修改成长点的时间，在重新打补丁重启</p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828180352231.png" alt="image-20240828180352231"></p><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240828180748994.png" alt="image-20240828180748994"></p><h3 id="File-Valid-：Invalid-directory-name"><a href="#File-Valid-：Invalid-directory-name" class="headerlink" title="File Valid ：Invalid  directory name"></a>File Valid ：Invalid  directory name</h3><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829005429394.png" alt="image-20240829005429394"></p><ul><li><strong>新建工程的时候，工程的名称不要特别复杂，不要 带中文，不要 用特殊符号，不要 大小写字母都用！！！！！</strong></li><li><strong>就用简单的  小写字母就行，带几个数字也可以。</strong></li></ul><p><img src="/2024/08/27/240827/NCC%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%95%E8%A1%A8%E8%8A%82%E7%82%B9-%E6%94%AF%E6%8C%81%E5%AE%A1%E6%89%B9%E6%B5%81/image-20240829102823867.png" alt="image-20240829102823867"></p><ul><li>因为 你的这个工程名字，是对应元数据的<strong>模块名</strong>的  —&gt;  生成代码的时候会创建  vo，vo所在的包，包是 <strong>包含模块名且没有大写字母的</strong> 如果你工程中有大写字母，生成的类，那个类的  <strong>包名里面的模块那一层</strong>  都是小写的字母，后面校验的时候就会做个对比，就会不一致，然后报错！！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Orcal数据库回滚数据恢复</title>
      <link href="/2024/08/27/240827/Orcal%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9E%E6%BB%9A%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
      <url>/2024/08/27/240827/Orcal%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9E%E6%BB%9A%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Orcal数据库-数据回滚，数据恢复"><a href="#Orcal数据库-数据回滚，数据恢复" class="headerlink" title="Orcal数据库  数据回滚，数据恢复"></a>Orcal数据库  数据回滚，数据恢复</h1><h2 id="查询执行的sql的时间点"><a href="#查询执行的sql的时间点" class="headerlink" title="查询执行的sql的时间点"></a>查询执行的sql的时间点</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> V$<span class="keyword">SQL</span> <span class="keyword">where</span> SQL_TEXT <span class="keyword">like</span> <span class="string">&#x27;%这里写你误执行的sql语句%&#x27;</span>            <span class="comment">--根据修改语句查出你需要恢复的时间点</span></span><br></pre></td></tr></table></figure><h2 id="将过去的数据恢复到一张新表中"><a href="#将过去的数据恢复到一张新表中" class="headerlink" title="将过去的数据恢复到一张新表中"></a>将过去的数据恢复到一张新表中</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_table <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">as</span> <span class="keyword">of</span> <span class="type">timestamp</span> to_timestamp(<span class="string">&#x27;2020-09-10 11:44:25&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd            hh24:mi:ss&#x27;</span>);  <span class="comment">-- new_table :新建表的名； table ：误操作的表名；  First_Load_Time 2020-09-10 11:44:25：保存这个时间点的数据到新表。</span></span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><strong>将现在有错误数据的表 bd_table 改个别名  bd_table _bak0202</strong></p><p><strong>将恢复了数据的新表 newTable ，改成原表的名字   bd_table</strong> </p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调用原生openapi时，出现特殊字符转义报错</title>
      <link href="/2024/08/09/240717/%E8%B0%83%E7%94%A8%E5%8E%9F%E7%94%9Fopenapi%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E6%8A%A5%E9%94%99/"/>
      <url>/2024/08/09/240717/%E8%B0%83%E7%94%A8%E5%8E%9F%E7%94%9Fopenapi%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="调用原生openapi时，出现特殊字符转义报错"><a href="#调用原生openapi时，出现特殊字符转义报错" class="headerlink" title="调用原生openapi时，出现特殊字符转义报错"></a>调用原生openapi时，出现特殊字符转义报错</h1><h2 id="调用报文"><a href="#调用报文" class="headerlink" title="调用报文"></a>调用报文</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;def3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0302&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;def4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;06&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pk_custfinance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pk_payterm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custprop&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pk_custclass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0201&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pk_custsale&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;paytermdefault&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;respdept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CM0702&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;respperson&quot;</span><span class="punctuation">:</span> <span class="string">&quot;24028001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_org&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CM0103&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;def13&quot;</span><span class="punctuation">:</span> <span class="string">&quot;582229&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;这是 &amp; 符号&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isfreecust&quot;</span><span class="punctuation">:</span> <span class="string">&quot;N&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;def9&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;def7&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0203&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;taxpayerid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;无&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;def5&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;def6&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0301&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="调用结果"><a href="#调用结果" class="headerlink" title="调用结果"></a>调用结果</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000009999&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Error on line 1 of document  : 在实体引用中, 实体名称必须紧跟在 &#x27;&amp;&#x27; 后面。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errorStack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li><strong>调用NCC原生Openapi的时候，openapi内部会将json报文转换成  XML的格式，但是有些特殊字符在转换的时候会被转义，此时就有可能发生报错。</strong></li></ul><p><img src="/2024/08/09/240717/%E8%B0%83%E7%94%A8%E5%8E%9F%E7%94%9Fopenapi%E6%97%B6%EF%BC%8C%E5%87%BA%E7%8E%B0%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89%E6%8A%A5%E9%94%99/image-20240809102443254.png" alt="image-20240809102443254"></p><ul><li><strong>比如将上面的调用报文转换为xml之后</strong></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def3</span>&gt;</span>0302<span class="tag">&lt;/<span class="name">def3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def4</span>&gt;</span>06<span class="tag">&lt;/<span class="name">def4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pk_custfinance</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pk_payterm</span>&gt;</span>4<span class="tag">&lt;/<span class="name">pk_payterm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pk_custfinance</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custprop</span>&gt;</span>0<span class="tag">&lt;/<span class="name">custprop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pk_custclass</span>&gt;</span>0201<span class="tag">&lt;/<span class="name">pk_custclass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pk_custsale</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paytermdefault</span>&gt;</span>4<span class="tag">&lt;/<span class="name">paytermdefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">respdept</span>&gt;</span>CM0702<span class="tag">&lt;/<span class="name">respdept</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">respperson</span>&gt;</span>24028001<span class="tag">&lt;/<span class="name">respperson</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pk_org</span>&gt;</span>CM0103<span class="tag">&lt;/<span class="name">pk_org</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pk_custsale</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def13</span>&gt;</span>582229<span class="tag">&lt;/<span class="name">def13</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>这是 <span class="symbol">&amp;amp;</span> 符号<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  //  这里发生了转义！！！</span><br><span class="line"><span class="tag">&lt;<span class="name">isfreecust</span>&gt;</span>N<span class="tag">&lt;/<span class="name">isfreecust</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def9</span>&gt;</span>2<span class="tag">&lt;/<span class="name">def9</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def7</span>&gt;</span>0203<span class="tag">&lt;/<span class="name">def7</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taxpayerid</span>&gt;</span>无<span class="tag">&lt;/<span class="name">taxpayerid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def5</span>&gt;</span>1<span class="tag">&lt;/<span class="name">def5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">def6</span>&gt;</span>0301<span class="tag">&lt;/<span class="name">def6</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何解决呢？"><a href="#如何解决呢？" class="headerlink" title="如何解决呢？"></a>如何解决呢？</h2><p>在使用mybatis 时我们sql是写在xml 映射文件中，如果写的sql中有一些特殊的字符的话，在解析xml文件的时候会被转义，但我们不希望他被转义，所以我们要使用来解决。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[ ]]&gt;</span><br></pre></td></tr></table></figure><p>写在这个里面的 特殊字符不会被xml转义</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//禁止 name --&gt; xml 过程出现特殊字符，从而转义导致报错</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">name = <span class="string">&quot;&lt;![CDATA[&quot;</span>+ name + <span class="string">&quot;]]&gt;&quot;</span>;</span><br><span class="line">jsonobj.put(<span class="string">&quot;name&quot;</span>, name);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何更换后端/前端服务启动地址</title>
      <link href="/2024/08/09/240717/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%90%8E%E7%AB%AF-%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%9C%B0%E5%9D%80/"/>
      <url>/2024/08/09/240717/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%90%8E%E7%AB%AF-%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="如何更换后端-x2F-前端服务的启动地址"><a href="#如何更换后端-x2F-前端服务的启动地址" class="headerlink" title="如何更换后端&#x2F;前端服务的启动地址"></a>如何更换后端&#x2F;前端服务的启动地址</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li>进入 HOME &#x2F; ierp &#x2F; bin ———&gt; porp.xml</li></ul><p><img src="/2024/08/09/240717/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%90%8E%E7%AB%AF-%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%9C%B0%E5%9D%80/image-20240809095130397.png" alt="image-20240809095130397"></p><ul><li>或者 打开  sysConfig</li></ul><p><img src="/2024/08/09/240717/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%90%8E%E7%AB%AF-%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%9C%B0%E5%9D%80/image-20240809095357125.png" alt="image-20240809095357125"></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>一般比较低的 nc版本，需要重量端和客户端一起启动的时候，会涉及到这里，二者的启动端口要配置成一样的。</li><li>ncc 前后端分离的这种，似乎不需要配置这里。</li></ul><p><img src="/2024/08/09/240717/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2%E5%90%8E%E7%AB%AF-%E5%89%8D%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%9C%B0%E5%9D%80/image-20240809095620351.png" alt="image-20240809095620351"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NC中的事务</title>
      <link href="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
      <url>/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="NC中的事务管理"><a href="#NC中的事务管理" class="headerlink" title="NC中的事务管理"></a>NC中的事务管理</h1><ul><li>在NCC开发中，通过.upm文件定义的 接口和实现类，能够开启事务。（tx &#x3D; “CMT”开启事务，tx &#x3D; “NONE”则不开启事务）</li></ul><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728210310791.png" alt="image-20240728210310791"></p><h2 id="验证接口中的事务是够生效"><a href="#验证接口中的事务是够生效" class="headerlink" title="验证接口中的事务是够生效"></a>验证接口中的事务是够生效</h2><ul><li>首先是最简单的一种，直接在后台任务中  获取实现类，执行插入方法。 （接口开启了事务  tx &#x3D; “CMT”）<ul><li>不报错，正常插入</li><li>报错，回滚</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后台任务  这里不小心忘记后台任务本身也开启了事务管理，但是不影响后续测试数据和结论。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line"><span class="comment">//定义了接口， tx=“CMT”开启了事务，方法里面执行一条插入语句</span></span><br><span class="line">            service.processOneLevelSave();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;)&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行正常，没有报错的情况"><a href="#执行正常，没有报错的情况" class="headerlink" title="执行正常，没有报错的情况"></a>执行正常，没有报错的情况</h3><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728210802331.png" alt="image-20240728210802331"></p><h3 id="报错，则回滚，数据库内没有插入数据"><a href="#报错，则回滚，数据库内没有插入数据" class="headerlink" title="报错，则回滚，数据库内没有插入数据"></a>报错，则回滚，数据库内没有插入数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错了~&quot;</span>);  <span class="comment">//这里我们手工抛出一个错误，运行看效果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728211332741.png" alt="image-20240728211332741"></p><h2 id="两个开启事务的接口，不会相互影响"><a href="#两个开启事务的接口，不会相互影响" class="headerlink" title="两个开启事务的接口，不会相互影响"></a>两个开启事务的接口，不会相互影响</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProcess</span><span class="params">()</span> &#123; <span class="comment">//这里不是后台任务，因为不能让这两个接口方法处在一个事务之中。</span></span><br><span class="line"></span><br><span class="line"> <span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line"> <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"> service.processOneLevelSave();</span><br><span class="line"> redService.processTwoLevelSave_Red();</span><br><span class="line">&#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错~&quot;</span>); <span class="comment">//第二个接口抛出了错误，是否回回滚第一个接口已经插入的数据？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240729151925101.png" alt="image-20240729151925101"></p><ul><li>说明，两个接口按照顺序执行的情况，第二个接口报错是不会影响到第一个接口的事务的！<strong>除非这两个接口已经被包含在另一个事务之中了</strong>。</li></ul><h2 id="验证接口事务的独立性"><a href="#验证接口事务的独立性" class="headerlink" title="验证接口事务的独立性"></a>验证接口事务的独立性</h2><h3 id="接口中调用另外两个接口的插入方法"><a href="#接口中调用另外两个接口的插入方法" class="headerlink" title="接口中调用另外两个接口的插入方法"></a>接口中调用另外两个接口的插入方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后台任务，入口方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line">service.processControlTwo(); <span class="comment">//在这个开启事务的接口方法中，调用另外两个开启事务的接口，向数据库各插入一条数据。</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processControlTwo</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">redService.processTwoLevelSave_Red(); <span class="comment">//插入一条数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line">blueService.processTwoLevelSave_Blue();<span class="comment">//插入一条数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>两个接口都没有报错的情况，执行后~</li></ul><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728213203351.png" alt="image-20240728213203351"></p><h3 id="其中，第二个接口执行后报错"><a href="#其中，第二个接口执行后报错" class="headerlink" title="其中，第二个接口执行后报错"></a>其中，第二个接口执行后报错</h3><ul><li>当第二个接口执行后报错，那么发生回滚，此时是否会影响到第一个接口中插入的数据 ？</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行后报错~&quot;</span>); <span class="comment">//在第二个接口执行完插入语句后，手动抛出错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728213659256.png" alt="image-20240728213659256"></p><h3 id="第二个接口报错被内部catch住，没有抛出来的情况"><a href="#第二个接口报错被内部catch住，没有抛出来的情况" class="headerlink" title="第二个接口报错被内部catch住，没有抛出来的情况"></a>第二个接口报错被内部catch住，没有抛出来的情况</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行后报错~&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728214039821.png" alt="image-20240728214039821"></p><h3 id="如果不在内层，在外面一层去catch呢？"><a href="#如果不在内层，在外面一层去catch呢？" class="headerlink" title="如果不在内层，在外面一层去catch呢？"></a>如果不在内层，在外面一层去catch呢？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processControlTwo</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line">       <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">redService.processTwoLevelSave_Red();</span><br><span class="line"></span><br><span class="line"><span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">blueService.processTwoLevelSave_Blue();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728221233199.png" alt="image-20240728221233199"></p><p><strong>总结：由此，我们发现了一些值得注意的地方。</strong></p><ol><li><strong>是否发生回滚的一个因素便是，开启了事务的接口的方法有没有抛出错误！</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line"><span class="comment">//service.processControlTwo();</span></span><br><span class="line">service.processOneLevelSave();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">     <span class="comment">//  throw new DAOException(&quot;执行时报错了~&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728223339377.png" alt="image-20240728223339377"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错了~&quot;</span>); <span class="comment">//内部发生错误，但被捕获处理，没有抛出！</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728223552758.png" alt="image-20240728223552758"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line"><span class="comment">//service.processControlTwo();</span></span><br><span class="line">service.processOneLevelSave();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">      </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错了~&quot;</span>);<span class="comment">//抛出错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728223852818.png" alt="image-20240728223852818"></p><ol start="2"><li><strong>无论是多少层嵌套关系，一个接口调用另一个接口，再调用另一个接口，事务发生回滚的范围一定是第一个开启事务接口调用的方法的作用域。</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line">service.processOneLevelSave();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">      </span><br><span class="line">       <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">       redService.processTwoLevelSave_Red(); <span class="comment">//接着调用另外一个开启了事务的 接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line">       blueService.processTwoLevelSave_Blue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错~&quot;</span>); <span class="comment">//调用第三个接口方法时报错了，此时前面已经插入了两条数据了，此时回滚的话情况如何？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728230344464.png" alt="image-20240728230344464"></p><ul><li>可以看到，从第一个接口调用开始，事务的范围就已经确定了，是第一个接口方法的作用域，接下来层层调用的接口方法，无论哪一层报错，都会整个回滚！（这里实际上后台任务就已经是开启了事务了，当时没有考虑到这一点~此时事务的作用范围是整个后台任务！）</li></ul><ol start="3"><li><strong>即便是第三层，第十层，第100层接口（必须是接口抛出错误，普通方法抛出错误没用，除非连续抛出错误，抛到上一层接口去了。）内抛出了错误，都会被NC系统监察到，并视为此次事务中发生了报错，导致事务回滚，无论这个报错是否在上一层被捕获到了。</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line">service.processOneLevelSave();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">   </span><br><span class="line">    <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">    redService.processTwoLevelSave_Red(); <span class="comment">//接着调用另外一个开启了事务的 接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">    </span><br><span class="line">    <span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        blueService.processTwoLevelSave_Blue(); <span class="comment">//在第三层被catch住了，并没有抛到最外面的第一层去！</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错~&quot;</span>); <span class="comment">//调用第三个接口方法时报错了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728232244324.png" alt="image-20240728232244324"></p><ul><li>那什么叫做普通方法抛出错误没用呢？（注意这里指普通方法抛错到上一层后，被catch住，并没有继续抛错）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreAlertObject <span class="title function_">executeTask</span><span class="params">(BgWorkingContext arg0)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">SaveOneLeveService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveOneLeveService.class);</span><br><span class="line">service.processOneLevelSave();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOneLevelSave</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002344&#x27;,&#x27;人员_OneLeve&#x27;,&#x27;男&#x27;,&#x27;202405040002&#x27;);&quot;</span>) ;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());  </span><br><span class="line">   </span><br><span class="line">    <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">    redService.processTwoLevelSave_Red(); <span class="comment">//接着调用另外一个开启了事务的 接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//blueService.processTwoLevelSave_Blue();</span></span><br><span class="line">        <span class="built_in">this</span>.processTwoLevelSave_Red2(); <span class="comment">//这里并不再是开启事务管理的接口来调方法了，而是换成一个普通方法！</span></span><br><span class="line">                                             <span class="comment">//抛出错误，在这一层被catch住了</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red2</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002312&#x27;,&#x27;人员red2&#x27;,&#x27;男&#x27;,&#x27;202405040012&#x27;);&quot;</span>) ;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行时报错~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728233102993.png" alt="image-20240728233102993"></p><ul><li>因为NC系统只能监视到开启事务管理的接口里面的方法报错，在上面的代码中，普通方法内报错后在上层捕获到，导致上层开启事务管理的接口，并没有抛出错误，所以NC系统视为当前事务正常执行，并没有发生回滚。</li></ul><h2 id="验证接口事务独立性-2"><a href="#验证接口事务独立性-2" class="headerlink" title="验证接口事务独立性_2"></a>验证接口事务独立性_2</h2><h3 id="接口中调用一个接口，再调用一个普通方法"><a href="#接口中调用一个接口，再调用一个普通方法" class="headerlink" title="接口中调用一个接口，再调用一个普通方法"></a>接口中调用一个接口，再调用一个普通方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processControlTwo</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">redService.processTwoLevelSave_Red();</span><br><span class="line"><span class="built_in">this</span>.processTwoLevelSave_Blue(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002365&#x27;,&#x27;人员_this&#x27;,&#x27;女&#x27;,&#x27;202405040009&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行正常，插入两条数据</li></ul><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728215058835.png" alt="image-20240728215058835"></p><h3 id="普通方法中，抛出错误的情况"><a href="#普通方法中，抛出错误的情况" class="headerlink" title="普通方法中，抛出错误的情况"></a>普通方法中，抛出错误的情况</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002365&#x27;,&#x27;人员_this&#x27;,&#x27;女&#x27;,&#x27;202405040009&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行后发生报错~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果会不会回滚呢？如何回滚的呢？</li></ul><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240728215622115.png" alt="image-20240728215622115"></p><ul><li>实际上，这里普通方法抛出了错误，但是没有在上层被捕获处理掉，导致继续向上抛错误，这样就让<strong>开启了事务的接口方法抛出了错误</strong>，被NC事务系统发现了，导致的整个事务的回滚。</li></ul><h3 id="普通方法抛出错误，但是在上一层被捕获到！"><a href="#普通方法抛出错误，但是在上一层被捕获到！" class="headerlink" title="普通方法抛出错误，但是在上一层被捕获到！"></a>普通方法抛出错误，但是在上一层被捕获到！</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前提是这两个方法都是被一个开起事务管理的接口方法来调用的，它们两个都处于一个大的事务中。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processControlTwo</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">redService.processTwoLevelSave_Red();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">processTwoLevelSave_Blue();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.getStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//接口的方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345A&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//普通方法</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002365&#x27;,&#x27;人员_this&#x27;,&#x27;女&#x27;,&#x27;202405040009&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;执行后发生报错~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240729153620915.png" alt="image-20240729153620915"></p><h2 id="NC中的独立事务-RequiresNew"><a href="#NC中的独立事务-RequiresNew" class="headerlink" title="NC中的独立事务   _RequiresNew"></a>NC中的独立事务   _RequiresNew</h2><ul><li><strong>在NC中，以接口实现类的方式（tx&#x3D;“CMT”）是能够实现事务管理的，但是并不是独立事务！独立事务也是同样的定义方式，但是方法名字的后面要以 _RequiresNew 为结尾！</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SaveTwoLeveRedService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">processTwoLevelSaveRed_RequiresNew</span><span class="params">()</span> <span class="keyword">throws</span> DAOException; <span class="comment">//独立事务</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独立事务间是相互独立的"><a href="#独立事务间是相互独立的" class="headerlink" title="独立事务间是相互独立的"></a>独立事务间是相互独立的</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProcess</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">redService.processTwoLevelSave_Red(); <span class="comment">//开启事务管理的接口方法</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345A&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//首先，我们在外层向数据库内插入了一条数据（未提交~）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">qryBuf</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>; <span class="comment">// 查出来一条数据！</span></span><br><span class="line">List&lt;Object&gt; res = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line">        <span class="comment">//查询出来一条数据，因为在同一个事务中，虽然还没提交，但是是可以查询到的！</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         redService.processTwoLevelSaveRed_RequiresNew(); <span class="comment">//开启一个独立事务 </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>; <span class="comment">// 查出来两条数据，但是数据库内还是一条数据都没有！</span></span><br><span class="line">List&lt;Object&gt; res1 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line"><span class="comment">//独立事务执行完成，实际并没有提交，因为此时数据库查询还是查不到数据，但是这里涉及到一个事务的传播规则，内层的独立事务执行结束后，</span></span><br><span class="line"><span class="comment">//发现外层还有事务的话，会加入到外层的事务之中。跟外层事务一起提交。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果外层 事务报错的话，独立事务的强大性才能体现，它不会随着外层事务的回滚而一起回滚，而是单独提交自己的事务。</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;外层报错！&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//独立事务方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSaveRed_RequiresNew</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>;</span><br><span class="line">List&lt;Object&gt; res1 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());  <span class="comment">//[] 两个事务，在各自没有提交的时候无法互相读数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();     </span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002346&#x27;,&#x27;人员__RequiresNew&#x27;,&#x27;女&#x27;,&#x27;202405040005&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>事务与独立事务是相互隔离的，双方都不能读取到各自未提交的数据，但是当事务是嵌套的关系的时候，根据事务传播性，内层事务执行结束后不会自动提交，而是加入到外层事务之中，跟外层事务一起提交。（<strong>这里或许可以理解为，内层事务执行完成后会提交给外层事务？等提交到最外层以后再一起提交到数据库？</strong>）</li><li>当内层的独立事务抛错时（在上一层捕获到，并没有继续抛出），则只会回滚独立事务，外层事务不受影响。</li><li>当外层事务报错时，独立事务会单独提交，不会回滚。</li></ul><p><strong>提问：如果不是  事务中包含独立事务，只是事务中包含事务，则相互之间有隔离性吗？</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(</span><br><span class="line"><span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345A&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf0</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>;</span><br><span class="line">List&lt;Object&gt; res0 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf0, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line">       <span class="comment">// 1条</span></span><br><span class="line"><span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">blueService.processTwoLevelSave_Blue();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>;</span><br><span class="line">List&lt;Object&gt; res1 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line">       <span class="comment">//两条</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Blue</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>;</span><br><span class="line">List&lt;Object&gt; res1 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line"><span class="comment">//  1 条 ， 这里可以看到，在这个事务中，能够查询到外层事务中插入但未提交的数据，说明二者没有隔离性。</span></span><br><span class="line">       <span class="comment">// 这个现象与上面，事务中嵌套一个独立事务的结果不一样。</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002347&#x27;,&#x27;人员_blue&#x27;,&#x27;女&#x27;,&#x27;202405040008&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务中启用独立事务，则独立事务报错会如何？"><a href="#事务中启用独立事务，则独立事务报错会如何？" class="headerlink" title="事务中启用独立事务，则独立事务报错会如何？"></a>事务中启用独立事务，则独立事务报错会如何？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProcess</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">redService.processTwoLevelSave_Red(); <span class="comment">//开启普通事务的方法。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345A&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">          redService.processTwoLevelSaveRed_RequiresNew(); <span class="comment">//开启事务的接口方法中调用开启独立事务的方法    </span></span><br><span class="line">       &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSaveRed_RequiresNew</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002346&#x27;,&#x27;人员__RequiresNew&#x27;,&#x27;女&#x27;,&#x27;202405040005&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString()); </span><br><span class="line">       </span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;独立事务报错！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>只要在上一次被catch捕获到，则不会影响外层的事务的执行，回滚只回滚独立事务的数据！</strong></li></ul><h3 id="事务中启用独立事务，则事务报错会影响独立事务吗"><a href="#事务中启用独立事务，则事务报错会影响独立事务吗" class="headerlink" title="事务中启用独立事务，则事务报错会影响独立事务吗"></a>事务中启用独立事务，则事务报错会影响独立事务吗</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProcess</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">redService.processTwoLevelSave_Red(); <span class="comment">//开启普通事务的方法。</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345A&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line">       </span><br><span class="line">       <span class="type">SaveTwoLeveRedService</span> <span class="variable">redService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveRedService.class);</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">          redService.processTwoLevelSaveRed_RequiresNew(); <span class="comment">//开启事务的接口方法中调用开启独立事务的方法    </span></span><br><span class="line">       &#125;<span class="keyword">catch</span>&#123;  </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DAOException</span>(<span class="string">&quot;事务报错！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSaveRed_RequiresNew</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002346&#x27;,&#x27;人员__RequiresNew&#x27;,&#x27;女&#x27;,&#x27;202405040005&#x27;);&quot;</span>) ;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>独立事务顺利执行结束，外层事务报错，则不会影响到独立事务中发生修改的数据！</strong></li></ul><h1 id="事务代码分析"><a href="#事务代码分析" class="headerlink" title="事务代码分析"></a>事务代码分析</h1><h2 id="当前没有事务，开启一个新的事务时"><a href="#当前没有事务，开启一个新的事务时" class="headerlink" title="当前没有事务，开启一个新的事务时"></a>当前没有事务，开启一个新的事务时</h2><ul><li>首先，当一个开启了事务管理的接口，通过 远程调用的 方式，执行一个方法时，假设当前并不处于一个事务之中，则执行这个方法会开启一个新的事务。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line">blueService.processTwoLevelSave_Blue(); <span class="comment">//这个接口开启了事务管理 （ upm文件中 tx属性 = &quot;CMT&quot; ）</span></span><br></pre></td></tr></table></figure><ul><li>NC事务管理机制会接管这个方法，在执行方法之前，进入到   <strong>nc.bs.framework.ejb.CMTEJBServiceHandler</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getName().endsWith(<span class="string">&quot;_RequiresNew&quot;</span>))  <span class="comment">//判断是不是独立事务</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.cmtProxy.delegate_RequiresNew(<span class="built_in">this</span>.wrapped, method, args); </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.cmtProxy.delegate(<span class="built_in">this</span>.wrapped, method, args);  <span class="comment">//调用 nc.itf.framework.ejb.CMTProxy_Local.delegate</span></span><br><span class="line"> </span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">lastEJBException</span> <span class="operator">=</span> getLastEJBException(e);</span><br><span class="line">    <span class="keyword">if</span> (lastEJBException == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> e; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (lastEJBException.getCause() != <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> lastEJBException.getCause(); </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的代码我们可以看到，会首先判断这个接口的方法名字是否以  _RequiresNew 结尾，我们这里调用的方法不是以这个结尾的，所以会执行下面的.delegate方法。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">delegate</span><span class="params">(Object arg0, Method arg1, Object[] arg2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  FrameworkEJBException frameworkEJBException;</span><br><span class="line">  beforeCallMethod(<span class="number">201</span>);   <span class="comment">// 1. 开启事务前方法 *</span></span><br><span class="line">  <span class="type">Exception</span> <span class="variable">er</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    TxMark.enterTx(<span class="string">&quot;Requires&quot;</span>);</span><br><span class="line">    o = _getBeanObject().delegate(arg0, arg1, arg2);   <span class="comment">// 2. 执行方法 *</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logRB(e, arg1);</span><br><span class="line">    er = e;</span><br><span class="line">    TxMark.recordCause(er);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable thr) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    logRB(thr, arg1);</span><br><span class="line">    frameworkEJBException = <span class="keyword">new</span> <span class="title class_">FrameworkEJBException</span>(<span class="string">&quot;Fatal unknown error&quot;</span>, thr);</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="type">TransAOPException</span> <span class="variable">beforeE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    afterCallMethod(<span class="number">201</span>, (Exception)frameworkEJBException); <span class="comment">// 3. 事务结束前方法 *</span></span><br><span class="line">    TxMark.recordCause((Throwable)frameworkEJBException);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TransAOPException e) &#123;</span><br><span class="line"></span><br><span class="line">    beforeE = e;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RemoteException remoteException) &#123;</span><br><span class="line">    Logger.error(<span class="string">&quot;HGY: Unexpected error when call afterCallMethod&quot;</span>, remoteException);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    TxMark.leaveTx(<span class="string">&quot;Requires&quot;</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span> (frameworkEJBException != <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> frameworkEJBException; </span><br><span class="line">  <span class="keyword">if</span> (beforeE != <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(beforeE.getMessage()); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面我们关注 3 个比较重要的方法  <ul><li>beforeCallMethod(201);   &#x2F;&#x2F; 1. 开启事务前方法 *</li><li>o &#x3D; _getBeanObject().delegate(arg0, arg1, arg2);   &#x2F;&#x2F; 2. 执行方法 *</li><li>afterCallMethod(201, (Exception)frameworkEJBException); &#x2F;&#x2F; 3. 事务结束前方法 *</li></ul></li></ul><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="beforeCallMethod-201-x2F-x2F-方法调用前"><a href="#beforeCallMethod-201-x2F-x2F-方法调用前" class="headerlink" title="beforeCallMethod(201); &#x2F;&#x2F;方法调用前"></a>beforeCallMethod(201); &#x2F;&#x2F;方法调用前</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeCallMethod</span><span class="params">(<span class="type">int</span> methodId)</span> &#123;</span><br><span class="line">  Logger.info(<span class="string">&quot;Begin Transaction(&quot;</span> + methodId + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  MwTookit.setThreadState(<span class="string">&quot;nc.bs.mw.naming.BeanBase.beforeCallMethod&quot;</span>);</span><br><span class="line">  setLastCallTime(System.currentTimeMillis());</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isCmt</span> <span class="operator">=</span> ((HomeBase)getEJBLocalHome()).getEJBBeanDescriptor().isCmt(); <span class="comment">//判断当前接口是否开启了事务管理</span></span><br><span class="line">  <span class="keyword">if</span> (isCmt) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//如果开启了事务管理的话</span></span><br><span class="line">      <span class="built_in">this</span>.currentMethodTransectionType = getMethodTransectionType(methodId); <span class="comment">//获取事务的传播类型  1 或者 3 --&gt;后续会根据这个得到</span></span><br><span class="line">                                                                              <span class="comment">//真正的事务传播类型  Sources / joined</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">isolateLevel</span> <span class="operator">=</span> getMethodIsolateLevelType(methodId);  <span class="comment">//获取事务隔离级别 2 </span></span><br><span class="line">      setIerpTransactionManagerProxy(TransactionFactory.getTMProxy());</span><br><span class="line">      getIerpTransactionManagerProxy().begin(<span class="built_in">this</span>.currentMethodTransectionType, isolateLevel);<span class="comment">// 开启事务 *</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      Logger.error(<span class="string">&quot;BeforeCallMethod&quot;</span>, e);</span><br><span class="line">      getIerpTransactionManagerProxy().clearTrans();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;begin trans Error!!&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有开启事务管理，则不会开启事务，继续在当前线程中执行，被视作一个普普通通的方法。</span></span><br><span class="line">    <span class="keyword">if</span> (getIerpUserTransaction() == <span class="literal">null</span>) &#123;</span><br><span class="line">      setIerpTransactionManagerProxy(<span class="literal">null</span>);</span><br><span class="line">      setIerpUserTransaction(TransactionFactory.getUTransaction());</span><br><span class="line">    &#125; </span><br><span class="line">    getIerpUserTransaction().bindToCurrentThread();</span><br><span class="line">  &#125; </span><br><span class="line">  MwTookit.setThreadState(<span class="string">&quot;nc.bs.mw.naming.BeanBase.beforeCallMethod over&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面有三个地方值得关注<ul><li>事务的传播类型是什么 ？</li><li>事务的隔离级别是什么？</li><li>.begin（）方法中又做了什么？</li></ul></li></ul><h4 id="getMethodTransectionType-methodId-x2F-x2F-获取事务传播类型"><a href="#getMethodTransectionType-methodId-x2F-x2F-获取事务传播类型" class="headerlink" title="getMethodTransectionType(methodId)  &#x2F;&#x2F;获取事务传播类型"></a>getMethodTransectionType(methodId)  &#x2F;&#x2F;获取事务传播类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMethodTransectionType</span><span class="params">(<span class="type">int</span> methodId)</span> &#123;</span><br><span class="line">  MwTookit.setThreadState(<span class="string">&quot;nc.bs.mw.naming.BeanBase.getMethodTransectionType &quot;</span>);</span><br><span class="line">  <span class="type">HomeBase</span> <span class="variable">hb</span> <span class="operator">=</span> (HomeBase)getEJBLocalHome();</span><br><span class="line">  <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> methodId - <span class="number">200</span>;</span><br><span class="line">  <span class="type">int</span> <span class="variable">methodTransectionType</span> <span class="operator">=</span> hb.getBusinessMethodTransectoinType()[id]; [<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">  MwTookit.setThreadState(<span class="string">&quot;nc.bs.mw.naming.BeanBase.getMethodTransectionType over&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> methodTransectionType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240730110540155.png" alt="image-20240730110540155"></p><ul><li><p>在这里，方法目前不处于事务之中，我们开启一个新的事务，且不以 _RequiresNew 结尾，此时我们拿到的事务传播类型是  1</p></li><li><p>在下面的Begin方法中，会根据我们上边拿到的  int 值 转换成真正的 事务传播类型 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">(<span class="type">int</span> transType)</span> <span class="keyword">throws</span> NotSupportedException, SystemException &#123;</span><br><span class="line">  <span class="keyword">switch</span> (transType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">//非 _RequiresNew 结尾的方法开启事务</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.tranStack.isEmpty()) &#123;  <span class="comment">//当前方法调用时，不处于已有的事务之中</span></span><br><span class="line">        createTransaction(TransactionContextType.SOURCE); <span class="comment">//事务传播类型 为 SOURCE</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//这里代表，非 _RequiresNew 结尾的方法开启事务，但是方法调用时，已处于一个事务之中了。</span></span><br><span class="line">        createTransaction(TransactionContextType.JOINED); <span class="comment">// 事务传播类型 为 JOINED</span></span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//以 _RequiresNew 结尾的方法开启事务</span></span><br><span class="line">      createTransaction(TransactionContextType.SOURCE); <span class="comment">//事务传播类型 为 SOURCE</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">          </span><br><span class="line">     ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SOURCE ：开启一个新的事务。如果一个事务已经存在，则先将这个存在的事务挂起 。</p></li><li><p>JOINED : 支持当前事务，如果当前没有事务，就新建一个事务。很好理解，不管有几个事务存在，都合并成一个事务来处理，只要有一个事务抛出异常，所有事务都会回滚；</p></li></ul><p><strong>注意：</strong> <strong>在下面两种情况的时候，你创建的事务传播类型为 SOURCE</strong></p><ol><li>当前没有处于事务之中，而你创建了一个新的事务的时候 </li><li>无论当前有没有处于事务之中，创建了一个独立事务</li></ol><p><strong>注意：如果，当前已经处于一个事务之中了，又开起了一个普通的事务（非独立事务），则此时事务传播类型为 JOINED</strong> </p><h4 id="getMethodIsolateLevelType-methodId-x2F-x2F-获取事务隔离级别"><a href="#getMethodIsolateLevelType-methodId-x2F-x2F-获取事务隔离级别" class="headerlink" title="getMethodIsolateLevelType(methodId) &#x2F;&#x2F;获取事务隔离级别"></a>getMethodIsolateLevelType(methodId) &#x2F;&#x2F;获取事务隔离级别</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private int getMethodIsolateLevelType(int methodId) &#123;</span><br><span class="line">  HomeBase hb = (HomeBase)getEJBLocalHome();</span><br><span class="line">  int id = methodId - 200;</span><br><span class="line">  int methodTransectionType = hb.getIsolateLevel()[id];</span><br><span class="line">  return methodTransectionType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240731103221372.png" alt="image-20240731103221372"></p><ul><li>NC系统中，事务的隔离级别只有  2 这个类型，似乎整个NC系统都默认了  仅有的一种事务隔离级别。</li><li><strong>读已提交</strong></li></ul><p><strong>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</strong></p><ul><li>如同上面讲过的，同样的select语句，在同一个事务之中，前后查询出来的结果不一致，因为有其他实例有新的commit。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processTwoLevelSave_Red</span><span class="params">()</span> <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(</span><br><span class="line"><span class="string">&quot;INSERT INTO TEST_TABLE (PK_NO,NAME,SEX,STUDENT_CARD) VALUES (&#x27;billno2002345A&#x27;,&#x27;人员red&#x27;,&#x27;男&#x27;,&#x27;202405040003&#x27;);&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeUpdate(buf.toString());</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf0</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>;</span><br><span class="line">List&lt;Object&gt; res0 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf0, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line">       <span class="comment">// 1条</span></span><br><span class="line"><span class="type">SaveTwoLeveBuleService</span> <span class="variable">blueService</span> <span class="operator">=</span> NCLocator.getInstance().lookup(SaveTwoLeveBuleService.class);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">blueService.processTwoLevelSave_Blue();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">qryBuf</span> <span class="operator">=</span> <span class="string">&quot;select * from test_table ;&quot;</span>;</span><br><span class="line">List&lt;Object&gt; res1 = (List&lt;Object&gt;) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(qryBuf, <span class="keyword">new</span> <span class="title class_">ArrayListProcessor</span>());</span><br><span class="line">       <span class="comment">// 2条</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="begin-this-currentMethodTransectionType-isolateLevel-x2F-x2F-开启事务"><a href="#begin-this-currentMethodTransectionType-isolateLevel-x2F-x2F-开启事务" class="headerlink" title=".begin(this.currentMethodTransectionType, isolateLevel);&#x2F;&#x2F; 开启事务"></a>.begin(this.currentMethodTransectionType, isolateLevel);&#x2F;&#x2F; 开启事务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个方法就是根据上面获取到的  事务传播类型的int值，创建对应的事务。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">(<span class="type">int</span> transType)</span> <span class="keyword">throws</span> NotSupportedException, SystemException &#123;</span><br><span class="line">     <span class="keyword">switch</span> (transType) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.tranStack.isEmpty()) &#123;</span><br><span class="line">           createTransaction(TransactionContextType.SOURCE);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           createTransaction(TransactionContextType.JOINED);</span><br><span class="line">         &#125; </span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">         createTransaction(TransactionContextType.SOURCE);</span><br><span class="line">         <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><h3 id="getBeanObject-delegate-arg0-arg1-arg2-动态代理执行目标方法"><a href="#getBeanObject-delegate-arg0-arg1-arg2-动态代理执行目标方法" class="headerlink" title="_getBeanObject().delegate(arg0, arg1, arg2); 动态代理执行目标方法"></a>_getBeanObject().delegate(arg0, arg1, arg2); 动态代理执行目标方法</h3><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240731111246436.png" alt="image-20240731111246436"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">delegate</span><span class="params">(Object target, Method m, Object[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> m.invoke(target, args);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.getTargetException() <span class="keyword">instanceof</span> Exception)</span><br><span class="line">      <span class="keyword">throw</span> (Exception)e.getTargetException(); </span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>这里就是以代理的方式，执行开启事务的目标方法了。</strong></li></ul><h3 id="afterCallMethod-201-Exception-frameworkEJBException-x2F-x2F-方法调用后"><a href="#afterCallMethod-201-Exception-frameworkEJBException-x2F-x2F-方法调用后" class="headerlink" title="afterCallMethod(201, (Exception)frameworkEJBException); &#x2F;&#x2F;方法调用后"></a>afterCallMethod(201, (Exception)frameworkEJBException); &#x2F;&#x2F;方法调用后</h3><p><img src="/2024/07/28/240717/NC%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/image-20240731111531206.png" alt="image-20240731111531206"></p><ul><li>进入到 <strong>afterCallMethod</strong>方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterCallMethod</span><span class="params">(<span class="type">int</span> methodId, Exception exception)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">  MwTookit.setThreadState(<span class="string">&quot;nc.bs.mw.naming.BeanBase.afterCallMethod&quot;</span>);</span><br><span class="line">  <span class="type">TransAOPException</span> <span class="variable">beforeE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isCmt</span> <span class="operator">=</span> ((HomeBase)getEJBLocalHome()).getEJBBeanDescriptor().isCmt();</span><br><span class="line">  <span class="keyword">if</span> (isCmt) &#123; <span class="comment">//判断是否开启了事务管理</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      getIerpTransactionManagerProxy().end(exception);   <span class="comment">//重点看这个.end方法。</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (TransAOPException e) &#123;</span><br><span class="line">      beforeE = e;</span><br><span class="line">    &#125; </span><br><span class="line">    setIerpTransactionManagerProxy(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getIerpUserTransaction().unbindCurrentThread(); <span class="comment">//没开启，则当做正常方法执行。</span></span><br><span class="line">  &#125; </span><br><span class="line">  Logger.info(<span class="string">&quot;End Transaction(&quot;</span> + methodId + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">  MwTookit.setThreadState(<span class="string">&quot;nc.bs.mw.naming.BeanBase.afterCallMethod over&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (beforeE != <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> beforeE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>getIerpTransactionManagerProxy().end(exception);</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">  <span class="type">IUAPTransactionManager</span> <span class="variable">m_tranManager</span> <span class="operator">=</span> tm_local.get();</span><br><span class="line">  <span class="type">TransAOPException</span> <span class="variable">beforeE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ex != <span class="literal">null</span>)  <span class="comment">//发生了异常</span></span><br><span class="line">      <span class="keyword">if</span> (m_tranManager.getTranContext().needRBPoint()) &#123;</span><br><span class="line">          <span class="comment">//NC一般的事务走不到这里，我也不知道什么时候会走这里，基本上都走else</span></span><br><span class="line">        <span class="keyword">if</span> (!((UAPTransaction)m_tranManager.getTranContext().getTransaction()).getRollbackOnly()) &#123;</span><br><span class="line">          m_tranManager.rollBackToCurInvokePoint();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DBLogger.error(</span><br><span class="line">            <span class="string">&quot;##uapTransaction##:::: set uaptransaction rollback1@!!!&quot;</span>, ex);</span><br><span class="line">          <span class="comment">//这里是 设置了一个回滚标志位，此时并没有真正的回滚。</span></span><br><span class="line">        m_tranManager.setCurTransRollBack();</span><br><span class="line">      &#125;  </span><br><span class="line">    <span class="keyword">if</span> (ex == <span class="literal">null</span>) &#123; <span class="comment">//异常为空，正常提交失误</span></span><br><span class="line">      <span class="type">UAPTransactionContext</span> <span class="variable">curTransContext</span> <span class="operator">=</span> m_tranManager.getTranContext();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!curTransContext.isNullTrans() &amp;&amp; !curTransContext.isJoined())</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          TransAOP.beforeTransCommit(((UAPTransaction)m_tranManager.getTransaction()).getKey());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RollbackException e1) &#123;</span><br><span class="line">          beforeE = <span class="keyword">new</span> <span class="title class_">TransAOPException</span>(e1.getMessage());</span><br><span class="line">          DBLogger.error(<span class="string">&quot;##uapTransaction##:::: set uaptransaction rollback beforeAOP@!!!&quot;</span>, </span><br><span class="line">              (Throwable)e1);</span><br><span class="line">          m_tranManager.setCurTransRollBack();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">          DBLogger.error(<span class="string">&quot;unknown error,not rollback &quot;</span>, e);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; </span><br><span class="line">      <span class="comment">//在这里进行提交，如果回滚标志位被设置为 true 则执行RolBack方法，不然就是Commit方法</span></span><br><span class="line">      <span class="comment">//这里的提交可以理解为，向上层事务提交？因为内层事务执行结束后，数据库内还不能查询到数据的变化，只有最外层事务结束才会在数据库看到数据变化！</span></span><br><span class="line">      <span class="comment">//即便是  普通事务嵌套一个独立事务，独立事务结束提交后，在数据库也看不到变化，只有等外层事务也结束之后，才能看到变化！</span></span><br><span class="line">    m_tranManager.commitTrans();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    DBLogger.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">if</span> (beforeE != <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">throw</span> beforeE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习_Second</title>
      <link href="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/"/>
      <url>/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化React脚手架"><a href="#初始化React脚手架" class="headerlink" title="初始化React脚手架"></a>初始化React脚手架</h1><h2 id="认识脚手架"><a href="#认识脚手架" class="headerlink" title="认识脚手架"></a>认识脚手架</h2><ul><li><p>概念 ：  用 来 帮 助 程 序 员 快 速 创 建 一 个 基 于 ×xx 库 的 模 板 项 目 </p><ul><li><p>包 含 了 所 有 需 要 的 配 置 （语法 检 查 、 jsx 编 译 、 devServer…) </p></li><li><p>下 载 好 了 所 有 相 关 的 赖 ； react 提 供 了 一 个可 用 于 创 建 react 项 目 的 脚 手 架 库 ： create-react-app</p></li><li><p>可运行查看简单的效果。</p></li></ul></li><li><p>项 目 的 整 体 技 术 架 构 为   react + webpack +es6 + eslint</p></li><li><p>使 用 脚 手 架 开 发 的 项 目 特 点 ： 模 块 化 、组 件 化 、工 程 化</p></li></ul><h2 id="创建脚手架项目"><a href="#创建脚手架项目" class="headerlink" title="创建脚手架项目"></a>创建脚手架项目</h2><ul><li>全局安装</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g create-react-app</span><br></pre></td></tr></table></figure><ul><li>切换到想要创建项目的目录，输入命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create-react-app  项目名称</span><br></pre></td></tr></table></figure><ul><li>进入项目文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 项目文件夹</span><br></pre></td></tr></table></figure><ul><li>打开项目</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240725145033712.png" alt="image-20240725145033712"></p><p>创建脚手架项目 输入 create-react-app  项目名称 等待几分钟即可~</p><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240725145801345.png" alt="image-20240725145801345"></p><p>进入到项目目录  然后输入 npm start</p><p>会自动启动项目</p><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240725145841631.png" alt="image-20240725145841631"></p><h2 id="react-脚手架提供的四个基础命令"><a href="#react-脚手架提供的四个基础命令" class="headerlink" title="react-脚手架提供的四个基础命令"></a>react-脚手架提供的四个基础命令</h2><ul><li>yarn start    运行项目生产环境</li><li>yarn build  构建项目</li><li>yarn test  运行测试环境</li><li>yarn eject  暴露webpack.js等核心配置文件，该动作不允许回滚。</li></ul><p><strong>注意：NPM 是 <a href="https://www.scaler.com/topics/nodejs/">Node.js</a> 的默认<a href="https://so.csdn.net/so/search?q=%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8&spm=1001.2101.3001.7020">包管理器</a>。它是一个在线存储库，包含数百万个用于发布项目的包以及用于与项目交互的命令行工具。Yarn 是由 Facebook 发起的包管理器，旨在解决 <a href="https://so.csdn.net/so/search?q=NPM&spm=1001.2101.3001.7020">NPM</a> 的缺点，并提供更高级的包管理工具来促进整体开发工作流程。</strong></p><p>参考：[NodeJS 简介：YARN 与 NPM - 有什么区别？终极指南 <a href="https://blog.csdn.net/mzgxinhua/article/details/136142059">2023]_node自带yarn吗?-CSDN博客</a></p><h2 id="介绍下-脚手架项目中的各个文件"><a href="#介绍下-脚手架项目中的各个文件" class="headerlink" title="介绍下 脚手架项目中的各个文件"></a>介绍下 脚手架项目中的各个文件</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><ul><li>首先，public文件夹中存放  页面相关的静态资源，包含图标，主页等……</li></ul><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240726155706078.png" alt="image-20240726155706078"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-- React大部分是单页面应用，通过不同的组件的挂载和卸载，达到更换页面的效果</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- %PUBLIC_URL%代表public文件夹的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启理想视口，用于做移动端网页的适配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;Web site created using create-react-app&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于指定网页添加到手机主屏幕后的图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 应用加壳时的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若llq不支持js则展示标签中的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240726174105595.png" alt="image-20240726174105595"></p><ul><li>在src中比较重点的是  <strong>App.js</strong>  和  <strong>index.js</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App.js  是父组件，我们定义的其他组件均挂载在父组件之上，这样子往页面上挂载组件的时候，只需要挂一个APP.js,所有组件都能被挂载上了。</span><br><span class="line"></span><br><span class="line">index.js 这个是一个入口文件，凡是用WebPack管理的项目都会有一个脚本入口文件，我们 写的js脚本都写在这个里面，就相当于在 index.html中写了。</span><br><span class="line">React在底层配置中写好了  index.js 和 index.html的对应关系，所以即使index.html 中没有引入index.js，但是index.js也会作用于index.html</span><br><span class="line"></span><br><span class="line">App.css 用来写App.js的一些样式的</span><br><span class="line">App.test.js 用来单独测试App组件的，一般用不到！</span><br><span class="line">index.css 用来写index.html页面的一些样式</span><br><span class="line">reportWebVitals.js 用于监控整个react项目的性能的。</span><br><span class="line">setupTests.js 测试用</span><br></pre></td></tr></table></figure><h3 id="其他-package-json-包说明文件"><a href="#其他-package-json-包说明文件" class="headerlink" title="其他  package.json 包说明文件"></a>其他  package.json 包说明文件</h3><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240726175621886.png" alt="image-20240726175621886"></p><h2 id="一个简单的-HELLO-组件"><a href="#一个简单的-HELLO-组件" class="headerlink" title="一个简单的 HELLO 组件"></a>一个简单的 HELLO 组件</h2><ul><li>下面写一个比较简单的  hello 组件</li></ul><h3 id="第一步，挂载APP组件到index-js"><a href="#第一步，挂载APP组件到index-js" class="headerlink" title="第一步，挂载APP组件到index.js"></a>第一步，挂载APP组件到index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入react核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//引入ReactDOM</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="comment">//引入App组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染App到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第二步，创建Hello组件"><a href="#第二步，创建Hello组件" class="headerlink" title="第二步，创建Hello组件"></a>第二步，创建Hello组件</h3><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240801093519382.png" alt="image-20240801093519382"></p><ul><li>首先创建一个components 文件夹用于盛放组件，避免混淆  组件和js脚本。</li><li>新建 Hello 文件夹，下面创建一个   index.js  &#x2F; index.jsx  可以用 index来命名，因为react会识别文件夹下的这个index.js为一个组件。</li><li>编写Hello组件</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// import &#x27;./index.css&#x27;   因为每一个不同文件夹下的index组件都可能对应一个  index.css </span></span><br><span class="line">                        <span class="comment">//后续所有的组件都被挂载到App.js 上，样式可能会混乱，所以采用样式模块化</span></span><br><span class="line">                        <span class="comment">// index.css 中间加上一个 .modules</span></span><br><span class="line">                        <span class="comment">//引入的方式就变成了下面那种！</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span> <span class="comment">//样式模块化管理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;<span class="comment">// 这里 className 里就不写 .title了，要写 hello.title</span></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;hello.title&#125;</span>&gt;</span>Hello,React!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>样式模块化应用不多，后续采用less文件。</li></ul><h3 id="第三步，挂载到APP-js身上"><a href="#第三步，挂载到APP-js身上" class="headerlink" title="第三步，挂载到APP.js身上"></a>第三步，挂载到APP.js身上</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建“外壳”组件App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Hello&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Welcome</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Welcome&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露App组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>App.js 是最外层的父组件，一般不在这个组件里写一些具体的  html标签，只是用来挂在其他的组件。</strong></li></ul><h3 id="默认暴露和分别暴露"><a href="#默认暴露和分别暴露" class="headerlink" title="默认暴露和分别暴露"></a>默认暴露和分别暴露</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span> <span class="comment">// 这段代码里面，React的引入方式是对于默认暴露的，Component的引入方式是对于分别暴露的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;  <span class="comment">//默认暴露组件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">--</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;  <span class="comment">//默认暴露组件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="title class_">Component</span></span><br><span class="line">-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123; <span class="comment">//分别暴露组件</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">--</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123; <span class="comment">//分别暴露组件</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="title class_">Component</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引入组件方式"><a href="#引入组件方式" class="headerlink" title="引入组件方式"></a>引入组件方式</h3><ul><li>因为Hello组件是 以index.js命名并且放在 .&#x2F;components&#x2F;Hello 这个个路径下了，React不会把其当做一个 入口脚本文件，而是会识别其为组件。</li><li>引入的时候，只需要引入到文件夹那一层就可以，React会默认找当前文件夹下的 index.js &#x2F; index.jsx 当做组件。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Hello&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="安装React插件，快速生成组件模板"><a href="#安装React插件，快速生成组件模板" class="headerlink" title="安装React插件，快速生成组件模板"></a>安装React插件，快速生成组件模板</h2><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240801100800584.png" alt="image-20240801100800584"></p><ul><li>如何使用，写组件的时候输入简短的命令 例如 rcc 会自动生成模板</li></ul><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240801101121679.png" alt="image-20240801101121679"></p><p><img src="/2024/07/25/240717/React%E5%AD%A6%E4%B9%A0-Second/image-20240801101136280.png" alt="image-20240801101136280"></p><ul><li>其他命令参考 插件说明页面。</li></ul><h2 id="一个组件的开发流程"><a href="#一个组件的开发流程" class="headerlink" title="一个组件的开发流程"></a>一个组件的开发流程</h2><ul><li><p>拆分组件</p></li><li><p>实现静态组件</p></li><li><p>实现动态组件</p><ul><li>数据动态加载</li><li>交互</li></ul></li></ul><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><ul><li>当服务器的 3000端口向5000端口请求数据的时候，会发生跨域的问题。</li><li><strong>报错：Access-Control-Allow-Origin</strong></li></ul><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>3000 端口发送的请求，5000端口可以接收到，但是在接收5000返回的数据的时候，会被react引擎拦截到，报错跨域！</li><li>配置代理就相当于在 3000 端口再开启一个  中间服务，3000端口（带有react引擎） 向3000端口发送请求（中间服务），然后由中间服务向5000端口请求数据，此时，5000端口将 响应数据发送给 3000端口（中间服务），再由中间服务向  原3000端口服务（带有react引擎）返回数据。</li><li>因为react引擎的缘故，发生跨域的时候会被拦截，而新开启的  中间服务 是不带react引擎的，所以不会发生跨域报错。</li><li>注意，原服务和中间服务都是开启在 3000 端口的 ； 原服务（带react引擎） 发送请求时，不能再将路径写 5000 端口了，而是要写 3000端口，不然依然会发生跨域问题。  但是向3000端口请求时，如果请求的资源 3000端口没有，则自动转发到5000端口（前提是配置了代理）。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## 方法一</span><br><span class="line"></span><br><span class="line">&gt; 在package.<span class="property">json</span>中追加如下配置</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`json</span></span><br><span class="line"><span class="string">&quot;proxy&quot;:&quot;http://localhost:5000&quot;</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 优点：配置简单，前端请求资源时可以不加任何前缀。</span><br><span class="line"><span class="number">2.</span> 缺点：不能配置多个代理。</span><br><span class="line"><span class="number">3.</span> 工作方式：上述方式配置代理，当请求了<span class="number">3000</span>不存在的资源时，那么该请求会转发给<span class="number">5000</span> （优先匹配前端资源）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 方法二</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 第一步：创建代理配置文件</span><br><span class="line"></span><br><span class="line">   <span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string">   在src下创建配置文件：src/setupProxy.js</span></span><br><span class="line"><span class="string">   `</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 编写setupProxy.<span class="property">js</span>配置具体代理规则：</span><br><span class="line"></span><br><span class="line">   <span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">   const proxy = require(&#x27;http-proxy-middleware&#x27;)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   module.exports = function(app) &#123;</span></span><br><span class="line"><span class="string">     app.use(</span></span><br><span class="line"><span class="string">       proxy(&#x27;/api1&#x27;, &#123;  //api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span></span><br><span class="line"><span class="string">         target: &#x27;http://localhost:5000&#x27;, //配置转发目标地址(能返回数据的服务器地址)</span></span><br><span class="line"><span class="string">         changeOrigin: true, //控制服务器接收到的请求头中host字段的值</span></span><br><span class="line"><span class="string">         /*</span></span><br><span class="line"><span class="string">         changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="string">         changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000</span></span><br><span class="line"><span class="string">         changeOrigin默认值为false，但我们一般将changeOrigin值设为true</span></span><br><span class="line"><span class="string">         */</span></span><br><span class="line"><span class="string">         pathRewrite: &#123;&#x27;^/api1&#x27;: &#x27;&#x27;&#125; //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span><br><span class="line"><span class="string">       &#125;),</span></span><br><span class="line"><span class="string">       proxy(&#x27;/api2&#x27;, &#123; </span></span><br><span class="line"><span class="string">         target: &#x27;http://localhost:5001&#x27;,</span></span><br><span class="line"><span class="string">         changeOrigin: true,</span></span><br><span class="line"><span class="string">         pathRewrite: &#123;&#x27;^/api2&#x27;: &#x27;&#x27;&#125;</span></span><br><span class="line"><span class="string">       &#125;)</span></span><br><span class="line"><span class="string">     )</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   `</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 优点：可以配置多个代理，可以灵活的控制请求是否走代理。</span><br><span class="line"><span class="number">2.</span> 缺点：配置繁琐，前端请求资源时必须加前缀。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal类型运算设置精度爆错问题</title>
      <link href="/2024/07/23/240717/BigDecimal%E7%B1%BB%E5%9E%8B%E8%BF%90%E7%AE%97%E8%AE%BE%E7%BD%AE%E7%B2%BE%E5%BA%A6%E7%88%86%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/2024/07/23/240717/BigDecimal%E7%B1%BB%E5%9E%8B%E8%BF%90%E7%AE%97%E8%AE%BE%E7%BD%AE%E7%B2%BE%E5%BA%A6%E7%88%86%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="BigDecimal类型运算时爆错"><a href="#BigDecimal类型运算时爆错" class="headerlink" title="BigDecimal类型运算时爆错"></a>BigDecimal类型运算时爆错</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Non-terminating decimal expansion； no exact representable decimal result</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100.00</span>;</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">60.00</span>;</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">30.00</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">res</span> <span class="operator">=</span> a.divide(b).multiply(c).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br></pre></td></tr></table></figure><ul><li>上面这段代码就会爆错！</li><li>原因是 在 java 中用 BigDecimal 的 divide 做除法的时候一定要在方法中传递第二个参数，定义精确到小数点后几位，否则在不整除的情况下，结果是无限循环小数时，就会抛出以上异常。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//BigDecimal类型做运算，除法放到最后，且必须设置精确度</span></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">def7</span> <span class="operator">=</span> def31.multiply(payMny).divide(totalCostMny, <span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br></pre></td></tr></table></figure><ul><li>注意，多层运算的时候，除法最好放在最后面，这样精度会准确些！！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Orcal查询和解决锁表问题</title>
      <link href="/2024/07/23/240717/Orcal%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%A7%A3%E5%86%B3%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2024/07/23/240717/Orcal%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%A7%A3%E5%86%B3%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Orcal查询和解决锁表的问题"><a href="#Orcal查询和解决锁表的问题" class="headerlink" title="Orcal查询和解决锁表的问题"></a>Orcal查询和解决锁表的问题</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">处理亿利项目的时候，遇到一个问题，删除单据怎么也删除不掉，跟代码发现是最后执行一个 update语句的时候卡主了，只是一个很简单的update语句，但是耗时却非常长，这就很有可能锁表了</span><br></pre></td></tr></table></figure><h2 id="首先，连上数据库，最好用管理员账号或者Root账号"><a href="#首先，连上数据库，最好用管理员账号或者Root账号" class="headerlink" title="首先，连上数据库，最好用管理员账号或者Root账号"></a>首先，连上数据库，最好用管理员账号或者Root账号</h2><h2 id="第二步，执行sql查询查看被锁表信息"><a href="#第二步，执行sql查询查看被锁表信息" class="headerlink" title="第二步，执行sql查询查看被锁表信息"></a>第二步，执行sql查询查看被锁表信息</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sess.sid,sess.serial#, lo.oracle_username,lo.os_user_name, ao.object_name,lo.locked_mode  <span class="keyword">from</span> v$locked_object lo,dba_objects ao,v$session sess <span class="keyword">where</span> ao.object_id<span class="operator">=</span>lo.object_id <span class="keyword">and</span> lo.session_id<span class="operator">=</span>sess.sid;</span><br></pre></td></tr></table></figure><p><img src="/2024/07/23/240717/Orcal%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%A7%A3%E5%86%B3%E9%94%81%E8%A1%A8%E9%97%AE%E9%A2%98/image-20240723104143683.png" alt="image-20240723104143683"></p><h2 id="第三步，杀死被锁的表进程"><a href="#第三步，杀死被锁的表进程" class="headerlink" title="第三步，杀死被锁的表进程"></a>第三步，杀死被锁的表进程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> kill session <span class="string">&#x27;860,52427&#x27;</span>;<span class="comment">--分别为SID和SERIAL#号</span></span><br></pre></td></tr></table></figure><h2 id="额外：-查看数据库引起锁表的SQL语句"><a href="#额外：-查看数据库引起锁表的SQL语句" class="headerlink" title="额外：-查看数据库引起锁表的SQL语句"></a>额外：-查看数据库引起锁表的SQL语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.USERNAME,</span><br><span class="line">       A.MACHINE,</span><br><span class="line">       A.PROGRAM,</span><br><span class="line">       A.SID,</span><br><span class="line">       A.SERIAL#,</span><br><span class="line">       A.STATUS,</span><br><span class="line">       C.PIECE,</span><br><span class="line">       C.SQL_TEXT</span><br><span class="line">  <span class="keyword">FROM</span> V$SESSION A, V$SQLTEXT C</span><br><span class="line"> <span class="keyword">WHERE</span> A.SID <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> T2.SID</span><br><span class="line">                   <span class="keyword">FROM</span> V$LOCKED_OBJECT T1, V$SESSION T2</span><br><span class="line">                  <span class="keyword">WHERE</span> T1.SESSION_ID <span class="operator">=</span> T2.SID)</span><br><span class="line">   <span class="keyword">AND</span> A.SQL_ADDRESS <span class="operator">=</span> C.ADDRESS(<span class="operator">+</span>)</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> C.PIECE;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做一张销售出库单</title>
      <link href="/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/"/>
      <url>/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="如何做一张销售出库单"><a href="#如何做一张销售出库单" class="headerlink" title="如何做一张销售出库单"></a>如何做一张销售出库单</h1><ul><li><strong>第一步，做一张销售订单 —&gt; 签字</strong></li></ul><p><img src="/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/image-20240717141338672.png" alt="image-20240717141338672"></p><ul><li><strong>找到 发货单维护 节点 —-&gt;参照销售订单新增发货单—-&gt; 保存提交</strong></li></ul><p><img src="/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/image-20240717141434481.png" alt="image-20240717141434481"></p><p><img src="/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/image-20240717141500249.png" alt="image-20240717141500249"></p><p><img src="/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/image-20240717141538937.png" alt="image-20240717141538937"></p><ul><li><p><strong>来到销售出库节点—&gt; 直接查询即可，发货单提交后自动生成一张销售出库单！</strong></p><p><img src="/2024/07/17/240717/%E5%A6%82%E4%BD%95%E5%81%9A%E4%B8%80%E5%BC%A0%E9%94%80%E5%94%AE%E5%87%BA%E5%BA%93%E5%8D%95/image-20240717141903848.png" alt="image-20240717141903848"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC业务操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何写语义模型和做报表</title>
      <link href="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/"/>
      <url>/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="如何写语义模型和做报表"><a href="#如何写语义模型和做报表" class="headerlink" title="如何写语义模型和做报表"></a>如何写语义模型和做报表</h1><ul><li>报表是可以通过语义模型来构建出来的</li></ul><h2 id="如何写一个语义模型"><a href="#如何写一个语义模型" class="headerlink" title="如何写一个语义模型"></a>如何写一个语义模型</h2><ol><li>首先，我们来到语义模型节点–&gt;找到对应的分类–&gt;新增</li></ol><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712095533795.png" alt="image-20240712095533795"></p><ol start="2"><li>新增一个语义脚本</li></ol><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712095713978.png" alt="image-20240712095713978"></p><ol start="3"><li>准备好需要的sql语句</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">a.def1 def1,</span><br><span class="line">        a.pk_org pk_org,</span><br><span class="line">        a.pk_group pk_group,</span><br><span class="line">a.pk_defdoc pk_defdoc,</span><br><span class="line">c.name name,</span><br><span class="line">nvl((<span class="keyword">CASE</span> <span class="keyword">WHEN</span> a.def3 <span class="operator">=</span> <span class="string">&#x27;~&#x27;</span> <span class="keyword">THEN</span> <span class="number">0</span>  <span class="keyword">when</span> a.def3 <span class="operator">=</span> <span class="keyword">null</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">ELSE</span> TO_NUMBER(a.def3,<span class="string">&#x27;9999999999.99&#x27;</span>) <span class="keyword">END</span> ),<span class="number">0</span>) kyed ,</span><br><span class="line">nvl(<span class="built_in">sum</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> b.vdef3 <span class="operator">=</span> <span class="string">&#x27;~&#x27;</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">WHEN</span> b.vdef3 <span class="operator">=</span><span class="keyword">null</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">ELSE</span> TO_NUMBER(b.vdef3,<span class="string">&#x27;9999999999.99&#x27;</span>) <span class="keyword">END</span>  ),<span class="number">0</span>) sumMny,</span><br><span class="line">a.def3 <span class="operator">-</span> nvl(<span class="built_in">sum</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> b.vdef3 <span class="operator">=</span> <span class="string">&#x27;~&#x27;</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">WHEN</span> b.vdef3 <span class="operator">=</span><span class="keyword">null</span> <span class="keyword">THEN</span> <span class="number">0</span> <span class="keyword">ELSE</span> TO_NUMBER(b.vdef3,<span class="string">&#x27;9999999999.99&#x27;</span>) <span class="keyword">END</span>  ),<span class="number">0</span>) subMny </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">BD_DEFDOC a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SO_SALEORDER b <span class="keyword">ON</span> a.def2 <span class="operator">=</span> b.ccustomerid</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> bd_customer c <span class="keyword">ON</span> a.def2 <span class="operator">=</span> c.pk_customer </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">a.pk_Defdoclist <span class="operator">=</span> ( <span class="keyword">SELECT</span> PK_defdoclist <span class="keyword">FROM</span> bd_defdoclist <span class="keyword">WHERE</span> code <span class="operator">=</span> <span class="string">&#x27;FDED&#x27;</span> ) </span><br><span class="line"><span class="keyword">AND</span> a.dr <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> a.enablestate <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">        <span class="keyword">AND</span> b.dr <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">c.name,</span><br><span class="line">a.def3,</span><br><span class="line">a.def1,</span><br><span class="line">a.pk_defdoc ,</span><br><span class="line">        a.pk_org,</span><br><span class="line">       a.pk_group</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">a.def1</span><br></pre></td></tr></table></figure><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712101449565.png" alt="image-20240712101449565"></p><ul><li>一个语义脚本里是可以写复杂的多表联查结构的！<ol start="4"><li>填写连接条件，没有的话不用填写，我这里就不需要填写</li></ol></li></ul><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712100527851.png" alt="image-20240712100527851"></p><ol start="5"><li><p>新增字段  点击新增把需要显示出来的字段加上！</p><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712100622018.png" alt="image-20240712100622018"></p></li><li><p>描述器和选项一般不需要，点保存–&gt;完成即可</p></li><li><p>点击预览，能看到效果图，就算成功！</p></li></ol><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712100818543.png" alt="image-20240712100818543"></p><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712100848369.png" alt="image-20240712100848369"></p><h2 id="语义模型注意点"><a href="#语义模型注意点" class="headerlink" title="语义模型注意点"></a>语义模型注意点</h2><ul><li><p>查询的字段最好是起个别名 ，尤其是选择字段那一个步骤，可能需要你一个个修改。</p></li><li><p>sql语句必须全都用英文字符，逗号，括号都要用英文字符</p></li><li><p>sql可以美化一下格式，会方便找错误</p></li><li><p>注意 sql中判断字段为空时，用 is null 不能用 &#x3D; null ;</p></li><li><p>语义脚本中最好是带着   pk_org  pk_group 写报表会用到！</p></li></ul><h2 id="写报表"><a href="#写报表" class="headerlink" title="写报表"></a>写报表</h2><ul><li>第一步新增</li></ul><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712101724330.png" alt="image-20240712101724330"></p><ul><li>第二步设计</li></ul><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712101814926.png" alt="image-20240712101814926"></p><ul><li>第三步，设置主组织和主集团属性</li></ul><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712101853305.png" alt="image-20240712101853305"></p><ul><li><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712102634815.png" alt="image-20240712102634815"></li></ul><h2 id="进行统计或者分组"><a href="#进行统计或者分组" class="headerlink" title="进行统计或者分组"></a>进行统计或者分组</h2><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712102715256.png" alt="image-20240712102715256"></p><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E5%86%99%E8%AF%AD%E4%B9%89%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%81%9A%E6%8A%A5%E8%A1%A8/image-20240712102740111.png" alt="image-20240712102740111"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何代码写一个显示公式</title>
      <link href="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E5%85%AC%E5%BC%8F/"/>
      <url>/2024/07/12/240628/%E5%A6%82%E4%BD%95%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="如何写一个显示公式"><a href="#如何写一个显示公式" class="headerlink" title="如何写一个显示公式"></a>如何写一个显示公式</h1><h2 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nc.vo.pub.formulaset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nc.bs.dao.BaseDAO;</span><br><span class="line"><span class="keyword">import</span> nc.bs.dao.DAOException;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.InvocationInfoProxy;</span><br><span class="line"><span class="keyword">import</span> nc.jdbc.framework.processor.BeanProcessor;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.defdoc.DefdocVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.formulaset.core.ParseException;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.formulaset.function.NcInnerFunction;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFDate;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1. 首先继承  NcInnerFunction</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetFdedFunction</span> <span class="keyword">extends</span> <span class="title class_">NcInnerFunction</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.重写构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GetFdedFunction</span><span class="params">()</span> &#123;</span><br><span class="line">numberOfParameters = <span class="number">2</span>;   <span class="comment">//参数个数</span></span><br><span class="line">functionType = IFormulaConstant.FUN_CUSTOM; <span class="comment">//公式类型  自定义（一般用 FUN_CUSTOM 就代表自定义类型的）</span></span><br><span class="line">functionDesc = <span class="string">&quot;销售订单节点获取返点额度 fded字段的值，参数传客户id 和 单据日期&quot;</span>; <span class="comment">//公式描述</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">function</span><span class="params">(List param)</span> <span class="keyword">throws</span> ParseException &#123;  <span class="comment">//最多能抛出  ParseException</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//下面是查询逻辑~~~~</span></span><br><span class="line"><span class="keyword">if</span> (param == <span class="literal">null</span> || param.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ParseException</span>(<span class="string">&quot;错误：请传入客户id 和 单据日期 作为参数！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">customerid</span> <span class="operator">=</span> (String) param.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">UFDate</span> <span class="variable">dd</span> <span class="operator">=</span> (UFDate) param.get(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dbilldate</span> <span class="operator">=</span> dd.toString();</span><br><span class="line"><span class="type">DefdocVO</span> <span class="variable">defdocVO</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select * from bd_defdoc  &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; where pk_Defdoclist = (  select PK_defdoclist from bd_defdoclist where code = &#x27;FDED&#x27; ) &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; and dr = &#x27;0&#x27; and enablestate = &#x27;2&#x27; and &quot;</span>).append(<span class="string">&quot; pk_org = &#x27;&quot;</span>)</span><br><span class="line">.append(InvocationInfoProxy.getInstance().getGroupId()).append(<span class="string">&quot;&#x27; &quot;</span>).append(<span class="string">&quot; and def2 = &#x27;&quot;</span>)</span><br><span class="line">.append(customerid).append(<span class="string">&quot;&#x27; &quot;</span>).append(<span class="string">&quot; and def4 &lt;= &#x27;&quot;</span>).append(dbilldate).append(<span class="string">&quot;&#x27; &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; and nvl((CASE WHEN def5 = &#x27;~&#x27; THEN NULL ELSE def5 END ) ,&#x27;9999-12-31 12:59:59&#x27;) &gt;= &#x27;&quot;</span>)</span><br><span class="line">.append(dbilldate).append(<span class="string">&quot;&#x27; &quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">defdocVO = (DefdocVO) <span class="keyword">new</span> <span class="title class_">BaseDAO</span>().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">BeanProcessor</span>(DefdocVO.class));</span><br><span class="line">&#125; <span class="keyword">catch</span> (DAOException e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (defdocVO == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line"><span class="keyword">return</span> defdocVO.getDef3();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><strong>存放路径：home&#x2F;resources&#x2F;formulaconfig&#x2F;custfunction&#x2F;xxx.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;gb2312&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">formula-array</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个自定义的显示公式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">formula</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">customType</span>&gt;</span>2<span class="tag">&lt;/<span class="name">customType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">functionName</span>&gt;</span>getFdedFunction<span class="tag">&lt;/<span class="name">functionName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">functionClass</span>&gt;</span>nc.vo.pub.formulaset.GetFdedFunction<span class="tag">&lt;/<span class="name">functionClass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">formula-array</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h1><p><img src="/2024/07/12/240628/%E5%A6%82%E4%BD%95%E4%BB%A3%E7%A0%81%E5%86%99%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%E5%85%AC%E5%BC%8F/image-20240712094532729.png" alt="image-20240712094532729"></p><ul><li>此时已经可以使用了！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物料XX未分配给XXX库存组织</title>
      <link href="/2024/07/05/240628/%E7%89%A9%E6%96%99XX%E6%9C%AA%E5%88%86%E9%85%8D%E7%BB%99XXX%E5%BA%93%E5%AD%98%E7%BB%84%E7%BB%87/"/>
      <url>/2024/07/05/240628/%E7%89%A9%E6%96%99XX%E6%9C%AA%E5%88%86%E9%85%8D%E7%BB%99XXX%E5%BA%93%E5%AD%98%E7%BB%84%E7%BB%87/</url>
      
        <content type="html"><![CDATA[<h1 id="报错-XX未分配给XXX库存组织"><a href="#报错-XX未分配给XXX库存组织" class="headerlink" title="报错:XX未分配给XXX库存组织"></a>报错:XX未分配给XXX库存组织</h1><p><img src="/2024/07/05/240628/%E7%89%A9%E6%96%99XX%E6%9C%AA%E5%88%86%E9%85%8D%E7%BB%99XXX%E5%BA%93%E5%AD%98%E7%BB%84%E7%BB%87/image-20240705093422162.png" alt="image-20240705093422162"></p><ul><li>解决办法：<ul><li>到物料-集团找到对应的物料</li><li>进入到卡片页面，点击分配</li><li>分配需要的库存组织及成本域</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC系统操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习_First</title>
      <link href="/2024/07/01/240628/React%E5%AD%A6%E4%B9%A0-First/"/>
      <url>/2024/07/01/240628/React%E5%AD%A6%E4%B9%A0-First/</url>
      
        <content type="html"><![CDATA[<h1 id="React学习-First"><a href="#React学习-First" class="headerlink" title="React学习_First"></a>React学习_First</h1><h2 id="认识React的基本结构"><a href="#认识React的基本结构" class="headerlink" title="认识React的基本结构"></a>认识React的基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello_react<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面三个库是  非常核心的react库 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库  必须第一个被引进来！！！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"> <span class="comment">/* 此处一定要写babel */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">/* 此处一定不要写引号，因为不是字符串 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//虽然 react 本意上是不需要我们去操作真实dom节点，但是这里是必要的！ </span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意 引入 3 个核心库</li><li>注意 先准备好一个容器 ，这样才能把虚拟dom挂载上去。</li></ul><h2 id="虚拟DOM的两种创建方式"><a href="#虚拟DOM的两种创建方式" class="headerlink" title="虚拟DOM的两种创建方式"></a>虚拟DOM的两种创建方式</h2><h3 id="使用JS语法创建"><a href="#使用JS语法创建" class="headerlink" title="使用JS语法创建"></a>使用JS语法创建</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>2_使用js创建虚拟DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建虚拟DOM                  标签名字 ， 标签的属性 ， 标签的内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;title&#x27;</span>&#125;,<span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>,&#123;&#125;,<span class="string">&#x27;Hello,React&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.渲染虚拟DOM到页面</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用js语法创建虚拟DOM在面对一些复杂的标签结构的时候，会很无力！</li></ul><h3 id="使用JSX语法创建"><a href="#使用JSX语法创建" class="headerlink" title="使用JSX语法创建"></a>使用JSX语法创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_使用jsx创建虚拟DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"> <span class="comment">/* 此处一定要写babel */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建虚拟DOM</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (  <span class="comment">/* 此处一定不要写引号，因为不是字符串 */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染虚拟DOM到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 为什么Reat 使用jsx语法而不使用原生js语法  ？</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">       因为 使用js来创建 dom节点非常的复杂，而且很不直观。</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">   使用jsx之后，允许js与html标签混合使用，在构建标签的时候更加方便和直观！</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">   本质上，浏览器还是会把jsx翻译成js的语法格式。</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>JSX语法的优势在于，构建虚拟DOM的时候能将  js和html语法结合使用，更方便构建虚拟DOM</li></ul><h3 id="虚拟DOM和真实DOM区别"><a href="#虚拟DOM和真实DOM区别" class="headerlink" title="虚拟DOM和真实DOM区别"></a>虚拟DOM和真实DOM区别</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>3_虚拟DOM与真实DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"> <span class="comment">/* 此处一定要写babel */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建虚拟DOM</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (  <span class="comment">/* 此处一定不要写引号，因为不是字符串 */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染虚拟DOM到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">TDOM</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;demo&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;虚拟DOM&#x27;</span>,<span class="variable constant_">VDOM</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;真实DOM&#x27;</span>,<span class="variable constant_">TDOM</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">debugger</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(typeof VDOM);   object </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(VDOM instanceof Object);  true </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">关于虚拟DOM：</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">1.本质是Object类型的对象（一般对象）</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">2.虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">3.虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>虚拟DOM最后会被浏览器转换为真是DOM</li><li>虚拟DOM上的属性比真实DOM上属性少的多</li></ul><h2 id="JSX语法规则"><a href="#JSX语法规则" class="headerlink" title="JSX语法规则"></a>JSX语法规则</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx语法规则<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.title</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">background-color</span>: orange;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">const myId = &#x27;aTgUiGu&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">const myData = &#x27;HeLlo,rEaCt&#x27;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">//1.创建虚拟DOM</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">const VDOM = (</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId&#125;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;<span class="name">color:</span><span class="string">&#x27;white&#x27;</span>,fontSize:<span class="string">&#x27;29px&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">id</span>=<span class="string">&#123;myId.toUpperCase()&#125;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;<span class="name">color:</span><span class="string">&#x27;white&#x27;</span>,fontSize:<span class="string">&#x27;29px&#x27;</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&gt;</span>&#123;myData.toLowerCase()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">//2.渲染虚拟DOM到页面</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">ReactDOM.render(VDOM,document.getElementById(&#x27;test&#x27;))</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1 定义虚拟DOM时，不要写引号。</span><br><span class="line">2 标签中混入JS表达式时要用&#123;&#125;。!!!</span><br><span class="line">3 样式的类名指定不要用class，要用className。 !!!</span><br><span class="line">4 内联样式，要用style=&#123; &#123; key:value &#125; &#125;的形式去写。</span><br><span class="line">5 只有一个根标签</span><br><span class="line">6 标签必须闭合</span><br><span class="line">7 标签首字母 !!!</span><br><span class="line">  7.1 若小写字母开头，则将该标签转为html中同名元素，若html中无该标签对应的同名元素，则报错。</span><br><span class="line">  7.2 若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</span><br></pre></td></tr></table></figure><h2 id="JSX语法小练习"><a href="#JSX语法小练习" class="headerlink" title="JSX语法小练习"></a>JSX语法小练习</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jsx小练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//模拟一些数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> data = [<span class="string">&#x27;Angular&#x27;</span>,<span class="string">&#x27;React&#x27;</span>,<span class="string">&#x27;Vue&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建虚拟DOM</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>前端js框架列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">data.map((item,index)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染虚拟DOM到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一定注意区分：【js语句(代码)】与【js表达式】</span><br><span class="line">1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方</span><br><span class="line">下面这些都是表达式：</span><br><span class="line">(1). a</span><br><span class="line">(2). a+b</span><br><span class="line">(3). demo(1)</span><br><span class="line">(4). arr.map() </span><br><span class="line">(5). function test () &#123;&#125;</span><br><span class="line">2.语句(代码)：</span><br><span class="line">下面这些都是语句(代码)：</span><br><span class="line">(1).if()&#123;&#125;</span><br><span class="line">(2).for()&#123;&#125;</span><br><span class="line">(3).switch()&#123;case:xxxx&#125;</span><br></pre></td></tr></table></figure><h2 id="React-如何定义组件"><a href="#React-如何定义组件" class="headerlink" title="React 如何定义组件"></a>React 如何定义组件</h2><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_函数式组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建函数式组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//此处的this是undefined，因为babel编译后开启了严格模式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件(适用于【简单组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">1.React解析组件标签，找到了MyComponent组件。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">2.发现组件是使用函数定义的，随后调用该函数，将返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>2_类式组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建类式组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render中的this:&#x27;</span>,<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件(适用于【复杂组件】的定义)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">执行了ReactDOM.render(&lt;MyComponent/&gt;.......之后，发生了什么？</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">1.React解析组件标签，找到了MyComponent组件。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">2.发现组件是使用类定义的，随后new出来该类的实例，并通过该实例调用到原型上的render方法。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">3.将render返回的虚拟DOM转为真实DOM，随后呈现在页面中。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="关于类的基本知识回顾"><a href="#关于类的基本知识回顾" class="headerlink" title="关于类的基本知识回顾"></a>关于类的基本知识回顾</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>1_类的基本知识<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">总结：</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">1.类中的构造器不是必须要写的，要对实例进行一些初始化的操作，如添加指定属性时才写。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">2.如果A类继承了B类，且A类中写了构造器，那么A类构造器中的super是必须要调用的。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">3.类中所定义的方法，都放在了类的原型对象上，供实例去使用。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建一个Person类</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//构造器方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//构造器中的this是谁？—— 类的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">name</span> = name</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">age</span> = age</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//一般方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//speak方法放在了哪里？——类的原型对象上，供实例使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//通过Person实例调用speak时，speak中的this就是Person实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建一个Student类，继承于Person类</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params">name,age,grade</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">super</span>(name,age)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">grade</span> = grade</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">school</span> = <span class="string">&#x27;尚硅谷&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//重写从父类继承过来的方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>，我年龄是<span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>,我读的是<span class="subst">$&#123;<span class="variable language_">this</span>.grade&#125;</span>年级`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="title function_">study</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">study</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//study方法放在了哪里？——类的原型对象上，供实例使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//通过Student实例调用study时，study中的this就是Student实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我很努力的学习&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params">name,price</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">name</span> = name</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">price</span> = price</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.wheel = 4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//类中可以直接写赋值语句,如下代码的含义是：给Car的实例对象添加一个属性，名为a，值为1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">a = <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">wheel = <span class="number">4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">static</span> demo = <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> c1 = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;奔驰c63&#x27;</span>,<span class="number">199</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(c1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Car</span>.<span class="property">demo</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="组件实例的三大核心属性-（只有类式组件涉及"><a href="#组件实例的三大核心属性-（只有类式组件涉及" class="headerlink" title="组件实例的三大核心属性 （只有类式组件涉及)"></a>组件实例的三大核心属性 （只有类式组件涉及)</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>state<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//构造器调用几次？ ———— 1次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">super</span>(props)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//初始化状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//解决changeWeather中this指向问题</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;render&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//读取状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// onClick 这里是React重写了原生js的一些时间，都变成驼峰命名了，比如 onblur -&gt; onBlur</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//changeWeather调用几次？ ———— 点几次调几次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined  （构造器里的this是实例对象，render（）中的this是实例对象）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//这段代码并没有解决  changeWeather 中this为 undefined 的问题，只是阐述了出现这种问题的原因，onClick=&#123;this.changeWeather&#125;属于直接调用，在局部严格模式下，指向undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//如何解决changeWeather中this指向问题？</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//this.changeWeather = this.changeWeather.bind(this)  在构造器里面加上这一行代码，手动为这个方法绑定调用对象！</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;changeWeather&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获取原来的isHot值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//this.state.isHot = !isHot //这是错误的写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>state简写方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.创建组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//初始化状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//前面不能写 let const，这不是函数体，直接赋值就可以</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//这样子直接赋值，我们就不用写构造方法了。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123;isHot,wind&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//自定义方法————要用赋值语句的形式+箭头函数  这样子写，是讲方法挂在实例身上的。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//我们之前讲，changeWeather()&#123;&#125; ,这样子的方式是挂在原型身上的，所以说，调用方法的时候，在里面用this是undefined，可以理解为，这个方法是被原型调用的（类似java的静态方法！），非要在静态方法里面调用this，肯定找不到喽~</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//箭头函数内是没有this的，使用this的话，箭头函数会找其外侧的函数的this，在这里，外层的this就是组件实例对象！ 虽然不太理解，姑且硬记</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">changeWeather = <span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2.渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="props-标签属性"><a href="#props-标签属性" class="headerlink" title="props  标签属性"></a>props  标签属性</h3><ul><li><p><strong>在React中，props是组件之间传递数据的一种方式。Props是”properties”的缩写，它是一个包含组件属性的对象。当你在父组件中创建一个子组件实例时，你可以通过props将数据传递给子组件。</strong></p></li><li><p><strong>使用props，你可以在父组件中定义属性，然后将其传递给子组件。子组件可以通过props对象访问这些属性，并在组件内部使用它们。</strong></p></li><li><p>例如，假设你有一个名为”Message”的父组件，你可以在该组件中定义一个”message”属性：</p></li></ul><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在父组件中使用该子组件时，可以通过props将数据传递给它：</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Message</span> <span class="attr">message</span>=<span class="string">&quot;Hello, World!&quot;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在上面的例子中，父组件App将字符串”Hello, World!”作为props传递给子组件Message。子组件可以通过props.message访问该属性，并在组件内部将其显示出来。</strong></p><p><strong>通过props，你可以实现父组件向子组件传递数据和配置信息，使得组件之间可以更好地通信和协作。</strong></p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>props基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 准备好一个“容器” --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> (</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span> <span class="attr">age</span>=<span class="string">&#123;19&#125;</span>  <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;@&#x27;,...p);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test3&#x27;</span>)) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//...p 只有在react中才允许展开一个对象类型，原生js不允许！</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>使用 {…对象}可以批量传递属性</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//渲染组件到页面                     这样写传的是数值类型</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span> <span class="attr">age</span>=<span class="string">&#123;19&#125;</span>  <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span><br><span class="line"><span class="comment">//                                  这样写传的是字符串类型</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span> <span class="attr">age</span>=<span class="string">&quot;19&quot;</span>  <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对Props传值做一些限制"><a href="#对Props传值做一些限制" class="headerlink" title="对Props传值做一些限制"></a>对Props传值做一些限制</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入prop-types，用于对组件标签属性进行限制 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//props是只读的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> (</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//对标签属性进行类型、必要性的限制</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">speak</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span>,<span class="comment">//限制speak为函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//指定默认标签属性值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//渲染组件到页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&#123;100&#125;</span> <span class="attr">speak</span>=<span class="string">&#123;speak&#125;/</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> p = &#123;<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;@&#x27;,...p);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ReactDOM.render(&lt;Person name=&#123;p.name&#125; age=&#123;p.age&#125; sex=&#123;p.sex&#125;/&gt;,document.getElementById(&#x27;test3&#x27;))</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test3&#x27;</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我说话了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>首先要引入  prop-types.js  这个库</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对标签属性进行类型、必要性的限制</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串    PropTypes是prop-types.js提供的</span></span><br><span class="line"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line"><span class="attr">speak</span>:<span class="title class_">PropTypes</span>.<span class="property">func</span>,<span class="comment">//限制speak为函数  不能写function哦</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定默认标签属性值</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Props是只读的"><a href="#Props是只读的" class="headerlink" title="Props是只读的"></a>Props是只读的</h4><p><strong>传递给组件之后，组件内不允许对props的属性进行修改！</strong></p><h4 id="Props的简写方式"><a href="#Props的简写方式" class="headerlink" title="Props的简写方式"></a>Props的简写方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="comment">//构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span><br><span class="line"><span class="comment">// console.log(props);</span></span><br><span class="line"><span class="variable language_">super</span>(props)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对标签属性进行类型、必要性的限制   之前是放在类的外面的，但是使用static关键字，就可以拿到类的里面来，成为其原型上的属性，使结构更清晰。</span></span><br><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定默认标签属性值   之前是放在类的外面的，但是使用static关键字，就可以拿到类的里面来，成为其原型上的属性，使结构更清晰。</span></span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">          <span class="comment">//如果还想初始化状态，在这里写</span></span><br><span class="line">          state = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// console.log(this);</span></span><br><span class="line"><span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"><span class="comment">//props是只读的</span></span><br><span class="line"><span class="comment">//this.props.name = &#x27;jack&#x27; //此行代码会报错，因为props是只读的</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age+1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>关于构造器里props的使用</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">             <span class="comment">//一般不写构造器，一般写构造器可以写无参构造，如果构造器传了props参数，必须对super传props参数，不然在构造器里使用this.props的时候会报错！ undefined！</span></span><br><span class="line">             <span class="comment">//但是，一般我们也不在构造器里使用  this.props 我们可以直接使用 props ！！！！ 所以了解一下即可！</span></span><br><span class="line"><span class="comment">//构造器是否接收props，是否传递给super，取决于：是否希望在构造器中通过this访问props</span></span><br><span class="line"><span class="comment">// console.log(props);</span></span><br><span class="line"><span class="variable language_">super</span>(props)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;constructor&#x27;</span>,<span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数式组件使用Props"><a href="#函数式组件使用Props" class="headerlink" title="函数式组件使用Props"></a>函数式组件使用Props</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件  函数式组件不能用state，refs，但是可以接收props</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (props)&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;name,age,sex&#125; = props</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">//限制name必传，且为字符串</span></span><br><span class="line"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>,<span class="comment">//限制sex为字符串</span></span><br><span class="line"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age为数值</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//函数式组件只能在外部进行限制，因为函数体内不能用static关键字</span></span><br><span class="line"><span class="comment">//指定默认标签属性值</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="comment">//sex默认值为男</span></span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span> <span class="comment">//age默认值为18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;jerry&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test1&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="refs与事件处理"><a href="#refs与事件处理" class="headerlink" title="refs与事件处理"></a>refs与事件处理</h3><h4 id="字符串形式ref"><a href="#字符串形式ref" class="headerlink" title="字符串形式ref"></a>字符串形式ref</h4><ul><li>组件内的标签可以通过ref来标识自己，相当于原生的 id</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line"><span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">showData2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span>.<span class="property">refs</span></span><br><span class="line"><span class="title function_">alert</span>(input2.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;input2&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>字符串类型的ref已经不再被推荐使用！！！</strong></li></ul><h4 id="回调形式的ref"><a href="#回调形式的ref" class="headerlink" title="回调形式的ref"></a>回调形式的ref</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span>   <span class="comment">//使用回调形式的ref之后，就要从实例上获取标签了，refs里面是没有哒~</span></span><br><span class="line"><span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">showData2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;input2&#125; = <span class="variable language_">this</span></span><br><span class="line"><span class="title function_">alert</span>(input2.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   // 这样子写的话，c代表的是当前的节点，然后this指的是react实例， React在扫描到ref标签之后，会执行回调函数，就把</span></span><br><span class="line"><span class="language-xml">                   //当前节点挂到了react实例之上（之前是挂在refs属性里面）</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input1 = c &#125; type=&quot;text&quot; placeholder=&quot;点击按钮提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.input2 = c &#125; type=&quot;text&quot; placeholder=&quot;失去焦点提示数据&quot;/&gt;<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="回调ref的函数执行次数的问题"><a href="#回调ref的函数执行次数的问题" class="headerlink" title="回调ref的函数执行次数的问题"></a>回调ref的函数执行次数的问题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line">state = &#123;<span class="attr">isHot</span>:<span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">showInfo = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;input1&#125; = <span class="variable language_">this</span></span><br><span class="line"><span class="title function_">alert</span>(input1.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//获取原来的状态</span></span><br><span class="line"><span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="comment">//更新状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">//当页面第一次渲染组件的时候，没什么影响正常执行ref函数</span></span><br><span class="line">           <span class="comment">//但是当组件发生更新时，也要调用render，每次执行回调的时候，这ref函数都是全新的函数实例，react不知道之前的函数实例都传了什么值，所以会先调用一次传个null，第二次才是把节点传进去再调用一次。注意这只出现在内联回调函数中    </span></span><br><span class="line">saveInput = <span class="function">(<span class="params">c</span>)=&gt;</span>&#123;       <span class="comment">//比如，这种就不是内联函数，这个叫类的绑定函数！！！！！！！</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">input1</span> = c;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;@&#x27;</span>,c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>//下面这个是内联函数  (c)=&gt;&#123;this.input1 = c;console.log(&#x27;@&#x27;,c)</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span></span><br><span class="line"><span class="language-xml">&#123;/*<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(c)</span>=&gt;</span>&#123;this.input1 = c;console.log(&#x27;@&#x27;,c);&#125;&#125; type=&quot;text&quot;/&gt;<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span>*/&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.saveInput&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showInfo&#125;</span>&gt;</span>点我提示输入的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>点我切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="ref的第三种方式"><a href="#ref的第三种方式" class="headerlink" title="ref的第三种方式"></a>ref的第三种方式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点,该容器是“专人专用”的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line"><span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">showData = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">showData2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef2</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    // 这里  标记有ref属性的 标签会被放入  myRef中去，通过this.myRef.current就可以拿到这个标签了</span></span><br><span class="line"><span class="language-xml">                    //值得注意的一点，一个  Ref容器只能存储一个标签，意味着想要记录多个标签就要创建多个Ref容器，这是比较麻烦的一点</span></span><br><span class="line"><span class="language-xml">                    //但是这种方式是目前React最为推荐的一种方式</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="通过event获取dom对象，不要过度使用ref"><a href="#通过event获取dom对象，不要过度使用ref" class="headerlink" title="通过event获取dom对象，不要过度使用ref"></a>通过event获取dom对象，不要过度使用ref</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">(1).通过onXxx属性指定事件处理函数(注意大小写)  为什么react要重写原来的onxxx方法？</span></span><br><span class="line"><span class="comment">a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件 —————— 为了更好的兼容性</span></span><br><span class="line"><span class="comment">b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ————————为了的高效</span></span><br><span class="line"><span class="comment">(2).通过event.target得到发生事件的DOM元素对象 ——————————不要过度使用ref</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建ref容器</span></span><br><span class="line">myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line">myRef2 = <span class="title class_">React</span>.<span class="title function_">createRef</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示左侧输入框的数据</span></span><br><span class="line">showData = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>);  <span class="comment">// event.target就是发生事件的标签</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示右侧输入框的数据</span></span><br><span class="line">showData2 = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点我提示左侧的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showData2&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示数据&quot;</span>/&gt;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> <span class="attr">b</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">        <span class="comment">//创建组件</span></span><br><span class="line">    <span class="comment">//这是一个非受控组件，如何确认是非受控组件，第一有form表单，第二，表单中所有输入类型的dom  例如input框，单选框，复选框，使用这类dom的值时，如果是现用现取的，则是非受控组件。</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">            handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">                event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line">                <span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span></span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username.value&#125;</span>,你输入的密码是：<span class="subst">$&#123;password.value&#125;</span>`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>(</span><br><span class="line">                    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.username = c&#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;c</span> =&gt;</span> this.password = c&#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//渲染组件</span></span><br><span class="line">        <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化状态   养成习惯，如果你要使用setState设置属性值，最好进行初始化！！！！</span></span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户名到状态中</span></span><br><span class="line">saveUsername = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">username</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存密码到状态中</span></span><br><span class="line">savePassword = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">password</span>:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表单提交的回调</span></span><br><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 所以说，受控组件就是，把dom节点的值存入state中，以后需要的时候不需要去获取dom节点了而是直接从state中取值了。</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveUsername&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.savePassword&#125;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="高阶函数与函数柯里化"><a href="#高阶函数与函数柯里化" class="headerlink" title="高阶函数与函数柯里化"></a>高阶函数与函数柯里化</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//#region </span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</span></span><br><span class="line"><span class="comment">1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</span></span><br><span class="line"><span class="comment">2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</span></span><br><span class="line"><span class="comment">常见的高阶函数有：Promise、setTimeout、arr.map()等等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 </span></span><br><span class="line"><span class="comment">function sum(a)&#123;</span></span><br><span class="line"><span class="comment">return(b)=&gt;&#123;</span></span><br><span class="line"><span class="comment">return (c)=&gt;&#123;</span></span><br><span class="line"><span class="comment">return a+b+c</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">调用 sum(1)(2)(3)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//#endregion</span></span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存表单数据到状态中</span></span><br><span class="line">saveFormData = <span class="function">(<span class="params">dataType</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="comment">//[dataType]使用了JavaScript中的计算属性名的写法，它的值将根据传入的dataType参数动态确定。 不加[],dataType就被当成字符串了！</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表单提交的回调</span></span><br><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    //this.saveFormData(&#x27;username&#x27;) 加上括号以后，这里就是把saveFormData方法的返回值绑在onChange上了，</span></span><br><span class="line"><span class="language-xml">                    //但是不加括号又传不了参数，所以使用了高阶函数，return一个新的回调函数！</span></span><br><span class="line"><span class="language-xml">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">username</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.saveFormData(</span>&#x27;<span class="attr">password</span>&#x27;)&#125; <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="不使用柯里化函数实现效果"><a href="#不使用柯里化函数实现效果" class="headerlink" title="不使用柯里化函数实现效果"></a>不使用柯里化函数实现效果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line">state = &#123;</span><br><span class="line"><span class="attr">username</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">//用户名</span></span><br><span class="line"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span> <span class="comment">//密码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存表单数据到状态中</span></span><br><span class="line">saveFormData = <span class="function">(<span class="params">dataType,event</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;[dataType]:event.<span class="property">target</span>.<span class="property">value</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表单提交的回调</span></span><br><span class="line">handleSubmit = <span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">event.<span class="title function_">preventDefault</span>() <span class="comment">//阻止表单提交</span></span><br><span class="line"><span class="keyword">const</span> &#123;username,password&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">`你输入的用户名是：<span class="subst">$&#123;username&#125;</span>,你输入的密码是：<span class="subst">$&#123;password&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   //如果柯里化函数是返回值返回一个钩子函数的话，这里就是直接把一个钩子函数绑定给onChange，也能实现效果。</span></span><br><span class="line"><span class="language-xml">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;username&#x27;,event) &#125; type=&quot;text&quot; name=&quot;username&quot;/&gt;</span></span><br><span class="line"><span class="language-xml">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;event</span> =&gt;</span> this.saveFormData(&#x27;password&#x27;,event) &#125; type=&quot;password&quot; name=&quot;password&quot;/&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="引出生命周期"><a href="#引出生命周期" class="headerlink" title="引出生命周期"></a>引出生命周期</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这节主要是讲，react提供了几个生命周期函数，能够在组件的各个生命周期的节点做我们想做的事情，例如组件挂载后组件卸载后，组件将要卸载时。</span></span><br><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="comment">//生命周期回调函数 &lt;=&gt; 生命周期钩子函数 &lt;=&gt; 生命周期函数 &lt;=&gt; 生命周期钩子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Life</span> <span class="keyword">extends</span> <span class="title class_">React</span>.Component&#123;</span><br><span class="line"></span><br><span class="line">state = &#123;opacity:<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">death = ()=&gt;&#123;</span><br><span class="line"><span class="comment">//卸载组件</span></span><br><span class="line">ReactDOM.unmountComponentAtNode(document.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件挂完毕</span></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">console.log(<span class="string">&#x27;componentDidMount&#x27;</span>);</span><br><span class="line"><span class="built_in">this</span>.timer = setInterval(() =&gt; &#123;</span><br><span class="line"><span class="comment">//获取原状态</span></span><br><span class="line">let &#123;opacity&#125; = <span class="built_in">this</span>.state</span><br><span class="line"><span class="comment">//减小0.1</span></span><br><span class="line">opacity -= <span class="number">0.1</span></span><br><span class="line"><span class="keyword">if</span>(opacity &lt;= <span class="number">0</span>) opacity = <span class="number">1</span></span><br><span class="line"><span class="comment">//设置新的透明度</span></span><br><span class="line"><span class="built_in">this</span>.setState(&#123;opacity&#125;)</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要卸载</span></span><br><span class="line">componentWillUnmount()&#123;</span><br><span class="line"><span class="comment">//清除定时器</span></span><br><span class="line">clearInterval(<span class="built_in">this</span>.timer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化渲染、状态更新之后</span></span><br><span class="line">render()&#123;</span><br><span class="line">console.log(<span class="string">&#x27;render&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2 style=&#123;&#123;opacity:<span class="built_in">this</span>.state.opacity&#125;&#125;&gt;React学不会怎么办？&lt;/h2&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="built_in">this</span>.death&#125;&gt;不活了&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line">ReactDOM.render(&lt;Life/&gt;,document.getElementById(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期（旧）"><a href="#生命周期（旧）" class="headerlink" title="生命周期（旧）"></a>生命周期（旧）</h3><ul><li>下面是旧版本的生命周期图，左边是组件挂载时的钩子，右边是组件更新时的钩子。</li><li>组件更新时，有三个流程，1. 父组件传参props发生改变时 2. setState()时 3. forceUpdate（）时。</li></ul><p><img src="/2024/07/01/240628/React%E5%AD%A6%E4%B9%A0-First/image-20240718142406315.png" alt="image-20240718142406315"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span></span><br><span class="line"><span class="comment">1.constructor()</span></span><br><span class="line"><span class="comment">2.componentWillMount()</span></span><br><span class="line"><span class="comment">3.render()</span></span><br><span class="line"><span class="comment">4.componentDidMount() =====&gt; 常用</span></span><br><span class="line"><span class="comment">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span></span><br><span class="line"><span class="comment">2. 更新阶段: 由组件内部this.setSate()或父组件render触发</span></span><br><span class="line"><span class="comment">1.shouldComponentUpdate()</span></span><br><span class="line"><span class="comment">2.componentWillUpdate()</span></span><br><span class="line"><span class="comment">3.render() =====&gt; 必须使用的一个</span></span><br><span class="line"><span class="comment">4.componentDidUpdate()</span></span><br><span class="line"><span class="comment">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span></span><br><span class="line"><span class="comment">1.componentWillUnmount()  =====&gt; 常用</span></span><br><span class="line"><span class="comment">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---constructor&#x27;</span>);</span><br><span class="line"><span class="variable language_">super</span>(props)</span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加1按钮的回调</span></span><br><span class="line">add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//获取原状态</span></span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="comment">//更新状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载组件按钮的回调</span></span><br><span class="line">death = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制更新按钮的回调</span></span><br><span class="line">force = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要挂载的钩子</span></span><br><span class="line"><span class="title function_">componentWillMount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillMount&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件挂载完毕的钩子</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidMount&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要卸载的钩子</span></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUnmount&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制组件更新的“阀门”</span></span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---shouldComponentUpdate&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span> <span class="comment">//注意，如果没有写这个函数，react会有一个默认返回true的函数，但是</span></span><br><span class="line">                           <span class="comment">//一旦写了函数，你没写返回值，那么返回 undefinde，就会报错！！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要更新的钩子</span></span><br><span class="line"><span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUpdate&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件更新完毕的钩子</span></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidUpdate&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---render&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>不更改任何状态中的数据，强制更新一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line">state = &#123;<span class="attr">carName</span>:<span class="string">&#x27;奔驰&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">changeCar = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">carName</span>:<span class="string">&#x27;奥拓&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是A组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeCar&#125;</span>&gt;</span>换车<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                       //这里注意，在第一次组件挂载时执行render方法，不会引发子组件里的更新相关的周期函数</span></span><br><span class="line"><span class="language-xml">                       //只有第二次进行修改的时候，才会引发子组件中的更新相关的钩子函数。</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">B</span> <span class="attr">carName</span>=<span class="string">&#123;this.state.carName&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//组件将要接收新的props的钩子</span></span><br><span class="line"><span class="title function_">componentWillReceiveProps</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---componentWillReceiveProps&#x27;</span>,props);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制组件更新的“阀门”</span></span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---shouldComponentUpdate&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组件将要更新的钩子</span></span><br><span class="line"><span class="title function_">componentWillUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---componentWillUpdate&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件更新完毕的钩子</span></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---componentDidUpdate&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B---render&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是B组件，接收到的车是:&#123;this.props.carName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Count</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期（新）"><a href="#生命周期（新）" class="headerlink" title="生命周期（新）"></a>生命周期（新）</h3><ul><li>对比于旧的生命周期，新的生命周期废弃了三个钩子<ul><li>componentWillReceiveProps</li><li>componentWillUpdate</li><li>componentWillMount</li></ul></li><li>而新增了 两个钩子<ul><li>getDerivedStateFromProps</li><li>getSnapshotBeforeUpdate</li></ul></li></ul><p><img src="/2024/07/01/240628/React%E5%AD%A6%E4%B9%A0-First/image-20240718154353441.png" alt="image-20240718154353441"></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="comment">//创建组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1. 初始化阶段: 由ReactDOM.render()触发---初次渲染</span></span><br><span class="line"><span class="comment">1.constructor()</span></span><br><span class="line"><span class="comment">2.getDerivedStateFromProps </span></span><br><span class="line"><span class="comment">3.render()</span></span><br><span class="line"><span class="comment">4.componentDidMount() =====&gt; 常用</span></span><br><span class="line"><span class="comment">一般在这个钩子中做一些初始化的事，例如：开启定时器、发送网络请求、订阅消息</span></span><br><span class="line"><span class="comment">2. 更新阶段: 由组件内部this.setSate()或父组件重新render触发</span></span><br><span class="line"><span class="comment">1.getDerivedStateFromProps</span></span><br><span class="line"><span class="comment">2.shouldComponentUpdate()</span></span><br><span class="line"><span class="comment">3.render()</span></span><br><span class="line"><span class="comment">4.getSnapshotBeforeUpdate</span></span><br><span class="line"><span class="comment">5.componentDidUpdate()</span></span><br><span class="line"><span class="comment">3. 卸载组件: 由ReactDOM.unmountComponentAtNode()触发</span></span><br><span class="line"><span class="comment">1.componentWillUnmount()  =====&gt; 常用</span></span><br><span class="line"><span class="comment">一般在这个钩子中做一些收尾的事，例如：关闭定时器、取消订阅消息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---constructor&#x27;</span>);</span><br><span class="line"><span class="variable language_">super</span>(props)</span><br><span class="line"><span class="comment">//初始化状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加1按钮的回调</span></span><br><span class="line">add = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//获取原状态</span></span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="comment">//更新状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">count</span>:count+<span class="number">1</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载组件按钮的回调</span></span><br><span class="line">death = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">unmountComponentAtNode</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制更新按钮的回调</span></span><br><span class="line">force = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若state的值在任何时候都取决于props，那么可以使用getDerivedStateFromProps ---&gt;一般用不到</span></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>(<span class="params">props,state</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getDerivedStateFromProps&#x27;</span>,props,state);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在更新之前获取快照</span></span><br><span class="line"><span class="title function_">getSnapshotBeforeUpdate</span>(<span class="params"></span>)&#123;        <span class="comment">//这个是为了你修改后，能够拿到上一次的状态，一般设计UI的时候会用到</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getSnapshotBeforeUpdate&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件挂载完毕的钩子</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidMount&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件将要卸载的钩子</span></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentWillUnmount&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制组件更新的“阀门”</span></span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---shouldComponentUpdate&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件更新完毕的钩子</span></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">preProps,preState,snapshotValue</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---componentDidUpdate&#x27;</span>,preProps,preState,snapshotValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Count---render&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前求和为：&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>点我+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.death&#125;</span>&gt;</span>卸载组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.force&#125;</span>&gt;</span>不更改任何状态中的数据，强制更新一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Count</span> <span class="attr">count</span>=<span class="string">&#123;199&#125;/</span>&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM的diffing算法"><a href="#DOM的diffing算法" class="headerlink" title="DOM的diffing算法"></a>DOM的diffing算法</h2><ul><li>diffing算法，就是当前端页面上的组件发生变化，需要重新render的时候，并不是非常无脑的重新new一个新的组件就挂在上去，而是会去比较，你的旧的组件里的每一个标签和新的组件里的每一个标签是否一样？一样的话，就直接沿用旧的标签了，不会去new新的了。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount () &#123;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"><span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render () &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">现在是：&#123;this.state.date.toTimeString()&#125; //这里就是，span标签里面，时间在不停地变化，但是input标签并没有发生改变，                             所以，render重新挂在组件的时候，不会生成新的  input框，大大提高效率。</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Time</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>diffing算法很智能，面对嵌套的标签也能分辨出哪个可以沿用旧的标签。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询arap模块付款单AggVO方法</title>
      <link href="/2024/07/01/240628/%E6%9F%A5%E8%AF%A2arap%E6%A8%A1%E5%9D%97%E4%BB%98%E6%AC%BE%E5%8D%95AggVO%E6%96%B9%E6%B3%95/"/>
      <url>/2024/07/01/240628/%E6%9F%A5%E8%AF%A2arap%E6%A8%A1%E5%9D%97%E4%BB%98%E6%AC%BE%E5%8D%95AggVO%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="查询Arap模块-付款单AggVO的方法"><a href="#查询Arap模块-付款单AggVO的方法" class="headerlink" title="查询Arap模块 付款单AggVO的方法"></a>查询Arap模块 付款单AggVO的方法</h1><ul><li><p>ncc版本</p></li><li><p>AggPayBillVO</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="type">QuerySchemeBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> QuerySchemeBuilder</span><br><span class="line">.buildByFullClassName(AggPayBillVO.class.getName());</span><br><span class="line">AggPayBillVO[] piVOs = <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">fieldname</span> <span class="operator">=</span> <span class="string">&quot;def23&quot;</span>;<span class="comment">// 记录唯一值(外系统单号)字段</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">sysbillno</span> <span class="operator">=</span> hvo.getAttributeValue(fieldname);</span><br><span class="line"><span class="keyword">if</span> (sysbillno != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">builder.append(fieldname, EqOperator.getInstance(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; (String) sysbillno &#125;);</span><br><span class="line"></span><br><span class="line">piVOs = (AggPayBillVO[]) NCLocator.getInstance()</span><br><span class="line">.lookup(IArapPayBillQueryService.class)</span><br><span class="line">.queryByQueryScheme(builder.create());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(</span><br><span class="line"><span class="string">&quot;生成单据前根据外系统单号查询单据时异常:&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat连接数据库报错</title>
      <link href="/2024/07/01/240628/Navicat%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/"/>
      <url>/2024/07/01/240628/Navicat%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Navicat连接数据库报错"><a href="#Navicat连接数据库报错" class="headerlink" title="Navicat连接数据库报错"></a>Navicat连接数据库报错</h1><ul><li><pre><code>ORA-28547:connection to server failed,probable Oracle Net admin error；</code></pre></li></ul><p><img src="/2024/07/01/240628/Navicat%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/image-20240701092413046.png" alt="image-20240701092413046"></p><p><strong>如果用Navicat连接Oracle服务器出现ORA-28547错误时，多数是因为Navicat本地的OCI版本与Oracle服务器服务器不符造成的。</strong></p><p><strong>参考：<a href="https://jingyan.baidu.com/article/67508eb4393d849cca1ce438.html">https://jingyan.baidu.com/article/67508eb4393d849cca1ce438.html</a></strong>  <strong>查看windows下的oracle的版本</strong></p><p>如果你之前没有下载过OCI，去官网下载一下就好，</p><p>OCI下载地址：<a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">https://www.oracle.com/database/technologies/instant-client/downloads.html</a></p><p><img src="/2024/07/01/240628/Navicat%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99/image-20240701092600511.png" alt="image-20240701092600511"></p><ul><li>我这里navicat 16.x版本的用的   19_3的  oci</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物料档案接口新增</title>
      <link href="/2024/06/30/240628/%E7%89%A9%E6%96%99%E6%A1%A3%E6%A1%88%E6%8E%A5%E5%8F%A3%E6%96%B0%E5%A2%9E/"/>
      <url>/2024/06/30/240628/%E7%89%A9%E6%96%99%E6%A1%A3%E6%A1%88%E6%8E%A5%E5%8F%A3%E6%96%B0%E5%A2%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="物料档案新增接口"><a href="#物料档案新增接口" class="headerlink" title="物料档案新增接口"></a>物料档案新增接口</h1><ul><li>NCC1909版本</li></ul><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20240524-00001&quot;</span><span class="punctuation">,</span>                <span class="comment">//编码必需</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20240524-00001&quot;</span><span class="punctuation">,</span>                <span class="comment">//名称必需</span></span><br><span class="line">    <span class="attr">&quot;materialspec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20240524-00001&quot;</span><span class="punctuation">,</span>        <span class="comment">//规格 非必需 --</span></span><br><span class="line">    <span class="attr">&quot;materialtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20240524-00001&quot;</span><span class="punctuation">,</span>        <span class="comment">//类型 非必需 --</span></span><br><span class="line">    <span class="attr">&quot;pk_measdoc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiang&quot;</span><span class="punctuation">,</span>                   <span class="comment">//计量单位 必需</span></span><br><span class="line">    <span class="attr">&quot;pk_marbasclass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CS&quot;</span><span class="punctuation">,</span>                  <span class="comment">//物料分类 必需</span></span><br><span class="line">    <span class="attr">&quot;intolerance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.05&quot;</span><span class="punctuation">,</span>                   <span class="comment">//入库容差 必需</span></span><br><span class="line">    <span class="attr">&quot;outtolerance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.05&quot;</span><span class="punctuation">,</span>                  <span class="comment">//出库容差 必需</span></span><br><span class="line">    <span class="attr">&quot;pk_mattaxes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN007&quot;</span><span class="punctuation">,</span>                  <span class="comment">//物料税类 必需    </span></span><br><span class="line">    <span class="attr">&quot;enablestate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span>                      <span class="comment">//启用状态 非必需，可默认</span></span><br><span class="line">    <span class="attr">&quot;pk_org&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01&quot;</span><span class="punctuation">,</span>                          <span class="comment">//业务单元，非必需可默认集团级</span></span><br><span class="line">    <span class="attr">&quot;memo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0521测试1&quot;</span>                       <span class="comment">//备注，非必需</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="以Rest接口的方式-创建一个Resources"><a href="#以Rest接口的方式-创建一个Resources" class="headerlink" title="以Rest接口的方式 创建一个Resources"></a>以Rest接口的方式 创建一个Resources</h2><ul><li>注意，rest接口在ncc版本升级为 openapi接口，本质上二者相同。</li><li>下面是伪代码，主要分为3个步骤  <ul><li>拼装物料vo</li><li>新增</li><li>分配组织</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;/uapbd/material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaterialResources</span> <span class="keyword">extends</span> <span class="title class_">AbstractUAPRestResource</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getModule</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;uapbd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path(&quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@Consumes(&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@Produces(&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">addMaterialDoc</span><span class="params">(JSONObject json)</span> &#123;</span><br><span class="line"><span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> Log.getInstance(<span class="string">&quot;sclog&quot;</span>);</span><br><span class="line">logger.info(<span class="string">&quot;  ---------首创环保--&gt;物料新增接口--&gt;进入  --------- \n &quot;</span>);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">errbuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">mcode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.拼装物料VO</span></span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">savevo</span> <span class="operator">=</span> <span class="built_in">this</span>.generateMaterialVO(json.toJSONString(), properties.getProperty(<span class="string">&quot;groupCode&quot;</span>));</span><br><span class="line">mcode = savevo.getCode();</span><br><span class="line"><span class="comment">// 1.5加锁，验重</span></span><br><span class="line"><span class="keyword">if</span> (!PKLock.getInstance().addDynamicLock(mcode)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockFailedException</span>(mcode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">clause</span> <span class="operator">=</span> <span class="string">&quot; code = &#x27;&quot;</span> + mcode + <span class="string">&quot;&#x27; and dr = &#x27;0&#x27; &quot;</span>;</span><br><span class="line">Collection&lt;MaterialVO&gt; resColl = getDAO().retrieveByClause(MaterialVO.class, clause);</span><br><span class="line"><span class="keyword">if</span> (!resColl.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;编码为&quot;</span> + mcode + <span class="string">&quot;的物料已经存在，请勿重复新增！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.新增</span></span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">savedvo</span> <span class="operator">=</span> ((IMaterialBaseInfoService) NCLocator.getInstance()</span><br><span class="line">.lookup(IMaterialBaseInfoService.class)).insertMaterial(savevo);</span><br><span class="line">errbuf.append(<span class="string">&quot;物料新增成功！&quot;</span>);</span><br><span class="line">PKLock.getInstance().releaseLock(savevo.getPk_material(), InvocationInfoProxy.getInstance().getUserId(),</span><br><span class="line">InvocationInfoProxy.getInstance().getUserDataSource());</span><br><span class="line">            <span class="comment">// 3.分配组织</span></span><br><span class="line"><span class="built_in">this</span>.assignMaterialVO(savedvo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">PKLock.getInstance().releaseLock(mcode, InvocationInfoProxy.getInstance().getUserId(),</span><br><span class="line">InvocationInfoProxy.getInstance().getUserDataSource());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拼装物料VO"><a href="#拼装物料VO" class="headerlink" title="拼装物料VO"></a>拼装物料VO</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 生成一个物料VO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> opt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> MaterialVO <span class="title function_">generateMaterialVO</span><span class="params">(String param, String groupCode)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jparam</span> <span class="operator">=</span> JSON.parseObject(param);</span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">materialVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaterialVO</span>();</span><br><span class="line">materialVO.setPk_group(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验必填字段</span></span><br><span class="line">Map&lt;String, String&gt; failInfos = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">isExistClumns(jparam, failInfos);</span><br><span class="line"><span class="keyword">if</span>(failInfos!=<span class="literal">null</span> &amp;&amp; failInfos.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(failInfos.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!groupCode.equals(jparam.getString(<span class="string">&quot;pk_org&quot;</span>)) &amp;&amp; StringUtils.isNotEmpty(jparam.getString(<span class="string">&quot;pk_org&quot;</span>))) &#123;</span><br><span class="line"><span class="comment">// 翻译组织</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk</span> <span class="operator">=</span> CommonDataUtil.getOrgPkByCode(jparam.getString(<span class="string">&quot;pk_org&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_org未传值，或未根据档案查询到pk_org主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_org(pk);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">materialVO.setPk_org(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 翻译物料分类</span></span><br><span class="line">Map&lt;String, String&gt; map = CommonDataUtil.getTopMarbasclassPkByCode(jparam.getString(<span class="string">&quot;pk_marbasclass&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == map || map.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_marbasclass未传值，或未根据档案查询到pk_marbasclass主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_marbasclass(map.get(<span class="string">&quot;pk&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 翻译税率税码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 根据物料分类获取物料分类顶级物料编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 物料分类顶级编码: 28 税率为6%; 其他的物料分类默认税率 13%</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">mattaxcode</span> <span class="operator">=</span> <span class="string">&quot;13&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (map.get(<span class="string">&quot;topcode&quot;</span>).equals(<span class="string">&quot;28&quot;</span>)) &#123;</span><br><span class="line">mattaxcode = <span class="string">&quot;6&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_mattax</span> <span class="operator">=</span> CommonDataUtil.getMattaxesPkByCode(mattaxcode);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_mattax)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_mattax未传值，或未根据档案查询到pk_mattax主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_mattaxes(pk_mattax);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译物料的单位</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_measdoc</span> <span class="operator">=</span> CommonDataUtil.getMeasdocPkByCode(jparam.getString(<span class="string">&quot;pk_measdoc&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_measdoc)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_measdoc未传值，或未根据档案查询到pk_measdoc主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_measdoc(pk_measdoc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">materialVO.setCode(jparam.getString(<span class="string">&quot;code&quot;</span>));</span><br><span class="line">materialVO.setName(jparam.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">materialVO.setMaterialspec(jparam.getString(<span class="string">&quot;materialspec&quot;</span>));</span><br><span class="line">materialVO.setMaterialtype(jparam.getString(<span class="string">&quot;materialtype&quot;</span>));</span><br><span class="line">        materialVO.setIntolerance(UFDouble.ZERO_DBL);</span><br><span class="line">materialVO.setOuttolerance(UFDouble.ZERO_DBL);</span><br><span class="line">materialVO.setEnablestate(<span class="number">2</span>);</span><br><span class="line">materialVO.setMemo(jparam.getString(<span class="string">&quot;memo&quot;</span>));</span><br><span class="line">materialVO.setOutcloselowerlimit(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setProductfamily(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setFee(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setDiscountflag(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setStoreunitnum(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setUnitweight(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setSetpartsflag(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setVersion(<span class="number">1</span>);</span><br><span class="line">materialVO.setElectronicsale(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setRetail(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setUnitvolume(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setIsfeature(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setLatest(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setIselectrans(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">MaterialConvertVO</span> <span class="variable">materialConvertVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaterialConvertVO</span>();</span><br><span class="line">materialConvertVO.setStatus(<span class="number">2</span>);</span><br><span class="line">materialConvertVO.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">materialConvertVO.setFixedflag(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIspiecemangage(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialConvertVO.setIsprodmeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIspumeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIsretailmeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIssalemeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIsstockmeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIsstorebalance(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setMeasrate(<span class="string">&quot;1/1&quot;</span>);</span><br><span class="line">materialConvertVO.setPk_measdoc(materialVO.getPk_measdoc());</span><br><span class="line">materialVO.setMaterialconvert(<span class="keyword">new</span> <span class="title class_">MaterialConvertVO</span>[] &#123; materialConvertVO &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> materialVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 校验业务字段是否存在&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headVOJson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bodyVOsJson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> failInfos </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isExistClumns</span><span class="params">(JSONObject headVOJson, Map&lt;String, String&gt; failInfos)</span> &#123;</span><br><span class="line"><span class="comment">// 必传字段校验-表头</span></span><br><span class="line">String[] dataClmns = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;pk_measdoc&quot;</span>,<span class="string">&quot;pk_marbasclass&quot;</span>,<span class="string">&quot;enablestate&quot;</span>,<span class="string">&quot;pk_org&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(String dataClmn:dataClmns)&#123;</span><br><span class="line"><span class="keyword">if</span>(!headVOJson.containsKey(dataClmn) || (headVOJson.containsKey(dataClmn) &amp;&amp; StringUtils.isBlank(headVOJson.getString(dataClmn))))&#123;</span><br><span class="line">failInfos.put(<span class="string">&quot;errorMsg&quot;</span>, <span class="string">&quot;报文字段&quot;</span>+dataClmn+<span class="string">&quot;不存在或者值为空.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用实现类执行新增操作"><a href="#调用实现类执行新增操作" class="headerlink" title="调用实现类执行新增操作"></a>调用实现类执行新增操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.新增</span></span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">savedvo</span> <span class="operator">=</span> ((IMaterialBaseInfoService) NCLocator.getInstance()</span><br><span class="line">.lookup(IMaterialBaseInfoService.class)).insertMaterial(savevo);</span><br></pre></td></tr></table></figure><h2 id="分配业务单元权限"><a href="#分配业务单元权限" class="headerlink" title="分配业务单元权限"></a>分配业务单元权限</h2><ul><li>默认分配所有的业务单元</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> zht 分配业务单元权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> savedvo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">assignMaterialVO</span><span class="params">(MaterialVO savedvo)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_org from org_orgs where dr = &#x27;0&#x27; and isbusinessunit = &#x27;Y&#x27; and islastversion = &#x27;Y&#x27; &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; and def3 = &#x27;Y&#x27; &quot;</span>);  <span class="comment">//这里有额外条件，def3 = Y</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; orgList = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line"></span><br><span class="line">buf = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_costregion from org_costregion  &quot;</span>);</span><br><span class="line">orgList.addAll((List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>()));</span><br><span class="line"><span class="type">String</span> <span class="variable">strWhere</span> <span class="operator">=</span> <span class="string">&quot; ( pk_org = &#x27;&quot;</span> + savedvo.getPk_group() + <span class="string">&quot;&#x27;  and code =&#x27;&quot;</span> + savedvo.getCode() + <span class="string">&quot;&#x27; )&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">AssignStatus</span> <span class="variable">assignStatus</span> <span class="operator">=</span> AssignStatus.ALL;</span><br><span class="line"><span class="type">IMaterialAssignService</span> <span class="variable">serviceAssign</span> <span class="operator">=</span> ((IMaterialAssignService) NCLocator.getInstance()</span><br><span class="line">.lookup(IMaterialAssignService.class));</span><br><span class="line"><span class="type">ErrLogReturnValue</span> <span class="variable">errLog</span> <span class="operator">=</span> serviceAssign.assignMaterialByCondition(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; savedvo.getPk_group() &#125;,</span><br><span class="line">strWhere, assignStatus, orgList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errLog != <span class="literal">null</span> &amp;&amp; errLog.getErrLogResult().getErrorMsgs() != <span class="literal">null</span></span><br><span class="line">&amp;&amp; (errLog.getErrLogResult().getErrorMsgs()).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (ErrorMsgVO err : errLog.getErrLogResult().getErrorMsgs()) &#123;</span><br><span class="line">errMsg = errMsg + err.getErrormsg() + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errMsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="附赠，Resources源码"><a href="#附赠，Resources源码" class="headerlink" title="附赠，Resources源码"></a>附赠，Resources源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nc.bs.bd.material.resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Consumes;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.POST;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.yonyou.nc.ec.portal.api.model.material.MaterialQueryFilter;</span><br><span class="line"><span class="keyword">import</span> com.yonyou.nc.ec.portal.api.service.material.IMaterialQueryService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nc.bs.dao.BaseDAO;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.InvocationInfoProxy;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.NCLocator;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.server.ISecurityTokenCallback;</span><br><span class="line"><span class="keyword">import</span> nc.bs.logging.Log;</span><br><span class="line"><span class="keyword">import</span> nc.bs.uap.lock.PKLock;</span><br><span class="line"><span class="keyword">import</span> nc.bs.uif2.LockFailedException;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.material.assign.IMaterialAssignService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.material.baseinfo.IMaterialBaseInfoService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.pub.assign.AssignStatus;</span><br><span class="line"><span class="keyword">import</span> nc.jdbc.framework.processor.ColumnListProcessor;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bean.NCResponseBean;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bean.NCResponseBeanBody;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bean.NCResponseStatus;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.errorlog.ErrLogReturnValue;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.errorlog.ErrorMsgVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.material.MaterialConvertVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.material.MaterialVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.util.CommonDataUtil;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.util.SCCommonUtil;</span><br><span class="line"><span class="keyword">import</span> nc.vo.org.OrgVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.BusinessException;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFBoolean;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFDouble;</span><br><span class="line"><span class="keyword">import</span> nc.vo.sm.UserVO;</span><br><span class="line"><span class="keyword">import</span> uap.ws.rest.resource.AbstractUAPRestResource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 6.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zht</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Path(&quot;/uapbd/material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaterialResources</span> <span class="keyword">extends</span> <span class="title class_">AbstractUAPRestResource</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getModule</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;uapbd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path(&quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@Consumes(&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@Produces(&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">addMaterialDoc</span><span class="params">(JSONObject json)</span> &#123;</span><br><span class="line"><span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> Log.getInstance(<span class="string">&quot;sclog&quot;</span>);</span><br><span class="line">logger.info(<span class="string">&quot;  ---------首创环保--&gt;物料新增接口--&gt;进入  --------- \n &quot;</span>);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">errbuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">mcode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 人员信息；账套；集团都是默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;  ---------请求报文 --&gt; &quot;</span> + json.toJSONString());</span><br><span class="line"><span class="type">SCCommonUtil</span> <span class="variable">util</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SCCommonUtil</span>();</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> util.getProperties();</span><br><span class="line"><span class="type">String</span> <span class="variable">cuserId</span> <span class="operator">=</span> getUserId(properties.getProperty(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_group</span> <span class="operator">=</span> getPkGroup(properties.getProperty(<span class="string">&quot;groupCode&quot;</span>));</span><br><span class="line">InvocationInfoProxy.getInstance().setUserCode(properties.getProperty(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">InvocationInfoProxy.getInstance().setUserId(cuserId);</span><br><span class="line">InvocationInfoProxy.getInstance().setGroupId(pk_group);</span><br><span class="line">InvocationInfoProxy.getInstance().setUserDataSource(properties.getProperty(<span class="string">&quot;dsname&quot;</span>));</span><br><span class="line">NCLocator.getInstance().lookup(ISecurityTokenCallback.class).token(<span class="string">&quot;NCSystem&quot;</span>.getBytes(),</span><br><span class="line"><span class="string">&quot;NCLink&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.拼装物料VO</span></span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">savevo</span> <span class="operator">=</span> <span class="built_in">this</span>.generateMaterialVO(json.toJSONString(), properties.getProperty(<span class="string">&quot;groupCode&quot;</span>));</span><br><span class="line">mcode = savevo.getCode();</span><br><span class="line"><span class="comment">// 加锁，验重</span></span><br><span class="line"><span class="keyword">if</span> (!PKLock.getInstance().addDynamicLock(mcode)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockFailedException</span>(mcode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">clause</span> <span class="operator">=</span> <span class="string">&quot; code = &#x27;&quot;</span> + mcode + <span class="string">&quot;&#x27; and dr = &#x27;0&#x27; &quot;</span>;</span><br><span class="line">Collection&lt;MaterialVO&gt; resColl = getDAO().retrieveByClause(MaterialVO.class, clause);</span><br><span class="line"><span class="keyword">if</span> (!resColl.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;编码为&quot;</span> + mcode + <span class="string">&quot;的物料已经存在，请勿重复新增！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.新增</span></span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">savedvo</span> <span class="operator">=</span> ((IMaterialBaseInfoService) NCLocator.getInstance()</span><br><span class="line">.lookup(IMaterialBaseInfoService.class)).insertMaterial(savevo);</span><br><span class="line">errbuf.append(<span class="string">&quot;物料新增成功！&quot;</span>);</span><br><span class="line">PKLock.getInstance().releaseLock(savevo.getPk_material(), InvocationInfoProxy.getInstance().getUserId(),</span><br><span class="line">InvocationInfoProxy.getInstance().getUserDataSource());</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.assignMaterialVO(savedvo);</span><br><span class="line"><span class="comment">// 处理返回信息</span></span><br><span class="line"><span class="type">NCResponseBean</span> <span class="variable">resBean</span> <span class="operator">=</span> NCResponseBean.getSuccessResponse();</span><br><span class="line"><span class="type">NCResponseBeanBody</span> <span class="variable">resBody</span> <span class="operator">=</span> NCResponseBeanBody.getSuccessResBody(NCResponseStatus.MATERIAL_ADD_SUCCESS);</span><br><span class="line">resBean.setData(<span class="keyword">new</span> <span class="title class_">NCResponseBeanBody</span>[] &#123; resBody &#125;);</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(resBean);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;  ---------错误信息 --&gt; &quot;</span> + e.getMessage());</span><br><span class="line"><span class="type">NCResponseBean</span> <span class="variable">resBean</span> <span class="operator">=</span> NCResponseBean.getSuccessResponse();</span><br><span class="line"><span class="type">NCResponseBeanBody</span> <span class="variable">resBody</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errbuf.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">resBody = NCResponseBeanBody.getFailResBody(<span class="string">&quot;物料新增成功，分配组织及成本域失败，请手动分配！信息：&quot;</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resBody = NCResponseBeanBody.getFailResBody(<span class="string">&quot;物料新增失败！信息：&quot;</span> + e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">resBean.setData(<span class="keyword">new</span> <span class="title class_">NCResponseBeanBody</span>[] &#123; resBody &#125;);</span><br><span class="line"><span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(resBean);</span><br><span class="line">logger.info(<span class="string">&quot;  ---------返回信息 --&gt; &quot;</span> + res);</span><br><span class="line">logger.info(<span class="string">&quot;  ---------首创环保--&gt;物料新增接口--&gt;退出  --------- \n &quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">PKLock.getInstance().releaseLock(mcode, InvocationInfoProxy.getInstance().getUserId(),</span><br><span class="line">InvocationInfoProxy.getInstance().getUserDataSource());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> zht 分配业务单元权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> savedvo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">assignMaterialVO</span><span class="params">(MaterialVO savedvo)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_org from org_orgs where dr = &#x27;0&#x27; and isbusinessunit = &#x27;Y&#x27; and islastversion = &#x27;Y&#x27; &quot;</span>)</span><br><span class="line">.append(<span class="string">&quot; and def3 = &#x27;Y&#x27; &quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; orgList = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line"></span><br><span class="line">buf = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_costregion from org_costregion  &quot;</span>);</span><br><span class="line">orgList.addAll((List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>()));</span><br><span class="line"><span class="type">String</span> <span class="variable">strWhere</span> <span class="operator">=</span> <span class="string">&quot; ( pk_org = &#x27;&quot;</span> + savedvo.getPk_group() + <span class="string">&quot;&#x27;  and code =&#x27;&quot;</span> + savedvo.getCode() + <span class="string">&quot;&#x27; )&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">AssignStatus</span> <span class="variable">assignStatus</span> <span class="operator">=</span> AssignStatus.ALL;</span><br><span class="line"><span class="type">IMaterialAssignService</span> <span class="variable">serviceAssign</span> <span class="operator">=</span> ((IMaterialAssignService) NCLocator.getInstance()</span><br><span class="line">.lookup(IMaterialAssignService.class));</span><br><span class="line"><span class="type">ErrLogReturnValue</span> <span class="variable">errLog</span> <span class="operator">=</span> serviceAssign.assignMaterialByCondition(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; savedvo.getPk_group() &#125;,</span><br><span class="line">strWhere, assignStatus, orgList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errLog != <span class="literal">null</span> &amp;&amp; errLog.getErrLogResult().getErrorMsgs() != <span class="literal">null</span></span><br><span class="line">&amp;&amp; (errLog.getErrLogResult().getErrorMsgs()).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (ErrorMsgVO err : errLog.getErrLogResult().getErrorMsgs()) &#123;</span><br><span class="line">errMsg = errMsg + err.getErrormsg() + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(errMsg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BaseDAO dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BaseDAO <span class="title function_">getDAO</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dao == <span class="literal">null</span>) &#123;</span><br><span class="line">dao = <span class="keyword">new</span> <span class="title class_">BaseDAO</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 生成一个物料VO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> opt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> MaterialVO <span class="title function_">generateMaterialVO</span><span class="params">(String param, String groupCode)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jparam</span> <span class="operator">=</span> JSON.parseObject(param);</span><br><span class="line"><span class="type">MaterialVO</span> <span class="variable">materialVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaterialVO</span>();</span><br><span class="line">materialVO.setPk_group(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验必填字段</span></span><br><span class="line">Map&lt;String, String&gt; failInfos = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">isExistClumns(jparam, failInfos);</span><br><span class="line"><span class="keyword">if</span>(failInfos!=<span class="literal">null</span> &amp;&amp; failInfos.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(failInfos.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!groupCode.equals(jparam.getString(<span class="string">&quot;pk_org&quot;</span>)) &amp;&amp; StringUtils.isNotEmpty(jparam.getString(<span class="string">&quot;pk_org&quot;</span>))) &#123;</span><br><span class="line"><span class="comment">// 翻译组织</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk</span> <span class="operator">=</span> CommonDataUtil.getOrgPkByCode(jparam.getString(<span class="string">&quot;pk_org&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_org未传值，或未根据档案查询到pk_org主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_org(pk);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">materialVO.setPk_org(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 翻译物料分类</span></span><br><span class="line">Map&lt;String, String&gt; map = CommonDataUtil.getTopMarbasclassPkByCode(jparam.getString(<span class="string">&quot;pk_marbasclass&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == map || map.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_marbasclass未传值，或未根据档案查询到pk_marbasclass主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_marbasclass(map.get(<span class="string">&quot;pk&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 翻译税率税码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 根据物料分类获取物料分类顶级物料编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 物料分类顶级编码: 28 税率为6%; 其他的物料分类默认税率 13%</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">mattaxcode</span> <span class="operator">=</span> <span class="string">&quot;13&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (map.get(<span class="string">&quot;topcode&quot;</span>).equals(<span class="string">&quot;28&quot;</span>)) &#123;</span><br><span class="line">mattaxcode = <span class="string">&quot;6&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_mattax</span> <span class="operator">=</span> CommonDataUtil.getMattaxesPkByCode(mattaxcode);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_mattax)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_mattax未传值，或未根据档案查询到pk_mattax主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_mattaxes(pk_mattax);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译物料的单位</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_measdoc</span> <span class="operator">=</span> CommonDataUtil.getMeasdocPkByCode(jparam.getString(<span class="string">&quot;pk_measdoc&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_measdoc)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;报文中 pk_measdoc未传值，或未根据档案查询到pk_measdoc主键！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">materialVO.setPk_measdoc(pk_measdoc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化数据</span></span><br><span class="line">materialVO.setCode(jparam.getString(<span class="string">&quot;code&quot;</span>));</span><br><span class="line">materialVO.setName(jparam.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">materialVO.setMaterialspec(jparam.getString(<span class="string">&quot;materialspec&quot;</span>));</span><br><span class="line">materialVO.setMaterialtype(jparam.getString(<span class="string">&quot;materialtype&quot;</span>));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 根据物料类型 判断容差</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 药剂类的分类编码大类： 06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (map.get(<span class="string">&quot;topcode&quot;</span>).equals(<span class="string">&quot;06&quot;</span>)) &#123;</span><br><span class="line">materialVO.setIntolerance(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">100</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">materialVO.setIntolerance(UFDouble.ZERO_DBL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">materialVO.setOuttolerance(UFDouble.ZERO_DBL);</span><br><span class="line">materialVO.setEnablestate(<span class="number">2</span>);</span><br><span class="line">materialVO.setMemo(jparam.getString(<span class="string">&quot;memo&quot;</span>));</span><br><span class="line">materialVO.setOutcloselowerlimit(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setProductfamily(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setFee(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setDiscountflag(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setStoreunitnum(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setUnitweight(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setSetpartsflag(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setVersion(<span class="number">1</span>);</span><br><span class="line">materialVO.setElectronicsale(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setRetail(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setUnitvolume(<span class="keyword">new</span> <span class="title class_">UFDouble</span>(<span class="number">0.0</span>));</span><br><span class="line">materialVO.setIsfeature(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setLatest(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialVO.setIselectrans(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">MaterialConvertVO</span> <span class="variable">materialConvertVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaterialConvertVO</span>();</span><br><span class="line">materialConvertVO.setStatus(<span class="number">2</span>);</span><br><span class="line">materialConvertVO.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">materialConvertVO.setFixedflag(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIspiecemangage(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">materialConvertVO.setIsprodmeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIspumeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIsretailmeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIssalemeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">materialConvertVO.setIsstockmeasdoc(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setIsstorebalance(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">true</span>));</span><br><span class="line">materialConvertVO.setMeasrate(<span class="string">&quot;1/1&quot;</span>);</span><br><span class="line">materialConvertVO.setPk_measdoc(materialVO.getPk_measdoc());</span><br><span class="line">materialVO.setMaterialconvert(<span class="keyword">new</span> <span class="title class_">MaterialConvertVO</span>[] &#123; materialConvertVO &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> materialVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 根据user_code获取cuserId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user_code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">(String user_code)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">cuserId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Collection&lt;UserVO&gt; userVOAll = <span class="keyword">new</span> <span class="title class_">BaseDAO</span>(<span class="string">&quot;scncc&quot;</span>).retrieveByClause(UserVO.class,</span><br><span class="line"><span class="string">&quot;user_code =&#x27;&quot;</span> + user_code + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != userVOAll &amp;&amp; userVOAll.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (UserVO vo : userVOAll) &#123;</span><br><span class="line">cuserId = vo.getCuserid();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cuserId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 根据编码code获取集团编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPkGroup</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_group</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Collection&lt;OrgVO&gt; orgVOAll = <span class="keyword">new</span> <span class="title class_">BaseDAO</span>(<span class="string">&quot;scncc&quot;</span>).retrieveByClause(OrgVO.class, <span class="string">&quot;code =&#x27;&quot;</span> + code + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != orgVOAll &amp;&amp; orgVOAll.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (OrgVO vo : orgVOAll) &#123;</span><br><span class="line">pk_group = vo.getPk_group();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pk_group;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 校验业务字段是否存在&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headVOJson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bodyVOsJson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> failInfos </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isExistClumns</span><span class="params">(JSONObject headVOJson, Map&lt;String, String&gt; failInfos)</span> &#123;</span><br><span class="line"><span class="comment">// 必传字段校验-表头</span></span><br><span class="line">String[] dataClmns = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">      <span class="string">&quot;code&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;pk_measdoc&quot;</span>,<span class="string">&quot;pk_marbasclass&quot;</span>,<span class="string">&quot;enablestate&quot;</span>,<span class="string">&quot;pk_org&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(String dataClmn:dataClmns)&#123;</span><br><span class="line"><span class="keyword">if</span>(!headVOJson.containsKey(dataClmn) || (headVOJson.containsKey(dataClmn) &amp;&amp; StringUtils.isBlank(headVOJson.getString(dataClmn))))&#123;</span><br><span class="line">failInfos.put(<span class="string">&quot;errorMsg&quot;</span>, <span class="string">&quot;报文字段&quot;</span>+dataClmn+<span class="string">&quot;不存在或者值为空.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写一个Servlet接口</title>
      <link href="/2024/06/28/240628/%E5%86%99%E4%B8%80%E4%B8%AAServlet%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/06/28/240628/%E5%86%99%E4%B8%80%E4%B8%AAServlet%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="如何写一个Servlet接口"><a href="#如何写一个Servlet接口" class="headerlink" title="如何写一个Servlet接口"></a>如何写一个Servlet接口</h1><h2 id="1-新建一个Servlet类"><a href="#1-新建一个Servlet类" class="headerlink" title="1.新建一个Servlet类"></a>1.新建一个Servlet类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HkrbtoNcServlet</span>  <span class="keyword">extends</span> <span class="title class_">HttpServlet</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">rtJson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">requestJson</span> <span class="operator">=</span> dealReqData(req, resp);</span><br><span class="line"><span class="comment">//初始化系统</span></span><br><span class="line"><span class="comment">//initSystem();</span></span><br><span class="line"><span class="comment">//解析路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> req.getRequestURL().toString();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//部门新增  举个例子</span></span><br><span class="line"><span class="keyword">if</span> (path.contains(<span class="string">&quot;deptAdd&quot;</span>)) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;Dept&quot;</span>, <span class="string">&quot;部门新增接口--&gt;进入&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">rtJson = <span class="keyword">new</span> <span class="title class_">HandleDeptBP</span>().processDeptAdd(requestJson);</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;Dept&quot;</span>, <span class="string">&quot;部门新增接口--&gt;退出&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dealResData(req, resp, rtJson);</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">dealResData(req, resp, ResultMessageUtil.exceptionToJSON(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dealReqData，dealResData-处理请求相应信息的方法"><a href="#dealReqData，dealResData-处理请求相应信息的方法" class="headerlink" title="dealReqData，dealResData 处理请求相应信息的方法"></a>dealReqData，dealResData 处理请求相应信息的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealResData</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, String rtJson)</span> &#123;</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out = resp.getWriter();</span><br><span class="line">out.write(rtJson);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">out.write(ResultMessageUtil.exceptionToJSON(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dealReqData</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 初始化编码格式</span></span><br><span class="line">req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> req.getReader();</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">sb.append(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 构造响应报文</span></span><br><span class="line"><span class="type">String</span> <span class="variable">rtJson</span> <span class="operator">=</span> ResultMessageUtil.exceptionToJSON(e);</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">PrintWriter out;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out = resp.getWriter();</span><br><span class="line">out.write(rtJson);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理响应信息，转换为json格式的工具类"><a href="#处理响应信息，转换为json格式的工具类" class="headerlink" title="处理响应信息，转换为json格式的工具类"></a>处理响应信息，转换为json格式的工具类</h3><ul><li>BIP,NCC系统应该自带（名字不一样哦~），nc系列的要自己写</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultMessageUtil</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> success;</span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"><span class="keyword">private</span> String errorStack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuccess</span><span class="params">(<span class="type">boolean</span> success)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.success = success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getErrorStack</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.errorStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setErrorStack</span><span class="params">(String errorStack)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.errorStack = errorStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJSON</span><span class="params">(Object data, String code, String message, <span class="type">boolean</span> isTranslate)</span> &#123;</span><br><span class="line"><span class="type">ResultMessageUtil</span> <span class="variable">rm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultMessageUtil</span>();</span><br><span class="line">rm.setMessage(message);</span><br><span class="line">rm.setData(data);</span><br><span class="line">rm.setSuccess(<span class="literal">true</span>);</span><br><span class="line">rm.setCode(code);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rm.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">exceptionToJSON</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line"><span class="type">ResultMessageUtil</span> <span class="variable">rm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResultMessageUtil</span>();</span><br><span class="line">rm.setErrorStack(<span class="literal">null</span>);</span><br><span class="line">rm.setMessage(e.getMessage());</span><br><span class="line">rm.setCode(<span class="string">&quot;99999999&quot;</span>);</span><br><span class="line">rm.setSuccess(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span> rm.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJSON</span><span class="params">(Object data)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> toJSON(data, <span class="string">&quot;1000000000&quot;</span>, (String) <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Throwable <span class="title function_">unmarsh</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line"><span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> ex.getCause();</span><br><span class="line"><span class="keyword">if</span> (cause != <span class="literal">null</span>) &#123;</span><br><span class="line">cause = unmarsh(cause);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cause = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cause;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">jsonObject.put(<span class="string">&quot;success&quot;</span>, success);</span><br><span class="line">jsonObject.put(<span class="string">&quot;data&quot;</span>, data==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:data);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;code&quot;</span>, code==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:<span class="literal">false</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;message&quot;</span>, message==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:message);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;errorStack&quot;</span>, errorStack==<span class="literal">null</span>?<span class="string">&quot;&quot;</span>:errorStack);</span><br><span class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> jsonObject.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="记录日志信息的工具类"><a href="#记录日志信息的工具类" class="headerlink" title="记录日志信息的工具类"></a>记录日志信息的工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogWriteUtil</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日志输出</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> vbillcode  文件夹名字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> message    记录什么东西</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> issend 为null时，输出日志前不拼接信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeInfo</span><span class="params">(String vbillcode, String message, UFBoolean issend)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取home路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">homepath</span> <span class="operator">=</span> RuntimeEnv.getInstance().getNCHome();</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(homepath);</span><br><span class="line">    sb.append(File.separator).append(<span class="string">&quot;messages&quot;</span>);</span><br><span class="line">    sb.append(File.separator).append(<span class="string">&quot;export&quot;</span>);</span><br><span class="line">    sb.append(File.separator).append(vbillcode);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(sb.toString());</span><br><span class="line">    <span class="comment">// 如果文件夹不存在就创建文件夹</span></span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);<span class="comment">// 设置日期格式</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">systime</span> <span class="operator">=</span> df.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="comment">// 文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> vbillcode + <span class="string">&quot;msg_&quot;</span> + systime.substring(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    + <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">    <span class="comment">// 文件路径</span></span><br><span class="line">    sb.append(File.separator).append(filename.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(sb.toString(), <span class="literal">true</span>);</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;\n当前时间【&quot;</span>);</span><br><span class="line">    buf.append(systime).append(<span class="string">&quot;】，接口信息--------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (issend != <span class="literal">null</span> &amp;&amp; issend.booleanValue()) &#123;</span><br><span class="line">    buf.append(<span class="string">&quot;请求报文: &quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (issend != <span class="literal">null</span> &amp;&amp; !issend.booleanValue()) &#123;</span><br><span class="line">    buf.append(<span class="string">&quot;返回报文: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    buf.append(message);</span><br><span class="line">    writer.write(buf.toString());</span><br><span class="line">    writer.flush();</span><br><span class="line">    writer.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    Logger.error(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化系统方法"><a href="#初始化系统方法" class="headerlink" title="初始化系统方法"></a>初始化系统方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initSystem</span><span class="params">()</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> getPropertiesByFile(<span class="string">&quot;hkrbconfig.properties&quot;</span>);  <span class="comment">//配置文件放在 home/resources目录下</span></span><br><span class="line"><span class="comment">//NCLocator.getInstance().lookup(ISecurityTokenCallback.class).token(&quot;NCSystem&quot;.getBytes(),</span></span><br><span class="line"><span class="comment">//&quot;pfxx&quot;.getBytes());</span></span><br><span class="line">InvocationInfoProxy.getInstance().setUserDataSource(properties.getProperty(<span class="string">&quot;datasource&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_group</span> <span class="operator">=</span> CommonDataUtil.getGroupPkByCode(properties.getProperty(<span class="string">&quot;groupCode&quot;</span>));</span><br><span class="line">InvocationInfoProxy.getInstance().setGroupId(pk_group);<span class="comment">// 初始化集团</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cuserid</span> <span class="operator">=</span> CommonDataUtil.getUserPkByCode(properties.getProperty(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">InvocationInfoProxy.getInstance().setUserId(cuserid);<span class="comment">// 初始化用户</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Properties <span class="title function_">getPropertiesByFile</span><span class="params">(String filename)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classloader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> classloader.getResourceAsStream(filename);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">properties.load(reader);</span><br><span class="line"><span class="keyword">return</span> properties;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">inputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-写一份-UPM文件"><a href="#2-写一份-UPM文件" class="headerlink" title="2. 写一份 .UPM文件"></a>2. 写一份 .UPM文件</h2><ul><li>存放位置  home&#x2F;modules&#x2F;模块名&#x2F;META-INF 下面</li></ul><p><img src="/2024/06/28/240628/%E5%86%99%E4%B8%80%E4%B8%AAServlet%E6%8E%A5%E5%8F%A3/image-20240628180240987.png" alt="image-20240628180240987"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;hkrb&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">public</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">accessProtected</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;deptAdd&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;true&quot;</span> <span class="attr">singleton</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">tx</span>=<span class="string">&quot;NONE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">implementation</span>&gt;</span>nc.bs.hkrb.servlet.HkrbtoNcServlet<span class="tag">&lt;/<span class="name">implementation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">public</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后面如果有新增的 接口和实现类，也可以写在里面!</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">public</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">priority</span>=<span class="string">&quot;0&quot;</span> <span class="attr">singleton</span>=<span class="string">&quot;true&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;true&quot;</span> <span class="attr">tx</span>=<span class="string">&quot;CMT&quot;</span> <span class="attr">supportAlias</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span>&gt;</span>nc.itf.mcw.MCWBillItf<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">implementation</span>&gt;</span>nc.bs.mcw.impl.MCWBillImpl<span class="tag">&lt;/<span class="name">implementation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">public</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-重新部署，重启-就可以访问了！"><a href="#3-重新部署，重启-就可以访问了！" class="headerlink" title="3.重新部署，重启 就可以访问了！"></a>3.重新部署，重启 就可以访问了！</h2><p>访问地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:80/service/deptAdd</span><br></pre></td></tr></table></figure><p>ip:port&#x2F;service 是默认的调用路径，后面拼上你的upm里定义的path就是完整路径。</p><p><img src="/2024/06/28/240628/%E5%86%99%E4%B8%80%E4%B8%AAServlet%E6%8E%A5%E5%8F%A3/image-20240628181104477.png" alt="image-20240628181104477"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>客户档案新增接口</title>
      <link href="/2024/06/28/240628/%E5%AE%A2%E6%88%B7%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/06/28/240628/%E5%AE%A2%E6%88%B7%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="客户档案新增接口"><a href="#客户档案新增接口" class="headerlink" title="客户档案新增接口"></a>客户档案新增接口</h1><ul><li>BIP，NCC版本</li></ul><h2 id="OPENAPI接口"><a href="#OPENAPI接口" class="headerlink" title="OPENAPI接口"></a>OPENAPI接口</h2><ul><li>原生的Resourecs类 ：nccloud.openapi.hfmp.doc.customer.CustomerInfoResources</li></ul><h3 id="如何写一个openapi接口"><a href="#如何写一个openapi接口" class="headerlink" title="如何写一个openapi接口"></a>如何写一个openapi接口</h3><ul><li><p>前面在供应商档案接口介绍了：</p><ol><li>Resourecs类</li><li>.rest文件</li><li>前台注册api(去数据库检查 OPM_APIMANAGER) </li><li>为应用分配api的权限</li><li>部署后重启系统，调用后能进入自己的代码就算成功了！</li></ol></li><li><p>Resources类实例：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path(&quot;shcm/customer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShcmCustomerInfoResources</span> <span class="keyword">extends</span> <span class="title class_">CustomerInfoResources</span> &#123;</span><br><span class="line"><span class="comment">//集成了原生的api的Resources，执行父类的 addCustomer 方法</span></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path(&quot;oa/add&quot;)</span></span><br><span class="line"><span class="meta">@Consumes(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Produces(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> JSONString <span class="title function_">addCustomer</span><span class="params">(JSONString json)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">addCustomer</span> <span class="operator">=</span> <span class="built_in">super</span>.addCustomer(json2);</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.toJSON(addCustomer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户的api报文"><a href="#客户的api报文" class="headerlink" title="客户的api报文"></a>客户的api报文</h2><h3 id="api需要的报文"><a href="#api需要的报文" class="headerlink" title="api需要的报文"></a>api需要的报文</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ufinterface&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;billtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isexchange&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;groupcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bill&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;billhead&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testc001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;taxpayerid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testc001&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;custprop&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;custstate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enablestate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试客户11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_country&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001Z010000000079UJJ&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_custclass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1001E110000000002CW5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_format&quot;</span><span class="punctuation">:</span><span class="string">&quot;FMT0Z000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001E110000000001ABA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_org&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001E110000000001ABA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_timezone&quot;</span><span class="punctuation">:</span><span class="string">&quot;0001Z010000000079U2P&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="处理报文的方法"><a href="#处理报文的方法" class="headerlink" title="处理报文的方法"></a>处理报文的方法</h3><ul><li>上面的结构有些复杂，写一个方法，将一些能够默认的字段设置值</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">​```</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 处理报文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JSONString <span class="title function_">handleData</span><span class="params">(JSONString json)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonobj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">object.put(<span class="string">&quot;ufinterface&quot;</span>, ufinterface);</span><br><span class="line">ufinterface.put(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;billtype&quot;</span>, <span class="string">&quot;customer&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;groupcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;isexchange&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;replace&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;roottag&quot;</span>, <span class="string">&quot;bill&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;sender&quot;</span>, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;orgcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">bill</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">ufinterface.put(<span class="string">&quot;bill&quot;</span>, bill);</span><br><span class="line">bill.put(<span class="string">&quot;billhead&quot;</span>, jsonobj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织和集团默认集团集</span></span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_group&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_org&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;enablestate&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">jsonobj.put(<span class="string">&quot;custstate&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译pk_country</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_country</span> <span class="operator">=</span> CommonDataQueryUtil.getCountrypkByCode(<span class="string">&quot;CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_country&quot;</span>, pk_country);</span><br><span class="line"><span class="comment">// 翻译时区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_timezone</span> <span class="operator">=</span> CommonDataQueryUtil.getTimezonepkByCode(<span class="string">&quot;P0800&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_timezone&quot;</span>, pk_timezone);</span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_formatdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getFormatPkByCode(<span class="string">&quot;ZH-CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_format&quot;</span>, pk_formatdoc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译 custclass</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_custclass</span> <span class="operator">=</span> CommonDataQueryUtil.getCustClassPkByCode(jsonobj.getString(<span class="string">&quot;pk_custclass&quot;</span>));</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_custclass&quot;</span>, pk_custclass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//原生api需要一个JSONString类型参数，这里需要这样转换一下</span></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> NCCRestUtils.toJSONString(object);</span><br><span class="line"><span class="keyword">return</span> json2;</span><br><span class="line">&#125;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><h3 id="处理后需要的报文"><a href="#处理后需要的报文" class="headerlink" title="处理后需要的报文"></a>处理后需要的报文</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testc004&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;taxpayerid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;testc004&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;测试客户11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_custclass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;custprop&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="为客户自动分配组织"><a href="#为客户自动分配组织" class="headerlink" title="为客户自动分配组织"></a>为客户自动分配组织</h2><p><img src="/2024/06/28/240628/%E5%AE%A2%E6%88%B7%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240628093748468.png" alt="image-20240628093748468"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询出所有需要分配的  业务单元，然后调用方法分配即可！</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 自动分配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">autoAssignOrg</span><span class="params">()</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">ICustAssignService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(ICustAssignService.class);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(</span><br><span class="line"><span class="string">&quot; select pk_org from org_orgs where dr = 0 and ENABLESTATE = 2  and ISBUSINESSUNIT = &#x27;Y&#x27; and ISLASTVERSION = &#x27;Y&#x27;  &quot;</span>);</span><br><span class="line">List&lt;String&gt; resList = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line">service.assignCustomerByPks(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>], resList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; InvocationInfoProxy.getInstance().getGroupId() &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改财务信息和销售信息"><a href="#修改财务信息和销售信息" class="headerlink" title="修改财务信息和销售信息"></a>修改财务信息和销售信息</h2><p><img src="/2024/06/28/240628/%E5%AE%A2%E6%88%B7%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240628094017262.png" alt="image-20240628094017262"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java</span><br><span class="line">private void editCustomerAfterInsert(String pk_customer, JSONObject pk_custsale, JSONObject pk_custfinance)</span><br><span class="line">throws BusinessException &#123;</span><br><span class="line">IAppAndOrgPermQueryPubService userPermSvc = (IAppAndOrgPermQueryPubService) NCLocator.getInstance()</span><br><span class="line">.lookup(IAppAndOrgPermQueryPubService.class);</span><br><span class="line"></span><br><span class="line">// 财务信息</span><br><span class="line">if (pk_custfinance != null) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(&quot;CustomerAdd&quot;, &quot;客户新增接口--&gt;修改财务信息--&gt;&quot; + pk_custfinance.toString() + &quot;\n&quot;,</span><br><span class="line">new UFBoolean(false));</span><br><span class="line">String[] financeOrgPk = userPermSvc.queryUserPermOrgPksByAppAndWithOrgTypesFilter(</span><br><span class="line">CommonDataQueryUtil.getUseridByCode(&quot;OA&quot;), &quot;10140CUG&quot;, new String[] &#123; &quot;FINANCEORGTYPE000000&quot; &#125;,</span><br><span class="line">InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">ICustFinanceService saveFinSer = NCLocator.getInstance().lookup(ICustFinanceService.class);</span><br><span class="line">CustFinanceVO[] custFinanceVos = getCustFinance(financeOrgPk, pk_customer);</span><br><span class="line">if (custFinanceVos.length &gt; 0) &#123;</span><br><span class="line">for (CustFinanceVO finvo : custFinanceVos) &#123;</span><br><span class="line">finvo.setStatus(1);</span><br><span class="line">String pk_org = CommonDataQueryUtil.getOrgPkByCode(pk_custfinance.getString(&quot;pk_org&quot;));</span><br><span class="line">// 收款协议</span><br><span class="line">String pk_income = CommonDataQueryUtil.getIncomePkByCode(pk_custfinance.getString(&quot;pk_payterm&quot;));</span><br><span class="line">finvo.setPk_payterm(pk_income);</span><br><span class="line">// 币种</span><br><span class="line">String pk_currtype = CommonDataQueryUtil</span><br><span class="line">.getCurrtypePkByCode(pk_custfinance.getString(&quot;pk_currtype1&quot;));</span><br><span class="line">finvo.setPk_currtype1(pk_currtype);</span><br><span class="line">// 营业部门</span><br><span class="line">String pk_dept = CommonDataQueryUtil.getDeptPkByCode(pk_custfinance.getString(&quot;pk_respdept1&quot;),</span><br><span class="line">pk_org);</span><br><span class="line">finvo.setPk_respdept1(pk_dept);</span><br><span class="line">// 业务员</span><br><span class="line">String pk_psndoc = CommonDataQueryUtil.getPsndocPkBycode(pk_custfinance.getString(&quot;pk_resppsn1&quot;),</span><br><span class="line">pk_org);</span><br><span class="line">finvo.setPk_resppsn1(pk_psndoc);</span><br><span class="line">saveFinSer.updateCustFinance(finvo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 销售信息</span><br><span class="line">if (pk_custsale != null) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(&quot;CustomerAdd&quot;, &quot;客户新增接口--&gt;修改销售信息--&gt;&quot; + pk_custsale.toString() + &quot;\n&quot;,</span><br><span class="line">new UFBoolean(false));</span><br><span class="line">String[] saleOrgPks = userPermSvc.queryUserPermOrgPksByAppAndWithOrgTypesFilter(</span><br><span class="line">CommonDataQueryUtil.getUseridByCode(&quot;OA&quot;), &quot;10140CUG&quot;, new String[] &#123; &quot;SALEORGTYPE000000000&quot; &#125;,</span><br><span class="line">InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">ICustSaleService saveSaleSer = NCLocator.getInstance().lookup(ICustSaleService.class);</span><br><span class="line">CustsaleVO[] custSaleVOs = getCustSale(saleOrgPks, pk_customer);</span><br><span class="line">if (custSaleVOs.length &gt; 0) &#123;</span><br><span class="line">for (CustsaleVO csalevo : custSaleVOs) &#123;</span><br><span class="line">csalevo.setStatus(1);</span><br><span class="line">String pk_org = CommonDataQueryUtil.getOrgPkByCode(pk_custsale.getString(&quot;pk_org&quot;));</span><br><span class="line">// 收款协议</span><br><span class="line">String pk_income = CommonDataQueryUtil.getIncomePkByCode(pk_custsale.getString(&quot;paytermdefault&quot;));</span><br><span class="line">csalevo.setPaytermdefault(pk_income);</span><br><span class="line">// 币种</span><br><span class="line">String pk_currtype = CommonDataQueryUtil</span><br><span class="line">.getCurrtypePkByCode(pk_custsale.getString(&quot;currencydefault&quot;));</span><br><span class="line">csalevo.setCurrencydefault(pk_currtype);</span><br><span class="line">// 部门</span><br><span class="line">String pk_dept = CommonDataQueryUtil.getDeptPkByCode(pk_custsale.getString(&quot;respdept&quot;), pk_org);</span><br><span class="line">csalevo.setRespdept(pk_dept);</span><br><span class="line">// 人员</span><br><span class="line">String pk_psndoc = CommonDataQueryUtil.getPsndocPkBycode(pk_custsale.getString(&quot;respperson&quot;),</span><br><span class="line">pk_org);</span><br><span class="line">csalevo.setRespperson(pk_psndoc);</span><br><span class="line">saveSaleSer.updateCustSaleVO(csalevo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see 查询客商财务组织</span><br><span class="line"> * @param financeOrgPk</span><br><span class="line"> * @return</span><br><span class="line"> * @throws DAOException</span><br><span class="line"> */</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private CustFinanceVO[] getCustFinance(String[] financeOrgPk, String pk_customer) throws DAOException &#123;</span><br><span class="line">StringBuffer buf = new StringBuffer();</span><br><span class="line">buf.append(&quot; select * from bd_custfinance where 1=1 and ( &quot;);</span><br><span class="line">for (int i = 0; i &lt; financeOrgPk.length; i++) &#123;</span><br><span class="line">buf.append(&quot;pk_org = &#x27;&quot;).append(financeOrgPk[i]).append(&quot;&#x27;&quot;);</span><br><span class="line">if (i != financeOrgPk.length - 1) &#123;</span><br><span class="line">buf.append(&quot; or &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buf.append(&quot; ) &quot;).append(&quot; and pk_customer = &#x27;&quot;).append(pk_customer).append(&quot;&#x27; &quot;);</span><br><span class="line">List&lt;CustFinanceVO&gt; finlist = (List&lt;CustFinanceVO&gt;) getDAO().executeQuery(buf.toString(),</span><br><span class="line">new BeanListProcessor(CustFinanceVO.class));</span><br><span class="line">return finlist.toArray(new CustFinanceVO[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see 获取销售信息</span><br><span class="line"> * @param saleOrgPks</span><br><span class="line"> * @param pk_customer</span><br><span class="line"> * @return</span><br><span class="line"> * @throws DAOException</span><br><span class="line"> */</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">private CustsaleVO[] getCustSale(String[] saleOrgPks, String pk_customer) throws DAOException &#123;</span><br><span class="line">StringBuffer buf = new StringBuffer();</span><br><span class="line">buf.append(&quot; select * from bd_custsale where 1=1 and ( &quot;);</span><br><span class="line">for (int i = 0; i &lt; saleOrgPks.length; i++) &#123;</span><br><span class="line">buf.append(&quot;pk_org = &#x27;&quot;).append(saleOrgPks[i]).append(&quot;&#x27;&quot;);</span><br><span class="line">if (i != saleOrgPks.length - 1) &#123;</span><br><span class="line">buf.append(&quot; or &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buf.append(&quot; ) &quot;).append(&quot; and pk_customer = &#x27;&quot;).append(pk_customer).append(&quot;&#x27; &quot;);</span><br><span class="line">List&lt;CustFinanceVO&gt; finlist = (List&lt;CustFinanceVO&gt;) getDAO().executeQuery(buf.toString(),</span><br><span class="line">new BeanListProcessor(CustsaleVO.class));</span><br><span class="line">return finlist.toArray(new CustsaleVO[0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加银行账户"><a href="#增加银行账户" class="headerlink" title="增加银行账户"></a>增加银行账户</h2><p><img src="/2024/06/28/240628/%E5%AE%A2%E6%88%B7%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240628094621914.png" alt="image-20240628094621914"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCustomerBankacc</span><span class="params">(String pk_customer, JSONObject pk_bankaccbas)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (pk_bankaccbas == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增--&gt;新增银行账户信息&quot;</span> + pk_bankaccbas.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">checkAccnumRepeat(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line"><span class="type">CustomerVO</span> <span class="variable">customerVO</span> <span class="operator">=</span> (CustomerVO) getDAO().retrieveByPK(CustomerVO.class, pk_customer);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustBankaccUnionVO</span>();</span><br><span class="line"><span class="comment">// 主户</span></span><br><span class="line"><span class="type">BankAccbasVO</span> <span class="variable">accBasInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccbasVO</span>();</span><br><span class="line">accBasInfo.setAccclass(<span class="number">1</span>);</span><br><span class="line">accBasInfo.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">accBasInfo.setAccopendate(<span class="keyword">new</span> <span class="title class_">UFDate</span>());</span><br><span class="line">accBasInfo.setAccountproperty(Integer.valueOf(pk_bankaccbas.getString(<span class="string">&quot;accountproperty&quot;</span>)));</span><br><span class="line">accBasInfo.setAccstate(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setStatus(<span class="number">2</span>);</span><br><span class="line">accBasInfo.setName(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setPk_group(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_bankdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getBankdocPkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_bankdoc&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_bankdoc)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;开户银行翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_bankdoc(pk_bankdoc);</span><br><span class="line"><span class="comment">// 根据开户银行带出开户银行类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_banktype</span> <span class="operator">=</span> CommonDataQueryUtil.getBanktypePkByCode(pk_bankdoc);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译开户银行类型失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_banktype(pk_banktype);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_netbankinftp</span> <span class="operator">=</span> CommonDataQueryUtil.getNetbankinftpByBankType(pk_banktype);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译网银信息模板失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_netbankinftp(pk_netbankinftp);</span><br><span class="line"><span class="comment">// 子户</span></span><br><span class="line"><span class="type">BankAccSubVO</span> <span class="variable">bankAccSubVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>();</span><br><span class="line">accBasInfo.setBankaccsub(<span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>[] &#123; bankAccSubVO &#125;);</span><br><span class="line">bankAccSubVO.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">bankAccSubVO.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">bankAccSubVO.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setFronzenstate(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setIsdefault(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(pk_bankaccbas.getString(<span class="string">&quot;isdefault&quot;</span>)));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_currtype&quot;</span>));</span><br><span class="line">bankAccSubVO.setPk_currtype(pk_currtype);</span><br><span class="line">bankAccSubVO.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 客商</span></span><br><span class="line"><span class="type">CustbankVO</span> <span class="variable">custbankVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustbankVO</span>();</span><br><span class="line">custbankVO.setAccclass(<span class="number">1</span>);</span><br><span class="line">custbankVO.setPk_cust(customerVO.getPk_customer());</span><br><span class="line"><span class="comment">// 插入银行账户</span></span><br><span class="line">insertVO.setCustbankVO(custbankVO);</span><br><span class="line">insertVO.setBankaccbasVO(accBasInfo);</span><br><span class="line"><span class="type">ICustBankaccService</span> <span class="variable">custBankAccService</span> <span class="operator">=</span> (ICustBankaccService) NCLocator.getInstance()</span><br><span class="line">.lookup(ICustBankaccService.class);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertCustBankacc</span> <span class="operator">=</span> custBankAccService.insertCustBankacc(insertVO);</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增--&gt;准备启用银行账户 ~~~&quot;</span> + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// 启用银行账户</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; update bd_bankaccbas set ENABLESTATE = &#x27;2&#x27; , ENABLEUSER = &#x27;&quot;</span></span><br><span class="line">+ InvocationInfoProxy.getInstance().getUserId() + <span class="string">&quot;&#x27; where PK_BANKACCBAS = &#x27;&quot;</span></span><br><span class="line">+ insertCustBankacc.getPk_bankaccbas() + <span class="string">&quot;&#x27; and DR = &#x27;0&#x27; &quot;</span>;</span><br><span class="line">getDAO().executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>增加银行账户的代码基本上是通用的，客户，供应商档案。</li><li>停启用，因为有  启用人和维护人不能一致的问题，使用sql更新停启用状态。</li></ul><h3 id="校验银行账户是否已存在"><a href="#校验银行账户是否已存在" class="headerlink" title="校验银行账户是否已存在"></a>校验银行账户是否已存在</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 校验银行账号是否重复</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAccnumRepeat</span><span class="params">(String accnum)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_bankaccbas from bd_bankaccbas where accnum = &#x27;&quot;</span>).append(accnum)</span><br><span class="line">.append(<span class="string">&quot;&#x27; and dr = &#x27;0&#x27; and accclass = &#x27;1&#x27; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line"><span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;传入的银行账号accnum[&quot;</span> + accnum + <span class="string">&quot;]在档案中已存在不允许重复添加！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除客户"><a href="#删除客户" class="headerlink" title="删除客户"></a>删除客户</h2><ul><li>因为许多动作都在一个接口里触发，无法保证事务，只能在处理失败的时候，删除客户</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 报错后删除客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDeleteCustomer</span><span class="params">(String pk_customer)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">CustomerVO</span> <span class="variable">deletevo</span> <span class="operator">=</span> (CustomerVO) getDAO().retrieveByPK(CustomerVO.class, pk_customer);</span><br><span class="line">NCLocator.getInstance().lookup(ICustBaseInfoService.class).deleteCustomerVO(deletevo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部分翻译的方法"><a href="#部分翻译的方法" class="headerlink" title="部分翻译的方法"></a>部分翻译的方法</h2><h3 id="翻译国家-x2F-地区-pk-country"><a href="#翻译国家-x2F-地区-pk-country" class="headerlink" title="翻译国家&#x2F;地区  pk_country"></a>翻译国家&#x2F;地区  pk_country</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 翻译countryzone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCountrypkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">CountryZoneVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(CountryZoneVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;pk_country&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_currtype&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">CountryZoneVO[] qryVos = (CountryZoneVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_country();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译时区-pk-timezone"><a href="#翻译时区-pk-timezone" class="headerlink" title="翻译时区 pk_timezone"></a>翻译时区 pk_timezone</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据编码翻译时区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimezonepkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">TimezoneVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(TimezoneVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_timezone&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">TimezoneVO[] qryVos = (TimezoneVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_timezone();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译数据格式-pk-formatdoc"><a href="#翻译数据格式-pk-formatdoc" class="headerlink" title="翻译数据格式 pk_formatdoc"></a>翻译数据格式 pk_formatdoc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据编码翻译数据格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFormatPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">FormatDocVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(FormatDocVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_formatdoc&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">FormatDocVO[] qryVos = (FormatDocVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_formatdoc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="翻译客户分类-pk-custclass"><a href="#翻译客户分类-pk-custclass" class="headerlink" title="翻译客户分类 pk_custclass"></a>翻译客户分类 pk_custclass</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCustClassPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">CustClassVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(CustClassVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_custclass&quot;</span>, <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;enablestate&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">CustClassVO[] qryVos = (CustClassVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_custclass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译自定义档案"><a href="#翻译自定义档案" class="headerlink" title="翻译自定义档案"></a>翻译自定义档案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDefdocPkByCode</span><span class="params">(String code, String listcode)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(listcode) || StringUtils.isBlank(code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译自定义档案失败: 传入的code/defdocListCode为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">docList</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.DEFDOCLIST)</span><br><span class="line">.getDocByCode(<span class="string">&quot;GLOBLE00000000000000&quot;</span>, listcode);</span><br><span class="line"><span class="keyword">if</span> (docList == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">defdoc</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(docList.getPk())</span><br><span class="line">.getDocByCode(InvocationInfoProxy.getInstance().getGroupId(), code);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defdoc == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> defdoc.getPk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译品牌档案"><a href="#翻译品牌档案" class="headerlink" title="翻译品牌档案"></a>翻译品牌档案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBranddocPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">defdoc</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.BRANDDOC)</span><br><span class="line">.getDocByCode(InvocationInfoProxy.getInstance().getGroupId(), code);</span><br><span class="line"><span class="keyword">if</span> (defdoc != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> defdoc.getPk();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译收款协议"><a href="#翻译收款协议" class="headerlink" title="翻译收款协议"></a>翻译收款协议</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 翻译收款协议</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_payterm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getIncomePkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">defdoc</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.INCOME).getDocByCode(InvocationInfoProxy.getInstance().getGroupId(), code);</span><br><span class="line"><span class="keyword">if</span> (defdoc != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> defdoc.getPk();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译币种"><a href="#翻译币种" class="headerlink" title="翻译币种"></a>翻译币种</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCurrtypePkByCode</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译币种失败: 传入的编码为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">currvo</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.CURRTYPE)</span><br><span class="line">.getDocByCode(<span class="string">&quot;GLOBLE00000000000000&quot;</span>, code);</span><br><span class="line"><span class="keyword">if</span> (currvo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> currvo.getPk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译部门"><a href="#翻译部门" class="headerlink" title="翻译部门"></a>翻译部门</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDeptPkByCode</span><span class="params">(String deptCode, String pk_org)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(deptCode)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;获取部门VO失败: 传入的deptCode为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">DeptVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(DeptVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;pk_dept&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;def1&quot;</span>, <span class="string">&quot;pk_org&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String[]&gt;();</span><br><span class="line">List&lt;String&gt; paramsValue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(deptCode)) &#123;</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;pk_org&quot;</span>);</span><br><span class="line">paramsValue.add(deptCode);</span><br><span class="line">paramsValue.add(pk_org);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">valueList.add(paramsValue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">DeptVO[] qryVos = (DeptVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res.getPk_dept();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译人员"><a href="#翻译人员" class="headerlink" title="翻译人员"></a>翻译人员</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 翻译人员</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPsndocPkBycode</span><span class="params">(String code, String pk_org)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">IBDData</span> <span class="variable">defdoc</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.PSNDOC).getDocByCode(pk_org, code);</span><br><span class="line"><span class="keyword">if</span> (defdoc != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> defdoc.getPk();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译-业务单元-x2F-财务组织"><a href="#翻译-业务单元-x2F-财务组织" class="headerlink" title="翻译  业务单元&#x2F;财务组织"></a>翻译  业务单元&#x2F;财务组织</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 根据编码翻译组织/业务单元</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOrgPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">OrgVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(OrgVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;pk_org&quot;</span>, <span class="string">&quot;name&quot;</span>,<span class="string">&quot;enablestate&quot;</span>,<span class="string">&quot;islastversion&quot;</span>,<span class="string">&quot;isbusinessunit&quot;</span> &#125;); <span class="comment">// true 代表不走缓存，强制查询</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String[]&gt;();</span><br><span class="line">List&lt;String&gt; paramsValue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(code)) &#123;</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;dr&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;islastversion&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;isbusinessunit&quot;</span>);</span><br><span class="line">paramsValue.add(code);</span><br><span class="line">paramsValue.add(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">paramsValue.add(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">paramsValue.add(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">valueList.add(paramsValue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">OrgVO[] qryVos = (OrgVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_org();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾：附赠源代码"><a href="#结尾：附赠源代码" class="headerlink" title="结尾：附赠源代码"></a>结尾：附赠源代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nccloud.openapi.hfmp.doc.customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Consumes;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.POST;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONString;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> nc.bs.dao.BaseDAO;</span><br><span class="line"><span class="keyword">import</span> nc.bs.dao.DAOException;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.InvocationInfoProxy;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.NCLocator;</span><br><span class="line"><span class="keyword">import</span> nc.bs.plm.uapbd.utils.CommonDataQueryUtil;</span><br><span class="line"><span class="keyword">import</span> nc.bs.shcm.utils.LogWriteUtil;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.bankacc.cust.ICustBankaccService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.cust.assign.ICustAssignService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.cust.baseinfo.ICustBaseInfoQueryService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.cust.baseinfo.ICustBaseInfoService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.cust.finance.ICustFinanceService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.cust.sale.ICustSaleService;</span><br><span class="line"><span class="keyword">import</span> nc.jdbc.framework.processor.BeanListProcessor;</span><br><span class="line"><span class="keyword">import</span> nc.jdbc.framework.processor.ColumnListProcessor;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bankaccount.BankAccSubVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bankaccount.BankAccbasVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bankaccount.cust.CustBankaccUnionVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.cust.CustbankVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.cust.CustomerVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.cust.finance.CustFinanceVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.cust.saleinfo.CustsaleVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.BusinessException;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFBoolean;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFDate;</span><br><span class="line"><span class="keyword">import</span> nccloud.api.rest.utils.NCCRestUtils;</span><br><span class="line"><span class="keyword">import</span> nccloud.api.rest.utils.ResultMessageUtil;</span><br><span class="line"><span class="keyword">import</span> nccloud.impl.pu.m23.edit.bodyafter.Customer;</span><br><span class="line"><span class="keyword">import</span> nccloud.pubitf.baseapp.apprbac.IAppAndOrgPermQueryPubService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Path(&quot;shcm/customer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShcmCustomerInfoResources</span> <span class="keyword">extends</span> <span class="title class_">CustomerInfoResources</span> &#123;</span><br><span class="line"><span class="keyword">private</span> BaseDAO dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BaseDAO <span class="title function_">getDAO</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dao == <span class="literal">null</span>) &#123;</span><br><span class="line">dao = <span class="keyword">new</span> <span class="title class_">BaseDAO</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path(&quot;oa/add&quot;)</span></span><br><span class="line"><span class="meta">@Consumes(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Produces(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> JSONString <span class="title function_">addCustomer</span><span class="params">(JSONString json)</span> &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;进入客户新增接口......&quot;</span> + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;组装前报文&quot;</span> + json + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">JSONString</span> <span class="variable">addCustomer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">returnjson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jobj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_custsale</span> <span class="operator">=</span> (JSONObject) jobj.remove(<span class="string">&quot;pk_custsale&quot;</span>);<span class="comment">// 销售信息</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_custfinance</span> <span class="operator">=</span> (JSONObject) jobj.remove(<span class="string">&quot;pk_custfinance&quot;</span>);<span class="comment">// 财务信息</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_bankaccbas</span> <span class="operator">=</span> (JSONObject) jobj.remove(<span class="string">&quot;pk_bankaccbas&quot;</span>);<span class="comment">// 账户信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> handleData(NCCRestUtils.toJSONString(jobj));</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;组装后报文&quot;</span> + json2 + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">addCustomer = <span class="built_in">super</span>.addCustomer(json2);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> JSON.parseObject(addCustomer.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> result.getJSONObject(<span class="string">&quot;data&quot;</span>).getJSONObject(<span class="string">&quot;ufinterface&quot;</span>);</span><br><span class="line">returnjson = ufinterface.getJSONArray(<span class="string">&quot;sendresult&quot;</span>).getJSONObject(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;N&quot;</span>.equals(ufinterface.getString(<span class="string">&quot;successful&quot;</span>))) &#123;</span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增接口报错信息&quot;</span> + returnjson.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(returnjson.toString()));</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line">autoAssignOrg();</span><br><span class="line">num = <span class="number">2</span>;</span><br><span class="line">editCustomerAfterInsert(returnjson.getString(<span class="string">&quot;content&quot;</span>), pk_custsale, pk_custfinance);</span><br><span class="line">num = <span class="number">3</span>;</span><br><span class="line">addCustomerBankacc(returnjson.getString(<span class="string">&quot;content&quot;</span>), pk_bankaccbas);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增接口报错.......&quot;</span> + e.getMessage() + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">handleDeleteCustomer(returnjson.getString(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (BusinessException e1) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil</span><br><span class="line">.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;客户新增失败....报错信息：&quot;</span> + e.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;客户新增失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;客户新增成功，自动分配失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;修改采购信息/财务信息失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;新增客户银行账户失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.toJSON(returnjson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 报错后删除客户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDeleteCustomer</span><span class="params">(String pk_customer)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">CustomerVO</span> <span class="variable">deletevo</span> <span class="operator">=</span> (CustomerVO) getDAO().retrieveByPK(CustomerVO.class, pk_customer);</span><br><span class="line">NCLocator.getInstance().lookup(ICustBaseInfoService.class).deleteCustomerVO(deletevo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addCustomerBankacc</span><span class="params">(String pk_customer, JSONObject pk_bankaccbas)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (pk_bankaccbas == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增--&gt;新增银行账户信息&quot;</span> + pk_bankaccbas.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">checkAccnumRepeat(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line"><span class="type">CustomerVO</span> <span class="variable">customerVO</span> <span class="operator">=</span> (CustomerVO) getDAO().retrieveByPK(CustomerVO.class, pk_customer);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustBankaccUnionVO</span>();</span><br><span class="line"><span class="comment">// 主户</span></span><br><span class="line"><span class="type">BankAccbasVO</span> <span class="variable">accBasInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccbasVO</span>();</span><br><span class="line">accBasInfo.setAccclass(<span class="number">1</span>);</span><br><span class="line">accBasInfo.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">accBasInfo.setAccopendate(<span class="keyword">new</span> <span class="title class_">UFDate</span>());</span><br><span class="line">accBasInfo.setAccountproperty(Integer.valueOf(pk_bankaccbas.getString(<span class="string">&quot;accountproperty&quot;</span>)));</span><br><span class="line">accBasInfo.setAccstate(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setStatus(<span class="number">2</span>);</span><br><span class="line">accBasInfo.setName(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setPk_group(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_bankdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getBankdocPkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_bankdoc&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_bankdoc)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;开户银行翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_bankdoc(pk_bankdoc);</span><br><span class="line"><span class="comment">// 根据开户银行带出开户银行类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_banktype</span> <span class="operator">=</span> CommonDataQueryUtil.getBanktypePkByCode(pk_bankdoc);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译开户银行类型失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_banktype(pk_banktype);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_netbankinftp</span> <span class="operator">=</span> CommonDataQueryUtil.getNetbankinftpByBankType(pk_banktype);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译网银信息模板失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_netbankinftp(pk_netbankinftp);</span><br><span class="line"><span class="comment">// 子户</span></span><br><span class="line"><span class="type">BankAccSubVO</span> <span class="variable">bankAccSubVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>();</span><br><span class="line">accBasInfo.setBankaccsub(<span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>[] &#123; bankAccSubVO &#125;);</span><br><span class="line">bankAccSubVO.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">bankAccSubVO.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">bankAccSubVO.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setFronzenstate(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setIsdefault(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(pk_bankaccbas.getString(<span class="string">&quot;isdefault&quot;</span>)));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_currtype&quot;</span>));</span><br><span class="line">bankAccSubVO.setPk_currtype(pk_currtype);</span><br><span class="line">bankAccSubVO.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 客商</span></span><br><span class="line"><span class="type">CustbankVO</span> <span class="variable">custbankVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustbankVO</span>();</span><br><span class="line">custbankVO.setAccclass(<span class="number">1</span>);</span><br><span class="line">custbankVO.setPk_cust(customerVO.getPk_customer());</span><br><span class="line"><span class="comment">// 插入银行账户</span></span><br><span class="line">insertVO.setCustbankVO(custbankVO);</span><br><span class="line">insertVO.setBankaccbasVO(accBasInfo);</span><br><span class="line"><span class="type">ICustBankaccService</span> <span class="variable">custBankAccService</span> <span class="operator">=</span> (ICustBankaccService) NCLocator.getInstance()</span><br><span class="line">.lookup(ICustBankaccService.class);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertCustBankacc</span> <span class="operator">=</span> custBankAccService.insertCustBankacc(insertVO);</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增--&gt;准备启用银行账户 ~~~&quot;</span> + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// 启用银行账户</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; update bd_bankaccbas set ENABLESTATE = &#x27;2&#x27; , ENABLEUSER = &#x27;&quot;</span></span><br><span class="line">+ InvocationInfoProxy.getInstance().getUserId() + <span class="string">&quot;&#x27; where PK_BANKACCBAS = &#x27;&quot;</span></span><br><span class="line">+ insertCustBankacc.getPk_bankaccbas() + <span class="string">&quot;&#x27; and DR = &#x27;0&#x27; &quot;</span>;</span><br><span class="line">getDAO().executeUpdate(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 查询客商财务组织</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> financeOrgPk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> DAOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> CustFinanceVO[] getCustFinance(String[] financeOrgPk, String pk_customer) <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select * from bd_custfinance where 1=1 and ( &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; financeOrgPk.length; i++) &#123;</span><br><span class="line">buf.append(<span class="string">&quot;pk_org = &#x27;&quot;</span>).append(financeOrgPk[i]).append(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i != financeOrgPk.length - <span class="number">1</span>) &#123;</span><br><span class="line">buf.append(<span class="string">&quot; or &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buf.append(<span class="string">&quot; ) &quot;</span>).append(<span class="string">&quot; and pk_customer = &#x27;&quot;</span>).append(pk_customer).append(<span class="string">&quot;&#x27; &quot;</span>);</span><br><span class="line">List&lt;CustFinanceVO&gt; finlist = (List&lt;CustFinanceVO&gt;) getDAO().executeQuery(buf.toString(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BeanListProcessor</span>(CustFinanceVO.class));</span><br><span class="line"><span class="keyword">return</span> finlist.toArray(<span class="keyword">new</span> <span class="title class_">CustFinanceVO</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">editCustomerAfterInsert</span><span class="params">(String pk_customer, JSONObject pk_custsale, JSONObject pk_custfinance)</span></span><br><span class="line"><span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">IAppAndOrgPermQueryPubService</span> <span class="variable">userPermSvc</span> <span class="operator">=</span> (IAppAndOrgPermQueryPubService) NCLocator.getInstance()</span><br><span class="line">.lookup(IAppAndOrgPermQueryPubService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 财务信息</span></span><br><span class="line"><span class="keyword">if</span> (pk_custfinance != <span class="literal">null</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增接口--&gt;修改财务信息--&gt;&quot;</span> + pk_custfinance.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">String[] financeOrgPk = userPermSvc.queryUserPermOrgPksByAppAndWithOrgTypesFilter(</span><br><span class="line">CommonDataQueryUtil.getUseridByCode(<span class="string">&quot;OA&quot;</span>), <span class="string">&quot;10140CUG&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;FINANCEORGTYPE000000&quot;</span> &#125;,</span><br><span class="line">InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="type">ICustFinanceService</span> <span class="variable">saveFinSer</span> <span class="operator">=</span> NCLocator.getInstance().lookup(ICustFinanceService.class);</span><br><span class="line">CustFinanceVO[] custFinanceVos = getCustFinance(financeOrgPk, pk_customer);</span><br><span class="line"><span class="keyword">if</span> (custFinanceVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (CustFinanceVO finvo : custFinanceVos) &#123;</span><br><span class="line">finvo.setStatus(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_org</span> <span class="operator">=</span> CommonDataQueryUtil.getOrgPkByCode(pk_custfinance.getString(<span class="string">&quot;pk_org&quot;</span>));</span><br><span class="line"><span class="comment">// 收款协议</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_income</span> <span class="operator">=</span> CommonDataQueryUtil.getIncomePkByCode(pk_custfinance.getString(<span class="string">&quot;pk_payterm&quot;</span>));</span><br><span class="line">finvo.setPk_payterm(pk_income);</span><br><span class="line"><span class="comment">// 币种</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil</span><br><span class="line">.getCurrtypePkByCode(pk_custfinance.getString(<span class="string">&quot;pk_currtype1&quot;</span>));</span><br><span class="line">finvo.setPk_currtype1(pk_currtype);</span><br><span class="line"><span class="comment">// 营业部门</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_dept</span> <span class="operator">=</span> CommonDataQueryUtil.getDeptPkByCode(pk_custfinance.getString(<span class="string">&quot;pk_respdept1&quot;</span>),</span><br><span class="line">pk_org);</span><br><span class="line">finvo.setPk_respdept1(pk_dept);</span><br><span class="line"><span class="comment">// 业务员</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_psndoc</span> <span class="operator">=</span> CommonDataQueryUtil.getPsndocPkBycode(pk_custfinance.getString(<span class="string">&quot;pk_resppsn1&quot;</span>),</span><br><span class="line">pk_org);</span><br><span class="line">finvo.setPk_resppsn1(pk_psndoc);</span><br><span class="line">saveFinSer.updateCustFinance(finvo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销售信息</span></span><br><span class="line"><span class="keyword">if</span> (pk_custsale != <span class="literal">null</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;CustomerAdd&quot;</span>, <span class="string">&quot;客户新增接口--&gt;修改销售信息--&gt;&quot;</span> + pk_custsale.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">String[] saleOrgPks = userPermSvc.queryUserPermOrgPksByAppAndWithOrgTypesFilter(</span><br><span class="line">CommonDataQueryUtil.getUseridByCode(<span class="string">&quot;OA&quot;</span>), <span class="string">&quot;10140CUG&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;SALEORGTYPE000000000&quot;</span> &#125;,</span><br><span class="line">InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="type">ICustSaleService</span> <span class="variable">saveSaleSer</span> <span class="operator">=</span> NCLocator.getInstance().lookup(ICustSaleService.class);</span><br><span class="line">CustsaleVO[] custSaleVOs = getCustSale(saleOrgPks, pk_customer);</span><br><span class="line"><span class="keyword">if</span> (custSaleVOs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (CustsaleVO csalevo : custSaleVOs) &#123;</span><br><span class="line">csalevo.setStatus(<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_org</span> <span class="operator">=</span> CommonDataQueryUtil.getOrgPkByCode(pk_custsale.getString(<span class="string">&quot;pk_org&quot;</span>));</span><br><span class="line"><span class="comment">// 收款协议</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_income</span> <span class="operator">=</span> CommonDataQueryUtil.getIncomePkByCode(pk_custsale.getString(<span class="string">&quot;paytermdefault&quot;</span>));</span><br><span class="line">csalevo.setPaytermdefault(pk_income);</span><br><span class="line"><span class="comment">// 币种</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil</span><br><span class="line">.getCurrtypePkByCode(pk_custsale.getString(<span class="string">&quot;currencydefault&quot;</span>));</span><br><span class="line">csalevo.setCurrencydefault(pk_currtype);</span><br><span class="line"><span class="comment">// 部门</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_dept</span> <span class="operator">=</span> CommonDataQueryUtil.getDeptPkByCode(pk_custsale.getString(<span class="string">&quot;respdept&quot;</span>), pk_org);</span><br><span class="line">csalevo.setRespdept(pk_dept);</span><br><span class="line"><span class="comment">// 人员</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_psndoc</span> <span class="operator">=</span> CommonDataQueryUtil.getPsndocPkBycode(pk_custsale.getString(<span class="string">&quot;respperson&quot;</span>),</span><br><span class="line">pk_org);</span><br><span class="line">csalevo.setRespperson(pk_psndoc);</span><br><span class="line">saveSaleSer.updateCustSaleVO(csalevo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 获取销售信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> saleOrgPks</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_customer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> DAOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> CustsaleVO[] getCustSale(String[] saleOrgPks, String pk_customer) <span class="keyword">throws</span> DAOException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select * from bd_custsale where 1=1 and ( &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; saleOrgPks.length; i++) &#123;</span><br><span class="line">buf.append(<span class="string">&quot;pk_org = &#x27;&quot;</span>).append(saleOrgPks[i]).append(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i != saleOrgPks.length - <span class="number">1</span>) &#123;</span><br><span class="line">buf.append(<span class="string">&quot; or &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buf.append(<span class="string">&quot; ) &quot;</span>).append(<span class="string">&quot; and pk_customer = &#x27;&quot;</span>).append(pk_customer).append(<span class="string">&quot;&#x27; &quot;</span>);</span><br><span class="line">List&lt;CustFinanceVO&gt; finlist = (List&lt;CustFinanceVO&gt;) getDAO().executeQuery(buf.toString(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BeanListProcessor</span>(CustsaleVO.class));</span><br><span class="line"><span class="keyword">return</span> finlist.toArray(<span class="keyword">new</span> <span class="title class_">CustsaleVO</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 处理报文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> json</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JSONString <span class="title function_">handleData</span><span class="params">(JSONString json)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonobj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">object.put(<span class="string">&quot;ufinterface&quot;</span>, ufinterface);</span><br><span class="line">ufinterface.put(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;billtype&quot;</span>, <span class="string">&quot;customer&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;groupcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;isexchange&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;replace&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;roottag&quot;</span>, <span class="string">&quot;bill&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;sender&quot;</span>, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;orgcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">bill</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">ufinterface.put(<span class="string">&quot;bill&quot;</span>, bill);</span><br><span class="line">bill.put(<span class="string">&quot;billhead&quot;</span>, jsonobj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组织和集团默认集团集</span></span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_group&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_org&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;enablestate&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">jsonobj.put(<span class="string">&quot;custstate&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译pk_country</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_country</span> <span class="operator">=</span> CommonDataQueryUtil.getCountrypkByCode(<span class="string">&quot;CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_country&quot;</span>, pk_country);</span><br><span class="line"><span class="comment">// 翻译时区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_timezone</span> <span class="operator">=</span> CommonDataQueryUtil.getTimezonepkByCode(<span class="string">&quot;P0800&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_timezone&quot;</span>, pk_timezone);</span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_formatdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getFormatPkByCode(<span class="string">&quot;ZH-CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_format&quot;</span>, pk_formatdoc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译 custclass</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_custclass</span> <span class="operator">=</span> CommonDataQueryUtil.getCustClassPkByCode(jsonobj.getString(<span class="string">&quot;pk_custclass&quot;</span>));</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_custclass&quot;</span>, pk_custclass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// def2 客户档案</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def2</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def2&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def2)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def2</span> <span class="operator">=</span> CommonDataQueryUtil.getCustomerPkByCode(def2);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def2)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;所属集团def2翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def2&quot;</span>, pk_def2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// def3 业务线-财务辅助核算（自定义档案）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def3</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def3&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def3)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def3</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def3, <span class="string">&quot;1010&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def3)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;业务线def3翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def3&quot;</span>, pk_def3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// def4 渠道-财务辅助核算（自定义档案）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def4</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def4&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def4)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def4</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def4, <span class="string">&quot;1011&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def4)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;渠道def4翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def4&quot;</span>, pk_def4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// def5 分销类型（自定义档案）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def5</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def5&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def5)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def5</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def5, <span class="string">&quot;1012&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def5)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;分销类型def5翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def5&quot;</span>, pk_def5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// def6 销售模式（自定义档案）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def6</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def6&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def6)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def6</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def6, <span class="string">&quot;1013&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def6)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;销售模式def6翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def6&quot;</span>, pk_def6);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// def7 销售区域（自定义档案）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def7</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def7&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def7)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def7</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def7, <span class="string">&quot;1014&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def7)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;销售区域def7翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def7&quot;</span>, pk_def7);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// def9 品牌档案</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def9</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def9&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(def9)) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def9</span> <span class="operator">=</span> CommonDataQueryUtil.getBranddocPkByCode(def9);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def9)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;品牌档案def9翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def9&quot;</span>, pk_def9);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> NCCRestUtils.toJSONString(object);</span><br><span class="line"><span class="keyword">return</span> json2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 自动分配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">autoAssignOrg</span><span class="params">()</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">ICustAssignService</span> <span class="variable">service</span> <span class="operator">=</span> NCLocator.getInstance().lookup(ICustAssignService.class);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(</span><br><span class="line"><span class="string">&quot; select pk_org from org_orgs where dr = 0 and ENABLESTATE = 2  and ISBUSINESSUNIT = &#x27;Y&#x27; and ISLASTVERSION = &#x27;Y&#x27;  &quot;</span>);</span><br><span class="line">List&lt;String&gt; resList = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line">service.assignCustomerByPks(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>], resList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; InvocationInfoProxy.getInstance().getGroupId() &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 校验银行账号是否重复</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAccnumRepeat</span><span class="params">(String accnum)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_bankaccbas from bd_bankaccbas where accnum = &#x27;&quot;</span>).append(accnum)</span><br><span class="line">.append(<span class="string">&quot;&#x27; and dr = &#x27;0&#x27; and accclass = &#x27;1&#x27; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line"><span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;传入的银行账号accnum[&quot;</span> + accnum + <span class="string">&quot;]在档案中已存在不允许重复添加！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>供应商档案新增接口</title>
      <link href="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="供应商档案新增接口"><a href="#供应商档案新增接口" class="headerlink" title="供应商档案新增接口"></a>供应商档案新增接口</h1><ul><li>首先声明，这是BIP版本，ncc版本也可以用，nc系列不行！</li></ul><h2 id="OPENAPI接口"><a href="#OPENAPI接口" class="headerlink" title="OPENAPI接口"></a>OPENAPI接口</h2><ul><li>nccloud.api.uapbd.suppliermanage.supplier.SuppliermanageResources    这个类就是！</li><li>我们通常有两种方式<ul><li>写Servlet，在里面处理报文，调用openapi。</li><li>写一个自己的Resources类，继承 SuppliermanageResources （我用的这个方式！）</li></ul></li></ul><h3 id="如何写一个openapi"><a href="#如何写一个openapi" class="headerlink" title="如何写一个openapi"></a>如何写一个openapi</h3><p><strong>1. Resources类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己定义了一个resources类，继承了原生 resourecs</span></span><br><span class="line"><span class="meta">@Path(&quot;shcm/supplier&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShcmSupplierInfoResources</span> <span class="keyword">extends</span> <span class="title class_">SupplierInfoResources</span> &#123;</span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path(&quot;oa/add&quot;)</span></span><br><span class="line"><span class="meta">@Consumes(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Produces(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> JSONString <span class="title function_">addSupplier</span><span class="params">(JSONString json)</span> &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">returnjson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">addSupplier = <span class="built_in">super</span>.addSupplier(json2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. .rest文件</strong></p><ul><li>文件存放路径  home\modules\模块名字\META-INF</li></ul><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627205305162.png" alt="image-20240627205305162"></p><ul><li>文件内容  <strong>注意 新增一个.rest文件，放到home里之后，要重新部署。</strong></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=&#x27;gb2312&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span> <span class="attr">classname</span>=<span class="string">&quot;nccloud.openapi.hfmp.doc.material.ShcmMaterialInfoResource&quot;</span> <span class="attr">exinfo</span>=<span class="string">&quot;CM物料接口&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span> <span class="attr">classname</span>=<span class="string">&quot;nccloud.openapi.hfmp.doc.bom.ShcmBomInfoResource&quot;</span> <span class="attr">exinfo</span>=<span class="string">&quot;CMBOM接口&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span> <span class="attr">classname</span>=<span class="string">&quot;nccloud.openapi.hfmp.doc.supplier.ShcmSupplierInfoResources&quot;</span>  <span class="attr">exinfo</span>=<span class="string">&quot;供应商档案新增&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span> <span class="attr">classname</span>=<span class="string">&quot;nccloud.openapi.hfmp.doc.customer.ShcmCustomerInfoResources&quot;</span>  <span class="attr">exinfo</span>=<span class="string">&quot;客户档案新增&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rest</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 前台注册Api &#x2F; 执行脚本注册 &#x2F;数据库直接插入</strong></p><ul><li><p>首先，sql脚本 （一般都是给生产环境出脚本，自己开发都是去前台配置）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> OPM_APIMANAGER (&quot;APIURI&quot;,&quot;CODE&quot;,&quot;CREATIONTIME&quot;,&quot;CREATOR&quot;,&quot;DESCRIBE&quot;,&quot;DOCPATH&quot;,&quot;DR&quot;,&quot;FK_PARENT&quot;,&quot;ISAPIDATA&quot;,&quot;MODIFIEDTIME&quot;,&quot;MODIFIER&quot;,&quot;MODULE_CODE&quot;,&quot;NAME&quot;,&quot;PK_API&quot;,&quot;PK_GROUP&quot;,&quot;PK_ORG&quot;,&quot;TS&quot;) <span class="keyword">VALUES</span> (<span class="string">&#x27;/nccloud/api/shcm/supplier/oa/add&#x27;</span>,<span class="string">&#x27;10140608&#x27;</span>,<span class="string">&#x27;2024-06-24 15:56:43&#x27;</span>,<span class="string">&#x27;0001E110000000000RDA&#x27;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>,<span class="string">&#x27;0001Z010000000008Q79&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;2024-06-24 15:57:17&#x27;</span>,<span class="string">&#x27;0001E110000000000RDA&#x27;</span>,<span class="string">&#x27;1014&#x27;</span>,<span class="string">&#x27;shcm新增一个供应商&#x27;</span>,<span class="string">&#x27;0001E1100000000456FK&#x27;</span>,<span class="string">&#x27;0001&#x27;</span>,<span class="string">&#x27;GLOBLE00000000000000&#x27;</span>,<span class="string">&#x27;2024-06-24 15:57:17&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>前台页面上新增一个openapi ，仿照着已有的写</p><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627210305770.png" alt="image-20240627210305770"></p></li><li><p>去数据库查看   <strong>OPM_APIMANAGER</strong> 这个表存放着api的路径信息</p><ul><li>在前台新增以后，可能会有bug在数据库里没有插入，所以前台新增完最好来数据库看一下。</li><li>还有就是也可以直接找一条Copy一下，直接在数据库插入，改一下 APIURL,CODE,NAME,PK值，这几个字段就可以。</li></ul></li></ul><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627210653891.png" alt="image-20240627210653891"></p><p><strong>4. 注册完OPENAPI之后，要找到对应的应用，去关联一下API</strong></p><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627210955590.png" alt="image-20240627210955590"></p><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627211103964.png" alt="image-20240627211103964"></p><ul><li>之后重启一下服务，使用openapi调用工具，就可以进入你的代码里了！</li></ul><h2 id="调用OPENAPI报文"><a href="#调用OPENAPI报文" class="headerlink" title="调用OPENAPI报文"></a>调用OPENAPI报文</h2><ul><li>注意这个是调用openapi需要的必需的字段，其中 suplinkman，corpaddress 这两个就算不需要也最好带着！</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;ufinterface&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;billtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;supplier&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;groupcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isexchange&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Y&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;roottag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bill&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orgcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bill&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;billhead&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pk_group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001E110000000001ABA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_org&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0001E110000000001ABA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;test0604&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;0624测试供应商1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_supplierclass&quot;</span><span class="punctuation">:</span><span class="string">&quot;1001E110000000002W9I&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_country&quot;</span><span class="punctuation">:</span><span class="string">&quot;0001Z010000000079UJJ&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;taxpayerid&quot;</span><span class="punctuation">:</span><span class="string">&quot;test0604&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_timezone&quot;</span><span class="punctuation">:</span><span class="string">&quot;0001Z010000000079U2P&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pk_format&quot;</span><span class="punctuation">:</span><span class="string">&quot;FMT0Z000000000000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enablestate&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;supprop&quot;</span><span class="punctuation">:</span><span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suplinkman&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;corpaddress&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="处理报文的方法"><a href="#处理报文的方法" class="headerlink" title="处理报文的方法"></a>处理报文的方法</h3><ul><li>这个报文看起来有些复杂，其中很多地方都可以给默认值，于是我们写个方法拼装报文结构。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JSONString <span class="title function_">handleData</span><span class="params">(JSONString json)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonobj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">object.put(<span class="string">&quot;ufinterface&quot;</span>, ufinterface);</span><br><span class="line">ufinterface.put(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;billtype&quot;</span>, <span class="string">&quot;supplier&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;groupcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;isexchange&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;replace&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;roottag&quot;</span>, <span class="string">&quot;bill&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;sender&quot;</span>, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;orgcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">bill</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">ufinterface.put(<span class="string">&quot;bill&quot;</span>, bill);</span><br><span class="line">bill.put(<span class="string">&quot;billhead&quot;</span>, jsonobj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jsonobj.getJSONObject(<span class="string">&quot;suplinkman&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">jsonobj.put(<span class="string">&quot;suplinkman&quot;</span>, <span class="keyword">new</span> <span class="title class_">JSONObject</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jsonobj.getJSONObject(<span class="string">&quot;corpaddress&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">jsonobj.put(<span class="string">&quot;corpaddress&quot;</span>, <span class="keyword">new</span> <span class="title class_">JSONObject</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组织和集团默认集团集</span></span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_group&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_org&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;enablestate&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">// 翻译pk_country</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_country</span> <span class="operator">=</span> CommonDataQueryUtil.getCountrypkByCode(<span class="string">&quot;CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_country&quot;</span>, pk_country);</span><br><span class="line"><span class="comment">// 翻译时区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_timezone</span> <span class="operator">=</span> CommonDataQueryUtil.getTimezonepkByCode(<span class="string">&quot;P0800&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_timezone&quot;</span>, pk_timezone);</span><br><span class="line"><span class="comment">// 数据格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_formatdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getFormatPkByCode(<span class="string">&quot;ZH-CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_format&quot;</span>, pk_formatdoc);</span><br><span class="line"><span class="comment">// 翻译 供应商基本分类</span></span><br><span class="line"><span class="type">String</span> <span class="variable">suclass</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;pk_supplierclass&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_supplierclass</span> <span class="operator">=</span> CommonDataQueryUtil.getSupplierClassPkByCode(suclass);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_supplierclass&quot;</span>, pk_supplierclass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这里，因为openapi需要的参数是 JSONString类型，这里要借助NCCRestUtils转换格式！</span></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> NCCRestUtils.toJSONString(object);</span><br><span class="line"><span class="keyword">return</span> json2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化后需要的报文"><a href="#优化后需要的报文" class="headerlink" title="优化后需要的报文"></a>优化后需要的报文</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;test0606&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;0624测试供应商1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pk_supplierclass&quot;</span><span class="punctuation">:</span><span class="string">&quot;01&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;taxpayerid&quot;</span><span class="punctuation">:</span><span class="string">&quot;test0606&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>简洁了许多！</li></ul><h2 id="自动分配组织"><a href="#自动分配组织" class="headerlink" title="自动分配组织"></a>自动分配组织</h2><ul><li>一般新增完供应商之后，还要连带着分配一下组织</li></ul><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627211426405.png" alt="image-20240627211426405"></p><ul><li>效果如下</li></ul><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627211546399.png" alt="image-20240627211546399"></p><h3 id="自动分配的方法"><a href="#自动分配的方法" class="headerlink" title="自动分配的方法"></a>自动分配的方法</h3><ul><li>使用sql查询出所有的 是业务单元的组织 ，调用方法分配即可！</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">autoAssignOrg</span><span class="params">()</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">ISupplierAssignService</span> <span class="variable">assignService</span> <span class="operator">=</span> (ISupplierAssignService) NCLocator.getInstance().lookup(ISupplierAssignService.class);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(</span><br><span class="line"><span class="string">&quot; select pk_org from org_orgs where dr = 0 and ENABLESTATE = 2  and ISBUSINESSUNIT = &#x27;Y&#x27; and ISLASTVERSION = &#x27;Y&#x27;  &quot;</span>);</span><br><span class="line">List&lt;String&gt; resList = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line">assignService.assignSupplierByPks(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>], resList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; InvocationInfoProxy.getInstance().getGroupId() &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改供应商联系人，国家税类，采购信息，财务信息"><a href="#修改供应商联系人，国家税类，采购信息，财务信息" class="headerlink" title="修改供应商联系人，国家税类，采购信息，财务信息"></a>修改供应商联系人，国家税类，采购信息，财务信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ISupplierBaseInfoQryService</span> <span class="variable">qryService</span> <span class="operator">=</span> (ISupplierBaseInfoQryService) NCLocator.getInstance()</span><br><span class="line">.lookup(ISupplierBaseInfoQryService.class);</span><br><span class="line"><span class="type">ISupplierBaseInfoService</span> <span class="variable">service</span> <span class="operator">=</span> (ISupplierBaseInfoService) NCLocator.getInstance()</span><br><span class="line">.lookup(ISupplierBaseInfoService.class);</span><br><span class="line"><span class="type">SupplierVO</span> <span class="variable">suppvo</span> <span class="operator">=</span> qryService.querySupplierVOByPk(pk_supplier);</span><br><span class="line"><span class="keyword">if</span> (suppvo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;供应商新增失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 联系人</span></span><br><span class="line"><span class="keyword">if</span> (pk_suplinkman != <span class="literal">null</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;新增联系人--&gt;&quot;</span> + pk_suplinkman.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">SupLinkmanVO</span> <span class="variable">linkman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SupLinkmanVO</span>();</span><br><span class="line"><span class="type">LinkmanVO</span> <span class="variable">linkmanVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkmanVO</span>();</span><br><span class="line">linkmanVO.setName(pk_suplinkman.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">linkmanVO.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_linkman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HYPubBO</span>().insert(linkmanVO);</span><br><span class="line">linkman.setStatus(<span class="number">2</span>);</span><br><span class="line">linkman.setPk_linkman(pk_linkman);</span><br><span class="line">linkman.setIsdefault(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(pk_suplinkman.getString(<span class="string">&quot;isdefault&quot;</span>)));</span><br><span class="line">suppvo.setSuplinkman(<span class="keyword">new</span> <span class="title class_">SupLinkmanVO</span>[] &#123; linkman &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 国家税类</span></span><br><span class="line"><span class="keyword">if</span> (pk_supcountrytaxes != <span class="literal">null</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;新增国家税类--&gt;&quot;</span> + pk_supcountrytaxes.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">SupCountryTaxesVO</span> <span class="variable">taxesvo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SupCountryTaxesVO</span>();</span><br><span class="line">taxesvo.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_country</span> <span class="operator">=</span> CommonDataQueryUtil.getCountrypkByCode(pk_supcountrytaxes.getString(<span class="string">&quot;pk_country&quot;</span>));</span><br><span class="line">taxesvo.setPk_country(pk_country);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_taxes</span> <span class="operator">=</span> CommonDataQueryUtil.getSuptaxesByCode(pk_supcountrytaxes.getString(<span class="string">&quot;pk_taxes&quot;</span>));</span><br><span class="line">taxesvo.setPk_taxes(pk_taxes);</span><br><span class="line">suppvo.setSupcountrytaxes(<span class="keyword">new</span> <span class="title class_">SupCountryTaxesVO</span>[] &#123; taxesvo &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">cuserid</span> <span class="operator">=</span> CommonDataQueryUtil.getUseridByCode(<span class="string">&quot;OA&quot;</span>);</span><br><span class="line">String[] orgIDs = ((IAppAndOrgPermQueryPubService) NCLocator.getInstance() <span class="comment">// 18</span></span><br><span class="line">.lookup(IAppAndOrgPermQueryPubService.class)).queryAllUserPermOrgPks(cuserid,</span><br><span class="line">InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="keyword">if</span> (pk_supstock != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 采购信息</span></span><br><span class="line">SupStockVO[] stockvos = ((ISupplierStockQryService) NCLocator.getInstance() <span class="comment">// 4</span></span><br><span class="line">.lookup(ISupplierStockQryService.class)).querySupStockVOsByOrgIDs(orgIDs, suppvo.getPk_supplier());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stockvos != <span class="literal">null</span> &amp;&amp; stockvos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;修改采购信息--&gt;&quot;</span> + pk_supstock.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_payment</span> <span class="operator">=</span> CommonDataQueryUtil.getPaytermByPkByCode(pk_supstock.getString(<span class="string">&quot;paytermdefault&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_supstock.getString(<span class="string">&quot;currencydefault&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (SupStockVO stockvo : stockvos) &#123;</span><br><span class="line">stockvo.setPaytermdefault(pk_payment);</span><br><span class="line">stockvo.setCurrencydefault(pk_currtype);</span><br><span class="line">stockvo.setStatus(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">suppvo.setSupstock(stockvos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pk_supfinance != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 财务信息</span></span><br><span class="line">SupFinanceVO[] financevos = ((ISupplierFinanceQryService) NCLocator.getInstance() <span class="comment">// 6</span></span><br><span class="line">.lookup(ISupplierFinanceQryService.class)).querySupFinanceVOsByOrgIDs(orgIDs,</span><br><span class="line">suppvo.getPk_supplier());</span><br><span class="line"><span class="keyword">if</span> (financevos != <span class="literal">null</span> &amp;&amp; financevos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;修改财务信息--&gt;&quot;</span> + pk_supfinance.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_payment2</span> <span class="operator">=</span> CommonDataQueryUtil.getPaytermByPkByCode(pk_supfinance.getString(<span class="string">&quot;pk_payterm&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype2</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_supfinance.getString(<span class="string">&quot;pk_currtype&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (SupFinanceVO fincevo : financevos) &#123;</span><br><span class="line">fincevo.setPk_currtype(pk_currtype2);</span><br><span class="line">fincevo.setPk_payterm(pk_payment2);</span><br><span class="line">fincevo.setStatus(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">suppvo.setSupfinance(financevos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">service.updateSupplierVO(suppvo, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h2 id="新增一个银行账户"><a href="#新增一个银行账户" class="headerlink" title="新增一个银行账户"></a>新增一个银行账户</h2><p><img src="/2024/06/27/240625/%E4%BE%9B%E5%BA%94%E5%95%86%E6%A1%A3%E6%A1%88%E6%96%B0%E5%A2%9E%E6%8E%A5%E5%8F%A3/image-20240627212031394.png" alt="image-20240627212031394"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">checkAccnumRepeat(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line"><span class="type">ISupplierBaseInfoQryService</span> <span class="variable">qryService</span> <span class="operator">=</span> (ISupplierBaseInfoQryService) NCLocator.getInstance()</span><br><span class="line">.lookup(ISupplierBaseInfoQryService.class);</span><br><span class="line"><span class="type">SupplierVO</span> <span class="variable">suppvo</span> <span class="operator">=</span> qryService.querySupplierVOByPk(pk_supplier);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustBankaccUnionVO</span>();</span><br><span class="line"><span class="comment">// 主户</span></span><br><span class="line"><span class="type">BankAccbasVO</span> <span class="variable">accBasInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccbasVO</span>();</span><br><span class="line">accBasInfo.setAccclass(<span class="number">3</span>);</span><br><span class="line">accBasInfo.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">accBasInfo.setAccopendate(<span class="keyword">new</span> <span class="title class_">UFDate</span>());</span><br><span class="line">accBasInfo.setAccountproperty(Integer.valueOf(pk_bankaccbas.getString(<span class="string">&quot;accountproperty&quot;</span>)));</span><br><span class="line">accBasInfo.setAccstate(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setStatus(<span class="number">2</span>);</span><br><span class="line">accBasInfo.setName(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setPk_group(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_bankdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getBankdocPkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_bankdoc&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_bankdoc)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;开户银行翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_bankdoc(pk_bankdoc);</span><br><span class="line"><span class="comment">// 根据开户银行带出开户银行类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_banktype</span> <span class="operator">=</span> CommonDataQueryUtil.getBanktypePkByCode(pk_bankdoc);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译开户银行类型失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_banktype(pk_banktype);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_netbankinftp</span> <span class="operator">=</span> CommonDataQueryUtil.getNetbankinftpByBankType(pk_banktype);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译网银信息模板失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_netbankinftp(pk_netbankinftp);</span><br><span class="line"><span class="comment">// 子户</span></span><br><span class="line"><span class="type">BankAccSubVO</span> <span class="variable">bankAccSubVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>();</span><br><span class="line">accBasInfo.setBankaccsub(<span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>[] &#123; bankAccSubVO &#125;);</span><br><span class="line">bankAccSubVO.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">bankAccSubVO.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">bankAccSubVO.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setFronzenstate(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setIsdefault(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(pk_bankaccbas.getString(<span class="string">&quot;isdefault&quot;</span>)));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_currtype&quot;</span>));</span><br><span class="line">bankAccSubVO.setPk_currtype(pk_currtype);</span><br><span class="line">bankAccSubVO.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 客商</span></span><br><span class="line"><span class="type">CustbankVO</span> <span class="variable">custbankVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustbankVO</span>();</span><br><span class="line">custbankVO.setAccclass(<span class="number">3</span>);</span><br><span class="line">custbankVO.setPk_cust(suppvo.getPk_supplier());</span><br><span class="line"><span class="comment">// 插入银行账户</span></span><br><span class="line">insertVO.setCustbankVO(custbankVO);</span><br><span class="line">insertVO.setBankaccbasVO(accBasInfo);</span><br><span class="line"><span class="type">ICustBankaccService</span> <span class="variable">custBankAccService</span> <span class="operator">=</span> (ICustBankaccService) NCLocator.getInstance()</span><br><span class="line">.lookup(ICustBankaccService.class);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertCustBankacc</span> <span class="operator">=</span> custBankAccService.insertCustBankacc(insertVO);</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增--&gt;准备启用银行账户 ~~~&quot;</span> + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用银行账户  直接执行sql吧，没找到更好的方式，因为面对一个启用人和维护人不能是同一个的问题！</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; update bd_bankaccbas set ENABLESTATE = &#x27;2&#x27; , ENABLEUSER = &#x27;&quot;</span></span><br><span class="line">+ InvocationInfoProxy.getInstance().getUserId() + <span class="string">&quot;&#x27; where PK_BANKACCBAS = &#x27;&quot;</span></span><br><span class="line">+ insertCustBankacc.getPk_bankaccbas() + <span class="string">&quot;&#x27; and DR = &#x27;0&#x27; &quot;</span>;</span><br><span class="line">getDAO().executeUpdate(sql);</span><br></pre></td></tr></table></figure><h2 id="处理-openapi的返回结果"><a href="#处理-openapi的返回结果" class="headerlink" title="处理 openapi的返回结果"></a>处理 openapi的返回结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> JSON.parseObject(addSupplier.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> result.getJSONObject(<span class="string">&quot;data&quot;</span>).getJSONObject(<span class="string">&quot;ufinterface&quot;</span>);</span><br><span class="line"><span class="type">JSONString</span> <span class="variable">returnjson</span> <span class="operator">=</span> ufinterface.getJSONArray(<span class="string">&quot;sendresult&quot;</span>).getJSONObject(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;N&quot;</span>.equals(ufinterface.getString(<span class="string">&quot;successful&quot;</span>))) &#123;</span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增报错信息&quot;</span> + returnjson.toString() + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(returnjson.toString()));</span><br><span class="line">&#125;</span><br><span class="line">         <span class="keyword">return</span> ResultMessageUtil.toJSON(returnjson);</span><br></pre></td></tr></table></figure><h2 id="涉及到的一些翻译的方法"><a href="#涉及到的一些翻译的方法" class="headerlink" title="涉及到的一些翻译的方法"></a>涉及到的一些翻译的方法</h2><h3 id="翻译pk-country"><a href="#翻译pk-country" class="headerlink" title="翻译pk_country"></a>翻译pk_country</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 翻译countryzone</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCountrypkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">CountryZoneVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(CountryZoneVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;pk_country&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_currtype&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">CountryZoneVO[] qryVos = (CountryZoneVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_country();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译时区pk-timezone"><a href="#翻译时区pk-timezone" class="headerlink" title="翻译时区pk_timezone"></a>翻译时区pk_timezone</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimezonepkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">TimezoneVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(TimezoneVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_timezone&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">TimezoneVO[] qryVos = (TimezoneVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_timezone();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译数据格式pk-formatdoc"><a href="#翻译数据格式pk-formatdoc" class="headerlink" title="翻译数据格式pk_formatdoc"></a>翻译数据格式pk_formatdoc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFormatPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">FormatDocVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(FormatDocVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_formatdoc&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">FormatDocVO[] qryVos = (FormatDocVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_formatdoc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译-供应商基本分类pk-supplierclass"><a href="#翻译-供应商基本分类pk-supplierclass" class="headerlink" title="翻译 供应商基本分类pk_supplierclass"></a>翻译 供应商基本分类pk_supplierclass</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSupplierClassPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">SupplierclassVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(SupplierclassVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pk_supplierclass&quot;</span>, <span class="string">&quot;dr&quot;</span>, <span class="string">&quot;enablestate&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">whereFieldList.add(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">valueList.add(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; code &#125;);</span><br><span class="line"></span><br><span class="line">SupplierclassVO[] qryVos = (SupplierclassVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_supplierclass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译自定义档案"><a href="#翻译自定义档案" class="headerlink" title="翻译自定义档案"></a>翻译自定义档案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDefdocPkByCode</span><span class="params">(String code, String listcode)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(listcode) || StringUtils.isBlank(code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译自定义档案失败: 传入的code/defdocListCode为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">docList</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.DEFDOCLIST)</span><br><span class="line">.getDocByCode(<span class="string">&quot;GLOBLE00000000000000&quot;</span>, listcode);</span><br><span class="line"><span class="keyword">if</span> (docList == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">defdoc</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(docList.getPk())</span><br><span class="line">.getDocByCode(InvocationInfoProxy.getInstance().getGroupId(), code);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (defdoc == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> defdoc.getPk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译银行类型"><a href="#翻译银行类型" class="headerlink" title="翻译银行类型"></a>翻译银行类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBanktypePkByCode</span><span class="params">(String pk_bankdoc)</span> &#123;</span><br><span class="line"><span class="type">BankdocVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(BankdocVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;pk_bankdoc&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;pk_banktype&quot;</span>, <span class="string">&quot;name&quot;</span> &#125;); <span class="comment">// true 代表不走缓存，强制查询</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String[]&gt;();</span><br><span class="line">List&lt;String&gt; paramsValue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(pk_bankdoc)) &#123;</span><br><span class="line">whereFieldList.add(<span class="string">&quot;pk_bankdoc&quot;</span>);</span><br><span class="line">paramsValue.add(pk_bankdoc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">valueList.add(paramsValue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">BankdocVO[] qryVos = (BankdocVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_banktype();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译银行档案"><a href="#翻译银行档案" class="headerlink" title="翻译银行档案"></a>翻译银行档案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBankdocPkByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">defdoc</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.BANKDOC)</span><br><span class="line">.getDocByCode(<span class="string">&quot;GLOBLE00000000000000&quot;</span>, code);</span><br><span class="line"><span class="keyword">if</span> (defdoc != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> defdoc.getPk();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译网银信息模板"><a href="#翻译网银信息模板" class="headerlink" title="翻译网银信息模板"></a>翻译网银信息模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getNetbankinftpByBankType</span><span class="params">(String pk_banktype)</span> &#123;</span><br><span class="line"><span class="type">NetbankinftpVO</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">CacheVOQuery</span> <span class="variable">cacheVOQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheVOQuery</span>(NetbankinftpVO.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;pk_netbankinftp&quot;</span>, <span class="string">&quot;isdefault&quot;</span>, <span class="string">&quot;enablestate&quot;</span>, <span class="string">&quot;pk_banktype&quot;</span>, <span class="string">&quot;dr&quot;</span> &#125;); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 代表不走缓存，强制查询</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; whereFieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">List&lt;String[]&gt; valueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String[]&gt;();</span><br><span class="line">List&lt;String&gt; paramsValue = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(pk_banktype)) &#123;</span><br><span class="line">whereFieldList.add(<span class="string">&quot;pk_banktype&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;isdefault&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;enablestate&quot;</span>);</span><br><span class="line">whereFieldList.add(<span class="string">&quot;dr&quot;</span>);</span><br><span class="line">paramsValue.add(pk_banktype);</span><br><span class="line">paramsValue.add(<span class="string">&quot;Y&quot;</span>);</span><br><span class="line">paramsValue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">paramsValue.add(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">valueList.add(paramsValue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">NetbankinftpVO[] qryVos = (NetbankinftpVO[]) cacheVOQuery.query(whereFieldList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line">valueList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>][]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (qryVos != <span class="literal">null</span> &amp;&amp; qryVos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">res = qryVos[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res.getPk_netbankinftp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译币种"><a href="#翻译币种" class="headerlink" title="翻译币种"></a>翻译币种</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCurrtypePkByCode</span><span class="params">(String code)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译币种失败: 传入的编码为空！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">IBDData</span> <span class="variable">currvo</span> <span class="operator">=</span> GeneralAccessorFactory.getAccessor(IBDMetaDataIDConst.CURRTYPE)</span><br><span class="line">.getDocByCode(<span class="string">&quot;GLOBLE00000000000000&quot;</span>, code);</span><br><span class="line"><span class="keyword">if</span> (currvo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> currvo.getPk();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发生报错后删除供应商"><a href="#发生报错后删除供应商" class="headerlink" title="发生报错后删除供应商"></a>发生报错后删除供应商</h2><ul><li>因为是好几个动作写在一个接口里面，新增，分配，修改信息，新增账户，不能保证事务，只能在报错了之后删除供应商！</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 报错后删除供应商</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDeleteSupplier</span><span class="params">(String pk_supplier)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">SupplierVO</span> <span class="variable">supvo</span> <span class="operator">=</span> (SupplierVO)getDAO().retrieveByPK(SupplierVO.class, pk_supplier);</span><br><span class="line"><span class="type">ISupplierBaseInfoService</span> <span class="variable">delServer</span> <span class="operator">=</span> NCLocator.getInstance().lookup(ISupplierBaseInfoService.class);</span><br><span class="line">delServer.deleteSupplierVO(supvo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结尾：附赠源代码"><a href="#结尾：附赠源代码" class="headerlink" title="结尾：附赠源代码"></a>结尾：附赠源代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> nccloud.openapi.hfmp.doc.supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Consumes;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.POST;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONString;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> nc.bs.dao.BaseDAO;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.InvocationInfoProxy;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.common.NCLocator;</span><br><span class="line"><span class="keyword">import</span> nc.bs.plm.uapbd.utils.CommonDataQueryUtil;</span><br><span class="line"><span class="keyword">import</span> nc.bs.shcm.utils.LogWriteUtil;</span><br><span class="line"><span class="keyword">import</span> nc.bs.trade.business.HYPubBO;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.bankacc.cust.ICustBankaccService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.supplier.assign.ISupplierAssignService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.supplier.baseinfo.ISupplierBaseInfoQryService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.supplier.baseinfo.ISupplierBaseInfoService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.supplier.finance.ISupplierFinanceQryService;</span><br><span class="line"><span class="keyword">import</span> nc.itf.bd.supplier.stock.ISupplierStockQryService;</span><br><span class="line"><span class="keyword">import</span> nc.jdbc.framework.processor.ColumnListProcessor;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bankaccount.BankAccSubVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bankaccount.BankAccbasVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.bankaccount.cust.CustBankaccUnionVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.cust.CustbankVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.linkman.LinkmanVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.supplier.SupCountryTaxesVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.supplier.SupLinkmanVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.supplier.SupplierVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.supplier.finance.SupFinanceVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.bd.supplier.stock.SupStockVO;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.BusinessException;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFBoolean;</span><br><span class="line"><span class="keyword">import</span> nc.vo.pub.lang.UFDate;</span><br><span class="line"><span class="keyword">import</span> nccloud.api.rest.utils.NCCRestUtils;</span><br><span class="line"><span class="keyword">import</span> nccloud.api.rest.utils.ResultMessageUtil;</span><br><span class="line"><span class="keyword">import</span> nccloud.pubitf.baseapp.apprbac.IAppAndOrgPermQueryPubService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path(&quot;shcm/supplier&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShcmSupplierInfoResources</span> <span class="keyword">extends</span> <span class="title class_">SupplierInfoResources</span> &#123;</span><br><span class="line"><span class="keyword">private</span> BaseDAO dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BaseDAO <span class="title function_">getDAO</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dao == <span class="literal">null</span>) &#123;</span><br><span class="line">dao = <span class="keyword">new</span> <span class="title class_">BaseDAO</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line"><span class="meta">@Path(&quot;oa/add&quot;)</span></span><br><span class="line"><span class="meta">@Consumes(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="meta">@Produces(&#123; &quot;application/json&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> JSONString <span class="title function_">addSupplier</span><span class="params">(JSONString json)</span> &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口进入.......&quot;</span> + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增组装前报文&quot;</span> + json + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">JSONString</span> <span class="variable">addSupplier</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">returnjson</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_suplinkman</span> <span class="operator">=</span> (JSONObject) obj.remove(<span class="string">&quot;pk_suplinkman&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_supcountrytaxes</span> <span class="operator">=</span> (JSONObject) obj.remove(<span class="string">&quot;pk_supcountrytaxes&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_supstock</span> <span class="operator">=</span> (JSONObject) obj.remove(<span class="string">&quot;pk_supstock&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_supfinance</span> <span class="operator">=</span> (JSONObject) obj.remove(<span class="string">&quot;pk_supfinance&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">pk_bankaccbas</span> <span class="operator">=</span> (JSONObject) obj.remove(<span class="string">&quot;pk_bankaccbas&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> handleData(NCCRestUtils.toJSONString(obj));</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增组装后报文&quot;</span> + json2 + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">addSupplier = <span class="built_in">super</span>.addSupplier(json2);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> JSON.parseObject(addSupplier.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> result.getJSONObject(<span class="string">&quot;data&quot;</span>).getJSONObject(<span class="string">&quot;ufinterface&quot;</span>);</span><br><span class="line">returnjson = ufinterface.getJSONArray(<span class="string">&quot;sendresult&quot;</span>).getJSONObject(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;N&quot;</span>.equals(ufinterface.getString(<span class="string">&quot;successful&quot;</span>))) &#123;</span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增报错信息&quot;</span> + returnjson.toString() + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(returnjson.toString()));</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">1</span>;</span><br><span class="line">autoAssignOrg();</span><br><span class="line">num = <span class="number">2</span>;</span><br><span class="line">editSupplierAfterInsert(returnjson.getString(<span class="string">&quot;content&quot;</span>), pk_suplinkman, pk_supcountrytaxes, pk_supstock,</span><br><span class="line">pk_supfinance);</span><br><span class="line">num = <span class="number">3</span>;</span><br><span class="line">addSupplierBankacc(returnjson.getString(<span class="string">&quot;content&quot;</span>), pk_bankaccbas);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增报错信息&quot;</span> + e.getMessage() + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">handleDeleteSupplier(returnjson.getString(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil</span><br><span class="line">.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;供应商新增失败....报错信息：&quot;</span> + e.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;供应商新增失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil</span><br><span class="line">.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;供应商新增成功！自动分配失败，请手动分配业务单元&quot;</span> + e.getMessage()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil</span><br><span class="line">.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;修改联系人/国家税类/采购信息/财务信息失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.exceptionToJSON(<span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;新增供应商银行账户失败！&quot;</span> + e.getMessage()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ResultMessageUtil.toJSON(returnjson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 报错后删除供应商</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDeleteSupplier</span><span class="params">(String pk_supplier)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">SupplierVO</span> <span class="variable">supvo</span> <span class="operator">=</span> (SupplierVO)getDAO().retrieveByPK(SupplierVO.class, pk_supplier);</span><br><span class="line"><span class="type">ISupplierBaseInfoService</span> <span class="variable">delServer</span> <span class="operator">=</span> NCLocator.getInstance().lookup(ISupplierBaseInfoService.class);</span><br><span class="line">delServer.deleteSupplierVO(supvo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 新增银行账户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_bankaccbas</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addSupplierBankacc</span><span class="params">(String pk_supplier, JSONObject pk_bankaccbas)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="keyword">if</span> (pk_bankaccbas == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增--&gt;新增银行账户信息&quot;</span> + pk_bankaccbas.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line">checkAccnumRepeat(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line"><span class="type">ISupplierBaseInfoQryService</span> <span class="variable">qryService</span> <span class="operator">=</span> (ISupplierBaseInfoQryService) NCLocator.getInstance()</span><br><span class="line">.lookup(ISupplierBaseInfoQryService.class);</span><br><span class="line"><span class="type">SupplierVO</span> <span class="variable">suppvo</span> <span class="operator">=</span> qryService.querySupplierVOByPk(pk_supplier);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustBankaccUnionVO</span>();</span><br><span class="line"><span class="comment">// 主户</span></span><br><span class="line"><span class="type">BankAccbasVO</span> <span class="variable">accBasInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccbasVO</span>();</span><br><span class="line">accBasInfo.setAccclass(<span class="number">3</span>);</span><br><span class="line">accBasInfo.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">accBasInfo.setAccopendate(<span class="keyword">new</span> <span class="title class_">UFDate</span>());</span><br><span class="line">accBasInfo.setAccountproperty(Integer.valueOf(pk_bankaccbas.getString(<span class="string">&quot;accountproperty&quot;</span>)));</span><br><span class="line">accBasInfo.setAccstate(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">accBasInfo.setStatus(<span class="number">2</span>);</span><br><span class="line">accBasInfo.setName(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">accBasInfo.setPk_group(InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_bankdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getBankdocPkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_bankdoc&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_bankdoc)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;开户银行翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_bankdoc(pk_bankdoc);</span><br><span class="line"><span class="comment">// 根据开户银行带出开户银行类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_banktype</span> <span class="operator">=</span> CommonDataQueryUtil.getBanktypePkByCode(pk_bankdoc);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译开户银行类型失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_banktype(pk_banktype);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_netbankinftp</span> <span class="operator">=</span> CommonDataQueryUtil.getNetbankinftpByBankType(pk_banktype);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_banktype)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;翻译网银信息模板失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">accBasInfo.setPk_netbankinftp(pk_netbankinftp);</span><br><span class="line"><span class="comment">// 子户</span></span><br><span class="line"><span class="type">BankAccSubVO</span> <span class="variable">bankAccSubVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>();</span><br><span class="line">accBasInfo.setBankaccsub(<span class="keyword">new</span> <span class="title class_">BankAccSubVO</span>[] &#123; bankAccSubVO &#125;);</span><br><span class="line">bankAccSubVO.setAccname(pk_bankaccbas.getString(<span class="string">&quot;accname&quot;</span>));</span><br><span class="line">bankAccSubVO.setAccnum(pk_bankaccbas.getString(<span class="string">&quot;accnum&quot;</span>));</span><br><span class="line">bankAccSubVO.setDataoriginflag(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setFronzenstate(<span class="number">0</span>);</span><br><span class="line">bankAccSubVO.setIsdefault(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(pk_bankaccbas.getString(<span class="string">&quot;isdefault&quot;</span>)));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_bankaccbas.getString(<span class="string">&quot;pk_currtype&quot;</span>));</span><br><span class="line">bankAccSubVO.setPk_currtype(pk_currtype);</span><br><span class="line">bankAccSubVO.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 客商</span></span><br><span class="line"><span class="type">CustbankVO</span> <span class="variable">custbankVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustbankVO</span>();</span><br><span class="line">custbankVO.setAccclass(<span class="number">3</span>);</span><br><span class="line">custbankVO.setPk_cust(suppvo.getPk_supplier());</span><br><span class="line"><span class="comment">// 插入银行账户</span></span><br><span class="line">insertVO.setCustbankVO(custbankVO);</span><br><span class="line">insertVO.setBankaccbasVO(accBasInfo);</span><br><span class="line"><span class="type">ICustBankaccService</span> <span class="variable">custBankAccService</span> <span class="operator">=</span> (ICustBankaccService) NCLocator.getInstance()</span><br><span class="line">.lookup(ICustBankaccService.class);</span><br><span class="line"><span class="type">CustBankaccUnionVO</span> <span class="variable">insertCustBankacc</span> <span class="operator">=</span> custBankAccService.insertCustBankacc(insertVO);</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增--&gt;准备启用银行账户 ~~~&quot;</span> + <span class="string">&quot;\n&quot;</span>, <span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// 启用银行账户</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; update bd_bankaccbas set ENABLESTATE = &#x27;2&#x27; , ENABLEUSER = &#x27;&quot;</span></span><br><span class="line">+ InvocationInfoProxy.getInstance().getUserId() + <span class="string">&quot;&#x27; where PK_BANKACCBAS = &#x27;&quot;</span></span><br><span class="line">+ insertCustBankacc.getPk_bankaccbas() + <span class="string">&quot;&#x27; and DR = &#x27;0&#x27; &quot;</span>;</span><br><span class="line">getDAO().executeUpdate(sql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> 校验银行账号是否重复</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkAccnumRepeat</span><span class="params">(String accnum)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot; select pk_bankaccbas from bd_bankaccbas where accnum = &#x27;&quot;</span>).append(accnum)</span><br><span class="line">.append(<span class="string">&quot;&#x27; and dr = &#x27;0&#x27; and accclass = &#x27;3&#x27; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line"><span class="keyword">if</span> (list != <span class="literal">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;传入的银行账号accnum[&quot;</span> + accnum + <span class="string">&quot;]在档案中已存在不允许重复添加！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_supplier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_supfinance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_supstock</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_supcountrytaxes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pk_suplinkman</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BusinessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> openapi接口不支持 联系人，国家税类，财务组织，采购组织修改，手动修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">editSupplierAfterInsert</span><span class="params">(String pk_supplier, JSONObject pk_suplinkman, JSONObject pk_supcountrytaxes,</span></span><br><span class="line"><span class="params">JSONObject pk_supstock, JSONObject pk_supfinance)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">ISupplierBaseInfoQryService</span> <span class="variable">qryService</span> <span class="operator">=</span> (ISupplierBaseInfoQryService) NCLocator.getInstance()</span><br><span class="line">.lookup(ISupplierBaseInfoQryService.class);</span><br><span class="line"><span class="type">ISupplierBaseInfoService</span> <span class="variable">service</span> <span class="operator">=</span> (ISupplierBaseInfoService) NCLocator.getInstance()</span><br><span class="line">.lookup(ISupplierBaseInfoService.class);</span><br><span class="line"><span class="type">SupplierVO</span> <span class="variable">suppvo</span> <span class="operator">=</span> qryService.querySupplierVOByPk(pk_supplier);</span><br><span class="line"><span class="keyword">if</span> (suppvo == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;供应商新增失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 联系人</span></span><br><span class="line"><span class="keyword">if</span> (pk_suplinkman != <span class="literal">null</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;新增联系人--&gt;&quot;</span> + pk_suplinkman.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">SupLinkmanVO</span> <span class="variable">linkman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SupLinkmanVO</span>();</span><br><span class="line"><span class="type">LinkmanVO</span> <span class="variable">linkmanVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkmanVO</span>();</span><br><span class="line">linkmanVO.setName(pk_suplinkman.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">linkmanVO.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_linkman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HYPubBO</span>().insert(linkmanVO);</span><br><span class="line">linkman.setStatus(<span class="number">2</span>);</span><br><span class="line">linkman.setPk_linkman(pk_linkman);</span><br><span class="line">linkman.setIsdefault(<span class="keyword">new</span> <span class="title class_">UFBoolean</span>(pk_suplinkman.getString(<span class="string">&quot;isdefault&quot;</span>)));</span><br><span class="line">suppvo.setSuplinkman(<span class="keyword">new</span> <span class="title class_">SupLinkmanVO</span>[] &#123; linkman &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 国家税类</span></span><br><span class="line"><span class="keyword">if</span> (pk_supcountrytaxes != <span class="literal">null</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;新增国家税类--&gt;&quot;</span> + pk_supcountrytaxes.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">SupCountryTaxesVO</span> <span class="variable">taxesvo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SupCountryTaxesVO</span>();</span><br><span class="line">taxesvo.setStatus(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_country</span> <span class="operator">=</span> CommonDataQueryUtil.getCountrypkByCode(pk_supcountrytaxes.getString(<span class="string">&quot;pk_country&quot;</span>));</span><br><span class="line">taxesvo.setPk_country(pk_country);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_taxes</span> <span class="operator">=</span> CommonDataQueryUtil.getSuptaxesByCode(pk_supcountrytaxes.getString(<span class="string">&quot;pk_taxes&quot;</span>));</span><br><span class="line">taxesvo.setPk_taxes(pk_taxes);</span><br><span class="line">suppvo.setSupcountrytaxes(<span class="keyword">new</span> <span class="title class_">SupCountryTaxesVO</span>[] &#123; taxesvo &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">cuserid</span> <span class="operator">=</span> CommonDataQueryUtil.getUseridByCode(<span class="string">&quot;OA&quot;</span>);</span><br><span class="line">String[] orgIDs = ((IAppAndOrgPermQueryPubService) NCLocator.getInstance() <span class="comment">// 18</span></span><br><span class="line">.lookup(IAppAndOrgPermQueryPubService.class)).queryAllUserPermOrgPks(cuserid,</span><br><span class="line">InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line"><span class="keyword">if</span> (pk_supstock != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 采购信息</span></span><br><span class="line">SupStockVO[] stockvos = ((ISupplierStockQryService) NCLocator.getInstance() <span class="comment">// 4</span></span><br><span class="line">.lookup(ISupplierStockQryService.class)).querySupStockVOsByOrgIDs(orgIDs, suppvo.getPk_supplier());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stockvos != <span class="literal">null</span> &amp;&amp; stockvos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;修改采购信息--&gt;&quot;</span> + pk_supstock.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_payment</span> <span class="operator">=</span> CommonDataQueryUtil.getPaytermByPkByCode(pk_supstock.getString(<span class="string">&quot;paytermdefault&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_supstock.getString(<span class="string">&quot;currencydefault&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (SupStockVO stockvo : stockvos) &#123;</span><br><span class="line">stockvo.setPaytermdefault(pk_payment);</span><br><span class="line">stockvo.setCurrencydefault(pk_currtype);</span><br><span class="line">stockvo.setStatus(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">suppvo.setSupstock(stockvos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pk_supfinance != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 财务信息</span></span><br><span class="line">SupFinanceVO[] financevos = ((ISupplierFinanceQryService) NCLocator.getInstance() <span class="comment">// 6</span></span><br><span class="line">.lookup(ISupplierFinanceQryService.class)).querySupFinanceVOsByOrgIDs(orgIDs,</span><br><span class="line">suppvo.getPk_supplier());</span><br><span class="line"><span class="keyword">if</span> (financevos != <span class="literal">null</span> &amp;&amp; financevos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">LogWriteUtil.writeInfo(<span class="string">&quot;SupplierAdd&quot;</span>, <span class="string">&quot;供应商新增接口--&gt;修改财务信息--&gt;&quot;</span> + pk_supfinance.toString() + <span class="string">&quot;\n&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UFBoolean</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_payment2</span> <span class="operator">=</span> CommonDataQueryUtil.getPaytermByPkByCode(pk_supfinance.getString(<span class="string">&quot;pk_payterm&quot;</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_currtype2</span> <span class="operator">=</span> CommonDataQueryUtil.getCurrtypePkByCode(pk_supfinance.getString(<span class="string">&quot;pk_currtype&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (SupFinanceVO fincevo : financevos) &#123;</span><br><span class="line">fincevo.setPk_currtype(pk_currtype2);</span><br><span class="line">fincevo.setPk_payterm(pk_payment2);</span><br><span class="line">fincevo.setStatus(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">suppvo.setSupfinance(financevos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">service.updateSupplierVO(suppvo, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JSONString <span class="title function_">handleData</span><span class="params">(JSONString json)</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonobj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">ufinterface</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">object.put(<span class="string">&quot;ufinterface&quot;</span>, ufinterface);</span><br><span class="line">ufinterface.put(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;billtype&quot;</span>, <span class="string">&quot;supplier&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;groupcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;isexchange&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;replace&quot;</span>, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;roottag&quot;</span>, <span class="string">&quot;bill&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;sender&quot;</span>, <span class="string">&quot;default&quot;</span>);</span><br><span class="line">ufinterface.put(<span class="string">&quot;orgcode&quot;</span>, <span class="string">&quot;0001&quot;</span>);</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">bill</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">ufinterface.put(<span class="string">&quot;bill&quot;</span>, bill);</span><br><span class="line">bill.put(<span class="string">&quot;billhead&quot;</span>, jsonobj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jsonobj.getJSONObject(<span class="string">&quot;suplinkman&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">jsonobj.put(<span class="string">&quot;suplinkman&quot;</span>, <span class="keyword">new</span> <span class="title class_">JSONObject</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jsonobj.getJSONObject(<span class="string">&quot;corpaddress&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">jsonobj.put(<span class="string">&quot;corpaddress&quot;</span>, <span class="keyword">new</span> <span class="title class_">JSONObject</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组织和集团默认集团集</span></span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_group&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_org&quot;</span>, InvocationInfoProxy.getInstance().getGroupId());</span><br><span class="line">jsonobj.put(<span class="string">&quot;enablestate&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻译pk_country</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_country</span> <span class="operator">=</span> CommonDataQueryUtil.getCountrypkByCode(<span class="string">&quot;CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_country&quot;</span>, pk_country);</span><br><span class="line"><span class="comment">// 翻译时区pk_timezone</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_timezone</span> <span class="operator">=</span> CommonDataQueryUtil.getTimezonepkByCode(<span class="string">&quot;P0800&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_timezone&quot;</span>, pk_timezone);</span><br><span class="line"><span class="comment">// 数据格式pk_formatdoc</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pk_formatdoc</span> <span class="operator">=</span> CommonDataQueryUtil.getFormatPkByCode(<span class="string">&quot;ZH-CN&quot;</span>);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_format&quot;</span>, pk_formatdoc);</span><br><span class="line"><span class="comment">// 翻译 供应商基本分类pk_supplierclass</span></span><br><span class="line"><span class="type">String</span> <span class="variable">suclass</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;pk_supplierclass&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_supplierclass</span> <span class="operator">=</span> CommonDataQueryUtil.getSupplierClassPkByCode(suclass);</span><br><span class="line">jsonobj.put(<span class="string">&quot;pk_supplierclass&quot;</span>, pk_supplierclass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// def2 翻译客商类别</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def2</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def2&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def2</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def2, <span class="string">&quot;1028&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def2)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;客商类别 def2 翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def2&quot;</span>, pk_def2);</span><br><span class="line"><span class="comment">// def3 客商其他状态</span></span><br><span class="line"><span class="type">String</span> <span class="variable">def3</span> <span class="operator">=</span> jsonobj.getString(<span class="string">&quot;def3&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">pk_def3</span> <span class="operator">=</span> CommonDataQueryUtil.getDefdocPkByCode(def3, <span class="string">&quot;1029&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(pk_def3)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;客商其他状态 def3 翻译失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">jsonobj.put(<span class="string">&quot;def3&quot;</span>, pk_def3);</span><br><span class="line"></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> NCCRestUtils.toJSONString(object);</span><br><span class="line"><span class="keyword">return</span> json2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">autoAssignOrg</span><span class="params">()</span> <span class="keyword">throws</span> BusinessException &#123;</span><br><span class="line"><span class="type">ISupplierAssignService</span> <span class="variable">assignService</span> <span class="operator">=</span> (ISupplierAssignService) NCLocator.getInstance().lookup(ISupplierAssignService.class);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(</span><br><span class="line"><span class="string">&quot; select pk_org from org_orgs where dr = 0 and ENABLESTATE = 2  and ISBUSINESSUNIT = &#x27;Y&#x27; and ISLASTVERSION = &#x27;Y&#x27;  &quot;</span>);</span><br><span class="line">List&lt;String&gt; resList = (List&lt;String&gt;) getDAO().executeQuery(buf.toString(), <span class="keyword">new</span> <span class="title class_">ColumnListProcessor</span>());</span><br><span class="line">assignService.assignSupplierByPks(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>], resList.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>[] &#123; InvocationInfoProxy.getInstance().getGroupId() &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码优化:单据验重/防止重复推送单据</title>
      <link href="/2024/06/27/240625/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96-%E5%8D%95%E6%8D%AE%E9%AA%8C%E9%87%8D-%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E6%8E%A8%E9%80%81%E5%8D%95%E6%8D%AE/"/>
      <url>/2024/06/27/240625/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96-%E5%8D%95%E6%8D%AE%E9%AA%8C%E9%87%8D-%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E6%8E%A8%E9%80%81%E5%8D%95%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="验重-x2F-防止重复推送单据"><a href="#验重-x2F-防止重复推送单据" class="headerlink" title="验重&#x2F;防止重复推送单据"></a>验重&#x2F;防止重复推送单据</h1><ul><li><p>对于一些，不允许编码重复的单据，或者存在外系统主键的单据，可以在增加时做如下操作。</p></li><li><p>关键是查询前对单据加锁，这样能防止同时插入两条单据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            <span class="comment">// 保存前加锁</span></span><br><span class="line"><span class="keyword">if</span> (!PKLock.getInstance().addDynamicLock(hvoObject.getString(<span class="string">&quot;vdef2&quot;</span>))) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockFailedException</span>(hvoObject.getString(<span class="string">&quot;vdef2&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加锁后，再去数据库查询是否已存在</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;DR = &#x27;0&#x27; AND vdef2 =&#x27;&#x27; AND vdef3 =&#x27;ecp&#x27;&quot;</span>;</span><br><span class="line"><span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">BaseDAO</span>()).retrieveByClause(OrderHeaderVO.class,sql);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>无论如何，一定把解锁的代码放到  finally 之中</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">         <span class="comment">// 解锁</span></span><br><span class="line">PKLock.getInstance().releaseLock(hvoObject.getString(<span class="string">&quot;vdef2&quot;</span>),</span><br><span class="line">InvocationInfoProxy.getInstance().getUserId(),</span><br><span class="line">   InvocationInfoProxy.getInstance().getUserDataSource() );</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码优化:校验报文必填字段</title>
      <link href="/2024/06/27/240625/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96-%E6%A0%A1%E9%AA%8C%E6%8A%A5%E6%96%87%E5%BF%85%E5%A1%AB%E5%AD%97%E6%AE%B5/"/>
      <url>/2024/06/27/240625/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96-%E6%A0%A1%E9%AA%8C%E6%8A%A5%E6%96%87%E5%BF%85%E5%A1%AB%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="校验报文必填字段"><a href="#校验报文必填字段" class="headerlink" title="校验报文必填字段"></a>校验报文必填字段</h1><ul><li>不适用于所有的报文，但是大体上是这种方式。</li><li>根据自己的报文格式去做对应调整，在处理报文的方法执行前校验一下必填字段。</li><li>校验之后，failInfos有错误信息，就抛出错误！</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: 校验业务字段是否存在&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headVOJson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bodyVOsJson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> failInfos </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">isExistClumns</span><span class="params">(JSONObject headVOJson,</span></span><br><span class="line"><span class="params">JSONArray bodyVOsJson, Map&lt;String, String&gt; failInfos)</span> &#123;</span><br><span class="line"><span class="comment">// 必传字段校验-表头</span></span><br><span class="line">String[] dataClmns = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">               <span class="string">&quot;def1&quot;</span> ,</span><br><span class="line">               <span class="string">&quot;def4&quot;</span> ,</span><br><span class="line"><span class="string">&quot;busidate&quot;</span>,</span><br><span class="line">               <span class="string">&quot;billdate&quot;</span> ,</span><br><span class="line">               <span class="string">&quot;billmaker&quot;</span> ,</span><br><span class="line">               <span class="string">&quot;creationtime&quot;</span> ,</span><br><span class="line">               <span class="string">&quot;creator&quot;</span> ,</span><br><span class="line">               <span class="string">&quot;money&quot;</span> ,</span><br><span class="line">               <span class="string">&quot;pkOrg&quot;</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(String dataClmn:dataClmns)&#123;</span><br><span class="line"><span class="keyword">if</span>(!headVOJson.containsKey(dataClmn) || (headVOJson.containsKey(dataClmn) &amp;&amp;                      StringUtils.isBlank(headVOJson.getString(dataClmn))))&#123;</span><br><span class="line">failInfos.put(<span class="string">&quot;errorMsg&quot;</span>, <span class="string">&quot;表头字段&quot;</span>+dataClmn+<span class="string">&quot;不存在或者值为空.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必传字段校验-表体</span></span><br><span class="line">dataClmns = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;                </span><br><span class="line">               <span class="string">&quot;moneyCr&quot;</span>,</span><br><span class="line">               <span class="string">&quot;notaxCr&quot;</span>,</span><br><span class="line">               <span class="string">&quot;crowno&quot;</span>,</span><br><span class="line">               <span class="string">&quot;supplier&quot;</span>,</span><br><span class="line">               <span class="string">&quot;taxcodeid&quot;</span>,</span><br><span class="line">               <span class="string">&quot;def1&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;bodyVOsJson.size();i++) &#123;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">bodyvo</span> <span class="operator">=</span> bodyVOsJson.getJSONObject(i);</span><br><span class="line"><span class="keyword">for</span>(String dataClmn:dataClmns)&#123;</span><br><span class="line"><span class="keyword">if</span>(!bodyvo.containsKey(dataClmn) || (bodyvo.containsKey(dataClmn) &amp;&amp; StringUtils.isBlank(bodyvo.getString(dataClmn))))&#123;</span><br><span class="line">failInfos.put(<span class="string">&quot;errorMsg&quot;</span>, <span class="string">&quot;表体字段&quot;</span>+dataClmn+<span class="string">&quot;不存在或者值为空.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  添加字段验证的必输项</span></span><br><span class="line"> isExistClumns(headObject, bvoArray, failInfos);</span><br><span class="line"> <span class="keyword">if</span>(failInfos!=<span class="literal">null</span> &amp;&amp; failInfos.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;XXXXXX&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL查询结果，将多行合并1行，数据以逗号分隔</title>
      <link href="/2024/06/26/240625/SQL%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%B0%86%E5%A4%9A%E8%A1%8C%E5%90%88%E5%B9%B61%E8%A1%8C%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94/"/>
      <url>/2024/06/26/240625/SQL%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%B0%86%E5%A4%9A%E8%A1%8C%E5%90%88%E5%B9%B61%E8%A1%8C%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94/</url>
      
        <content type="html"><![CDATA[<h1 id="sql-查询结果，将多行合并成1行，数据以逗号分割"><a href="#sql-查询结果，将多行合并成1行，数据以逗号分割" class="headerlink" title="sql 查询结果，将多行合并成1行，数据以逗号分割"></a>sql 查询结果，将多行合并成1行，数据以逗号分割</h1><p><img src="/2024/06/26/240625/SQL%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%B0%86%E5%A4%9A%E8%A1%8C%E5%90%88%E5%B9%B61%E8%A1%8C%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94/image-20240219164500623.png" alt="image-20240219164500623"></p><p>——–》</p><p><img src="/2024/06/26/240625/SQL%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%B0%86%E5%A4%9A%E8%A1%8C%E5%90%88%E5%B9%B61%E8%A1%8C%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94/image-20240219164523685.png" alt="image-20240219164523685"></p><h2 id="ListAgg（字段-，‘分隔符’）"><a href="#ListAgg（字段-，‘分隔符’）" class="headerlink" title="ListAgg（字段 ，‘分隔符’）"></a>ListAgg（字段 ，‘分隔符’）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> APPROVEDATE , PK_GROUP , DEF2 ,BILLNO ,PK_PAYBILL ,PK_BILLTYPECODE ,BILLTYPENAME ,<span class="built_in">LISTAGG</span>(FZNUM , <span class="string">&#x27;,&#x27;</span>) <span class="keyword">as</span> FZNUM ,<span class="built_in">LISTAGG</span>(yznum , <span class="string">&#x27;,&#x27;</span>) <span class="keyword">as</span> yznum ,TOTALDEBIT ,<span class="built_in">LISTAGG</span>(TOTALCREDIT , <span class="string">&#x27;,&#x27;</span>) <span class="keyword">as</span> totalcredit ,ISFZVOUCHER, ISYZVOUCHER <span class="keyword">from</span> </span><br><span class="line">表名</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> PK_GROUP,APPROVEDATE,DEF2,BILLNO,PK_PAYBILL,PK_BILLTYPECODE,BILLTYPENAME,TOTALDEBIT,ISFZVOUCHER,ISYZVOUCHER</span><br></pre></td></tr></table></figure><p><img src="/2024/06/26/240625/SQL%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%B0%86%E5%A4%9A%E8%A1%8C%E5%90%88%E5%B9%B61%E8%A1%8C%EF%BC%8C%E6%95%B0%E6%8D%AE%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94/image-20240219164642340.png" alt="image-20240219164642340"></p><p>要使用group by分组一下才行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置文件服务器</title>
      <link href="/2024/06/26/240625/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/06/26/240625/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件服务器"><a href="#配置文件服务器" class="headerlink" title="配置文件服务器"></a>配置文件服务器</h1><p><img src="/2024/06/26/240625/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240326153659015.png" alt="image-20240326153659015"></p><ul><li>调试参数里面  + fs</li><li><img src="/2024/06/26/240625/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20240326153730851.png" alt="image-20240326153730851"></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rest接口</title>
      <link href="/2024/06/25/240625/rest%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/06/25/240625/rest%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Rest接口"><a href="#Rest接口" class="headerlink" title="Rest接口"></a>Rest接口</h1><ul><li>rest接口就是一个简略的openapi接口，不需要去前台注册，也没有加密和解密的过程，没有安全性。</li></ul><h2 id="访问路径"><a href="#访问路径" class="headerlink" title="访问路径"></a>访问路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:port/uapws/rest/类path/方法/path</span><br></pre></td></tr></table></figure><h2 id="rest文件"><a href="#rest文件" class="headerlink" title="rest文件"></a>rest文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=&#x27;gb2312&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span> <span class="attr">classname</span>=<span class="string">&quot;nc.bs.bd.material.resources.MaterialResources&quot;</span> <span class="attr">exinfo</span>=<span class="string">&quot;物料-新增-分配&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rest</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Resources类"><a href="#Resources类" class="headerlink" title="Resources类"></a>Resources类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 6.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zht</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Path(&quot;/uapbd/material&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaterialResources</span> <span class="keyword">extends</span> <span class="title class_">AbstractUAPRestResource</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getModule</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;uapbd&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@POST</span></span><br><span class="line">    <span class="meta">@Path(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@Consumes(&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="meta">@Produces(&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">addMaterialDoc</span><span class="params">(JSONObject json)</span> &#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">errbuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>rest接口只需要resources类和rest接口，写完后部署重启，调用即可。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接更新vo的方法</title>
      <link href="/2024/06/25/240625/%E7%9B%B4%E6%8E%A5%E6%9B%B4%E6%96%B0vo%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2024/06/25/240625/%E7%9B%B4%E6%8E%A5%E6%9B%B4%E6%96%B0vo%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="更新vo的方法"><a href="#更新vo的方法" class="headerlink" title="更新vo的方法"></a>更新vo的方法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new VOUpdate&lt;SupplierVO&gt;().update(new SupplierVO[] &#123; suppliervo &#125;);</span><br></pre></td></tr></table></figure><p>不保险，比较暴力</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new HYPubBO().updateAry(updatevos.toArray(new HkSupplierPriceVO[0]));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程调试端口配置方式</title>
      <link href="/2024/06/25/240625/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2024/06/25/240625/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="远程调试端口配置方式"><a href="#远程调试端口配置方式" class="headerlink" title="远程调试端口配置方式"></a>远程调试端口配置方式</h1><p>–&gt;</p><p><img src="/2024/06/25/240625/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/image-20240305152404345.png" alt="image-20240305152404345"></p><p>—&gt;</p><p><img src="/2024/06/25/240625/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/image-20240305152428626.png" alt="image-20240305152428626"></p><p><img src="/2024/06/25/240625/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/image-20240305152528046.png" alt="image-20240305152528046"></p><p><img src="/2024/06/25/240625/%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%AB%AF%E5%8F%A3%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/image-20240305152606220.png" alt="image-20240305152606220"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9099</span><br></pre></td></tr></table></figure><h2 id="配置白名单"><a href="#配置白名单" class="headerlink" title="配置白名单"></a>配置白名单</h2><p>不让访问，有可能是那个调试端口没有放出来，不允许访问，和客户联系把端口放出来。</p><p>如果不让访问的话，可能是ip限制了，需要问一下客户那边能否配置一个白名单，允许你的ip访问测试环境</p>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全量补丁结构</title>
      <link href="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/"/>
      <url>/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="补丁结构"><a href="#补丁结构" class="headerlink" title="补丁结构"></a>补丁结构</h1><p>第一层</p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122110756989.png" alt="image-20231122110756989"></p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122110848685.png" alt="image-20231122110848685"></p><p>第二层</p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122110921308.png" alt="image-20231122110921308"></p><ul><li><p>hotwebs –》 nccloud</p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122111411549.png" alt="image-20231122111411549"></p></li></ul><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122111840612.png" alt="image-20231122111840612"></p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122111914515.png" alt="image-20231122111914515"></p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122112150771.png" alt="image-20231122112150771"></p><ul><li>moudles  存放后端代码</li></ul><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122112305883.png" alt="image-20231122112305883"></p><ul><li><p>moudles –》mcw—》</p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122112443284.png" alt="image-20231122112443284"></p></li><li><p>resources </p><p><img src="/2024/06/25/240625/%E5%85%A8%E9%87%8F%E8%A1%A5%E4%B8%81%E7%BB%93%E6%9E%84/image-20231122112334004.png" alt="image-20231122112334004"></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux打补丁方法</title>
      <link href="/2024/06/25/240625/Linux%E6%89%93%E8%A1%A5%E4%B8%81%E6%96%B9%E6%B3%95/"/>
      <url>/2024/06/25/240625/Linux%E6%89%93%E8%A1%A5%E4%B8%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux打补丁"><a href="#Linux打补丁" class="headerlink" title="Linux打补丁"></a>Linux打补丁</h1><h1 id="使用linux打补丁方法"><a href="#使用linux打补丁方法" class="headerlink" title="使用linux打补丁方法"></a>使用linux打补丁方法</h1><p>1.上传文件到linux</p><p>使用rz命令  没有的话用这个 yum -y install lrzsz 安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rz    自动弹出一个选择窗口</span><br></pre></td></tr></table></figure><p>2.上传一个zip文件夹</p><p>3.解压zip到指定的目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip obm.zip -d ncchome_20240226/modules</span><br></pre></td></tr></table></figure><ol start="4"><li>会弹出提示，是否替换  A就可以了！</li></ol><p>—-&gt;  下面是扩展命令</p><p>复制文件到 home目录下**</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r 源目录/ 目标目录</span><br></pre></td></tr></table></figure><p>-r 代表源目录是一个文件夹 注意后面＋&#x2F;代表源目录下的所有目录以及文件 都拷贝过去。</p><p>3.删除上传的文件</p><p>rm  文件名</p><p>rm -rf 文件夹名</p><h2 id="修改文件的权限"><a href="#修改文件的权限" class="headerlink" title="修改文件的权限"></a>修改文件的权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 770 文件或者目录</span><br></pre></td></tr></table></figure><p>-R 代表递归修改权限，当前目录及子目录的权限都会被修改</p><p>770 代表  主用户，组内用户的操作权限为  ：可读，可写，可执行  ，其他用户没有操作的权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l    /  或者   ls -al</span><br></pre></td></tr></table></figure><p><strong>ls</strong> -l           <em># 以长格式显示当前目录中的文件和目录</em><br><strong>ls</strong> -a           <em># 显示当前目录中的所有文件和目录，包括隐藏文件</em></p><p>这个命令可以在展示文件的同时，展示他们的 权限</p><h3 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h3><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p><ul><li>user：用户</li><li>group：组</li><li>others：其他</li></ul><p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限。</p><p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看：</p><p>如果我们需要将文件权限设置为 <strong>-rwxr-xr–</strong> ，可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u=rwx,g=rx,o=r 文件/目录名</span><br></pre></td></tr></table></figure><h2 id="vi-x2F-vim-的使用"><a href="#vi-x2F-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h2><ul><li><p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p></li><li><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong>  在命令模式下，用户输入的 字符 会被识别为命令，而不是文本字符。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 i --&gt; 进入到 输入模式</span><br><span class="line">按下ESC --&gt; 退回到命令模式</span><br><span class="line">输入:  --&gt; 在输入模式的时候，输入：会变成底部命令行模式，用于输入命令。</span><br></pre></td></tr></table></figure></li><li><p>在输入模式下，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BACK SPACE，退格键，删除光标前一个字符</span><br><span class="line">方向键，在文本中移动光标</span><br><span class="line">Page Up/Page Down，上/下翻页</span><br><span class="line">HOME/END，移动光标到行首/行尾</span><br><span class="line">:w：保存文件。</span><br><span class="line">:q：退出 Vim 编辑器。</span><br><span class="line">:wq：保存文件并退出 Vim 编辑器。</span><br><span class="line">:q!：强制退出Vim编辑器，不保存修改。</span><br></pre></td></tr></table></figure></li></ul><h2 id="打开一个文本文件"><a href="#打开一个文本文件" class="headerlink" title="打开一个文本文件"></a>打开一个文本文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim 文件名字</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看/关闭占用的端口</title>
      <link href="/2024/06/25/240625/%E6%9F%A5%E7%9C%8B-%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/"/>
      <url>/2024/06/25/240625/%E6%9F%A5%E7%9C%8B-%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="查看-x2F-关闭占用的端口"><a href="#查看-x2F-关闭占用的端口" class="headerlink" title="查看&#x2F;关闭占用的端口"></a>查看&#x2F;关闭占用的端口</h1><h2 id="Window端"><a href="#Window端" class="headerlink" title="Window端"></a>Window端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查看所有正在运行的端口号</span><br><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查看被占用的端口号，如下图就是查看是否有8080的端口号被占用</span><br><span class="line">netstat -ano|findstr &quot;8080&quot;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/25/240625/%E6%9F%A5%E7%9C%8B-%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/image-20240625180428097.png" alt="image-20240625180428097"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 首先查询出该端口号的pid，接着执行以下命令强制结束改端口号</span><br><span class="line">taskkill -PID 9848 -F</span><br></pre></td></tr></table></figure><h2 id="Linux端"><a href="#Linux端" class="headerlink" title="Linux端"></a>Linux端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | grep 端口号 </span><br></pre></td></tr></table></figure><p><img src="/2024/06/25/240625/%E6%9F%A5%E7%9C%8B-%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3/image-20240625180908477.png" alt="image-20240625180908477"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 PID  //杀死对应的进程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONString与JSONObject相互转化</title>
      <link href="/2024/06/25/240625/JSONString%E4%B8%8EJSONObject%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/"/>
      <url>/2024/06/25/240625/JSONString%E4%B8%8EJSONObject%E7%9B%B8%E4%BA%92%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="JSONString-与-JSONObject相互转化"><a href="#JSONString-与-JSONObject相互转化" class="headerlink" title="JSONString 与 JSONObject相互转化"></a>JSONString 与 JSONObject相互转化</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nccloud.api.rest.utils.NCCRestUtils;</span><br><span class="line"></span><br><span class="line">JSONString json ;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonobj</span> <span class="operator">=</span> JSON.parseObject(json.toJSONString());  <span class="comment">//转JSONObject</span></span><br><span class="line"><span class="type">JSONString</span> <span class="variable">json2</span> <span class="operator">=</span> NCCRestUtils.toJSONString(object);  <span class="comment">//转JSONString</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NCC开发 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
